<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TencentOS_tiny.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TencentOS_tiny.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 28 17:01:40 2019
<BR><P>
<H3>Maximum Stack Usage =        992 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ble_sm_sec_req_rx &rArr; ble_sm_enc_initiate &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[137]">port_int_disable</a>
 <LI><a href="#[139]">port_int_enable</a>
 <LI><a href="#[13b]">port_cpsr_save</a>
 <LI><a href="#[13d]">port_cpsr_restore</a>
 <LI><a href="#[135]">port_clz</a>
 <LI><a href="#[146]">port_sched_start</a>
 <LI><a href="#[148]">port_context_switch</a>
 <LI><a href="#[14a]">port_irq_context_switch</a>
 <LI><a href="#[e]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UsageFault_Handler</a><BR>
 <LI><a href="#[c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SVC_Handler</a><BR>
 <LI><a href="#[d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DebugMon_Handler</a><BR>
 <LI><a href="#[1f]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[4ac]">ble_hci_trans_buf_alloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ac]">ble_hci_trans_buf_alloc</a><BR>
 <LI><a href="#[44c]">ble_hs_conn_timer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44c]">ble_hs_conn_timer</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">GPIOTE_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from port_s.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">RADIO_IRQHandler</a> from nrf5x_isr.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">RNG_IRQHandler</a> from nrf5x_isr.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">RTC0_IRQHandler</a> from nrf5x_isr.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">RTC1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from mcu_init.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_nrf52.o(.text) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[1c]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">UARTE0_UART0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[104]">__main</a> from __main.o(!!!main) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[83]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[82]">_snputc</a> from _snputc.o(.text) referenced from noretval__2snprintf.o(.text)
 <LI><a href="#[81]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[85]">ble_att_clt_rx_error</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[9b]">ble_att_clt_rx_exec_write</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[89]">ble_att_clt_rx_find_info</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[8b]">ble_att_clt_rx_find_type_value</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[9e]">ble_att_clt_rx_indicate</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[87]">ble_att_clt_rx_mtu</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[99]">ble_att_clt_rx_prep_write</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[8f]">ble_att_clt_rx_read</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[91]">ble_att_clt_rx_read_blob</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[95]">ble_att_clt_rx_read_group_type</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[93]">ble_att_clt_rx_read_mult</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[8d]">ble_att_clt_rx_read_type</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[97]">ble_att_clt_rx_write</a> from ble_att_clt.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[40]">ble_att_rx</a> from ble_att.o(.text) referenced from ble_att.o(.text)
 <LI><a href="#[9a]">ble_att_svr_rx_exec_write</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[88]">ble_att_svr_rx_find_info</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[8a]">ble_att_svr_rx_find_type_value</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[9d]">ble_att_svr_rx_indicate</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[86]">ble_att_svr_rx_mtu</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[9c]">ble_att_svr_rx_notify</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[98]">ble_att_svr_rx_prep_write</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[8e]">ble_att_svr_rx_read</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[90]">ble_att_svr_rx_read_blob</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[94]">ble_att_svr_rx_read_group_type</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[92]">ble_att_svr_rx_read_mult</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[8c]">ble_att_svr_rx_read_type</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[96]">ble_att_svr_rx_write</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[9f]">ble_att_svr_rx_write_no_rsp</a> from ble_att_svr.o(.text) referenced from ble_att.o(.constdata)
 <LI><a href="#[41]">ble_gap_update_l2cap_cb</a> from ble_gap.o(.text) referenced 2 times from ble_gap.o(.text)
 <LI><a href="#[a4]">ble_gattc_disc_all_chrs_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b2]">ble_gattc_disc_all_chrs_resume</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c8]">ble_gattc_disc_all_chrs_rx_adata</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[cc]">ble_gattc_disc_all_chrs_rx_complete</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[bc]">ble_gattc_disc_all_chrs_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a6]">ble_gattc_disc_all_dscs_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b4]">ble_gattc_disc_all_dscs_resume</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[be]">ble_gattc_disc_all_dscs_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a1]">ble_gattc_disc_all_svcs_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[af]">ble_gattc_disc_all_svcs_resume</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b9]">ble_gattc_disc_all_svcs_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a5]">ble_gattc_disc_chr_uuid_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b3]">ble_gattc_disc_chr_uuid_resume</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c9]">ble_gattc_disc_chr_uuid_rx_adata</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[cd]">ble_gattc_disc_chr_uuid_rx_complete</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[bd]">ble_gattc_disc_chr_uuid_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a2]">ble_gattc_disc_svc_uuid_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b0]">ble_gattc_disc_svc_uuid_resume</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ba]">ble_gattc_disc_svc_uuid_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a3]">ble_gattc_find_inc_svcs_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b1]">ble_gattc_find_inc_svcs_resume</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c7]">ble_gattc_find_inc_svcs_rx_adata</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[cb]">ble_gattc_find_inc_svcs_rx_complete</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[d1]">ble_gattc_find_inc_svcs_rx_read_rsp</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[bb]">ble_gattc_find_inc_svcs_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ae]">ble_gattc_indicate_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c6]">ble_gattc_indicate_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a0]">ble_gattc_mtu_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b8]">ble_gattc_mtu_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[42]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.text)
 <LI><a href="#[45]">ble_gattc_proc_matches_conn_rx_entry</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.text)
 <LI><a href="#[44]">ble_gattc_proc_matches_expired</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.text)
 <LI><a href="#[43]">ble_gattc_proc_matches_stalled</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.text)
 <LI><a href="#[a7]">ble_gattc_read_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a9]">ble_gattc_read_long_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b5]">ble_gattc_read_long_resume</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[d0]">ble_gattc_read_long_rx_read_rsp</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c1]">ble_gattc_read_long_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[aa]">ble_gattc_read_mult_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c2]">ble_gattc_read_mult_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[cf]">ble_gattc_read_rx_read_rsp</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[bf]">ble_gattc_read_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a8]">ble_gattc_read_uuid_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ca]">ble_gattc_read_uuid_rx_adata</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ce]">ble_gattc_read_uuid_rx_complete</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c0]">ble_gattc_read_uuid_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ab]">ble_gattc_write_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ac]">ble_gattc_write_long_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b6]">ble_gattc_write_long_resume</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[d4]">ble_gattc_write_long_rx_exec</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[d2]">ble_gattc_write_long_rx_prep</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c4]">ble_gattc_write_long_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ad]">ble_gattc_write_reliable_err</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b7]">ble_gattc_write_reliable_resume</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[d5]">ble_gattc_write_reliable_rx_exec</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[d3]">ble_gattc_write_reliable_rx_prep</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c5]">ble_gattc_write_reliable_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c3]">ble_gattc_write_tmo</a> from ble_gattc.o(.text) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[48]">ble_gatts_chr_def_access</a> from ble_gatts.o(.text) referenced from ble_gatts.o(.text)
 <LI><a href="#[49]">ble_gatts_chr_val_access</a> from ble_gatts.o(.text) referenced from ble_gatts.o(.text)
 <LI><a href="#[412]">ble_gatts_clt_cfg_access</a> from ble_gatts.o(.text) referenced from ble_gatts.o(.text)
 <LI><a href="#[47]">ble_gatts_dsc_access</a> from ble_gatts.o(.text) referenced from ble_gatts.o(.text)
 <LI><a href="#[46]">ble_gatts_inc_access</a> from ble_gatts.o(.text) referenced from ble_gatts.o(.text)
 <LI><a href="#[4a]">ble_gatts_svc_access</a> from ble_gatts.o(.text) referenced from ble_gatts.o(.text)
 <LI><a href="#[4e]">ble_hs_event_reset</a> from ble_hs.o(.text) referenced from ble_hs.o(.text)
 <LI><a href="#[51]">ble_hs_event_rx_data</a> from ble_hs.o(.text) referenced from ble_hs.o(.text)
 <LI><a href="#[4c]">ble_hs_event_rx_hci_ev</a> from ble_hs.o(.text) referenced from ble_hs.o(.text)
 <LI><a href="#[4f]">ble_hs_event_start_stage1</a> from ble_hs.o(.text) referenced from ble_hs.o(.text)
 <LI><a href="#[50]">ble_hs_event_start_stage2</a> from ble_hs.o(.text) referenced from ble_hs.o(.text)
 <LI><a href="#[4d]">ble_hs_event_tx_notify</a> from ble_hs.o(.text) referenced from ble_hs.o(.text)
 <LI><a href="#[d8]">ble_hs_hci_evt_disconn_complete</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[da]">ble_hs_hci_evt_enc_key_refresh</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d9]">ble_hs_hci_evt_encrypt_change</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[db]">ble_hs_hci_evt_hw_error</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[dd]">ble_hs_hci_evt_le_adv_rpt</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[e9]">ble_hs_hci_evt_le_adv_set_terminated</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[dc]">ble_hs_hci_evt_le_conn_complete</a> from ble_hs_hci_evt.o(.text) referenced 2 times from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[e1]">ble_hs_hci_evt_le_conn_parm_req</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[de]">ble_hs_hci_evt_le_conn_upd_complete</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[e2]">ble_hs_hci_evt_le_dir_adv_rpt</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[e4]">ble_hs_hci_evt_le_ext_adv_rpt</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[e0]">ble_hs_hci_evt_le_lt_key_req</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d6]">ble_hs_hci_evt_le_meta</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[e6]">ble_hs_hci_evt_le_periodic_adv_rpt</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[e5]">ble_hs_hci_evt_le_periodic_adv_sync_estab</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[e7]">ble_hs_hci_evt_le_periodic_adv_sync_lost</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[e3]">ble_hs_hci_evt_le_phy_update_complete</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[df]">ble_hs_hci_evt_le_rd_rem_used_feat_complete</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[ea]">ble_hs_hci_evt_le_scan_req_rcvd</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[e8]">ble_hs_hci_evt_le_scan_timeout</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d7]">ble_hs_hci_evt_num_completed_pkts</a> from ble_hs_hci_evt.o(.text) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[55]">ble_hs_hci_frag_alloc</a> from ble_hs_hci.o(.text) referenced from ble_hs_hci.o(.text)
 <LI><a href="#[53]">ble_hs_hci_rx_evt</a> from ble_hs_hci.o(.text) referenced from ble_hs.o(.text)
 <LI><a href="#[56]">ble_hs_misc_restore_one_irk</a> from ble_hs_misc.o(.text) referenced from ble_hs_misc.o(.text)
 <LI><a href="#[52]">ble_hs_rx_data</a> from ble_hs.o(.text) referenced from ble_hs.o(.text)
 <LI><a href="#[57]">ble_hs_stop_gap_event</a> from ble_hs_stop.o(.text) referenced from ble_hs_stop.o(.text)
 <LI><a href="#[58]">ble_hs_stop_term_event_cb</a> from ble_hs_stop.o(.text) referenced from ble_hs_stop.o(.text)
 <LI><a href="#[4b]">ble_hs_timer_exp</a> from ble_hs.o(.text) referenced from ble_hs.o(.text)
 <LI><a href="#[59]">ble_l2cap_sig_rx</a> from ble_l2cap_sig.o(.text) referenced from ble_l2cap_sig.o(.text)
 <LI><a href="#[ec]">ble_l2cap_sig_rx_noop</a> from ble_l2cap_sig.o(.text) referenced 12 times from ble_l2cap_sig.o(.constdata)
 <LI><a href="#[eb]">ble_l2cap_sig_rx_reject</a> from ble_l2cap_sig.o(.text) referenced from ble_l2cap_sig.o(.constdata)
 <LI><a href="#[ed]">ble_l2cap_sig_update_req_rx</a> from ble_l2cap_sig.o(.text) referenced from ble_l2cap_sig.o(.constdata)
 <LI><a href="#[ee]">ble_l2cap_sig_update_rsp_rx</a> from ble_l2cap_sig.o(.text) referenced from ble_l2cap_sig.o(.constdata)
 <LI><a href="#[6a]">ble_ll_adv_event_done</a> from ble_ll_adv.o(.text) referenced from ble_ll_adv.o(.text)
 <LI><a href="#[66]">ble_ll_adv_legacy_pdu_make</a> from ble_ll_adv.o(.text) referenced from ble_ll_adv.o(.text)
 <LI><a href="#[69]">ble_ll_adv_scan_rsp_legacy_pdu_make</a> from ble_ll_adv.o(.text) referenced from ble_ll_adv.o(.text)
 <LI><a href="#[68]">ble_ll_adv_scheduled</a> from ble_ll_adv.o(.text) referenced from ble_ll_adv.o(.text)
 <LI><a href="#[65]">ble_ll_adv_tx_done</a> from ble_ll_adv.o(.text) referenced 2 times from ble_ll_adv.o(.text)
 <LI><a href="#[67]">ble_ll_adv_tx_start_cb</a> from ble_ll_adv.o(.text) referenced from ble_ll_adv.o(.text)
 <LI><a href="#[65d]">ble_ll_conn_auth_pyld_timer_cb</a> from ble_ll_conn.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[76]">ble_ll_conn_connect_ind_tx_pducb</a> from ble_ll_conn.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[75]">ble_ll_conn_connect_ind_txend_to_init</a> from ble_ll_conn.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[74]">ble_ll_conn_connect_ind_txend_to_standby</a> from ble_ll_conn.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[70]">ble_ll_conn_continue_rx_encrypt</a> from ble_ll_conn.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[73]">ble_ll_conn_event_end</a> from ble_ll_conn.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[72]">ble_ll_conn_event_start_cb</a> from ble_ll_conn.o(.text) referenced 3 times from ble_ll_conn.o(.text)
 <LI><a href="#[77]">ble_ll_conn_hci_cancel_conn_complete_event</a> from ble_ll_conn_hci.o(.text) referenced from ble_ll_conn_hci.o(.text)
 <LI><a href="#[6f]">ble_ll_conn_rxend_unencrypt</a> from ble_ll_conn.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[6c]">ble_ll_conn_start_rx_encrypt</a> from ble_ll_conn.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[6e]">ble_ll_conn_start_rx_unencrypt</a> from ble_ll_conn.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[6d]">ble_ll_conn_txend_encrypt</a> from ble_ll_conn.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[6b]">ble_ll_conn_wait_txend</a> from ble_ll_conn.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[78]">ble_ll_ctrl_proc_rsp_timer_cb</a> from ble_ll_ctrl.o(.text) referenced from ble_ll_ctrl.o(.text)
 <LI><a href="#[61]">ble_ll_event_comp_pkts</a> from ble_ll.o(.text) referenced from ble_ll.o(.text)
 <LI><a href="#[60]">ble_ll_event_dbuf_overflow</a> from ble_ll.o(.text) referenced from ble_ll.o(.text)
 <LI><a href="#[5e]">ble_ll_event_rx_pkt</a> from ble_ll.o(.text) referenced from ble_ll.o(.text)
 <LI><a href="#[5f]">ble_ll_event_tx_pkt</a> from ble_ll.o(.text) referenced from ble_ll.o(.text)
 <LI><a href="#[63]">ble_ll_hci_acl_rx</a> from ble_ll_hci.o(.text) referenced from ble_ll.o(.text)
 <LI><a href="#[79]">ble_ll_hci_cmd_proc</a> from ble_ll_hci.o(.text) referenced from ble_ll_hci.o(.text)
 <LI><a href="#[64]">ble_ll_hci_cmd_rx</a> from ble_ll_hci.o(.text) referenced from ble_ll.o(.text)
 <LI><a href="#[62]">ble_ll_hw_err_timer_cb</a> from ble_ll.o(.text) referenced from ble_ll.o(.text)
 <LI><a href="#[701]">ble_ll_rand_sample</a> from ble_ll_rand.o(.text) referenced from ble_ll_rand.o(.text)
 <LI><a href="#[7a]">ble_ll_resolv_rpa_timer_cb</a> from ble_ll_resolv.o(.text) referenced from ble_ll_resolv.o(.text)
 <LI><a href="#[7c]">ble_ll_scan_event_proc</a> from ble_ll_scan.o(.text) referenced from ble_ll_scan.o(.text)
 <LI><a href="#[7d]">ble_ll_scan_interrupted_event_cb</a> from ble_ll_scan.o(.text) referenced from ble_ll_scan.o(.text)
 <LI><a href="#[7b]">ble_ll_scan_req_tx_pducb</a> from ble_ll_scan.o(.text) referenced from ble_ll_scan.o(.text)
 <LI><a href="#[734]">ble_ll_scan_timer_cb</a> from ble_ll_scan.o(.text) referenced from ble_ll_scan.o(.text)
 <LI><a href="#[7e]">ble_ll_sched_run</a> from ble_ll_sched.o(.text) referenced from ble_ll_sched.o(.text)
 <LI><a href="#[71]">ble_ll_tx_mbuf_pducb</a> from ble_ll.o(.text) referenced from ble_ll_conn.o(.text)
 <LI><a href="#[5d]">ble_ll_xcvr_rfclk_timer_exp</a> from ble_ll_xcvr.o(.text) referenced from ble_ll.o(.text)
 <LI><a href="#[80]">ble_phy_isr</a> from ble_phy.o(.text) referenced from ble_phy.o(.text)
 <LI><a href="#[7f]">ble_rng_isr</a> from ble_hw.o(.text) referenced from ble_hw.o(.text)
 <LI><a href="#[fc]">ble_sm_confirm_exec</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f1]">ble_sm_confirm_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f4]">ble_sm_enc_info_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[101]">ble_sm_enc_restore_exec</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[100]">ble_sm_enc_start_exec</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f3]">ble_sm_fail_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f7]">ble_sm_id_addr_info_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f6]">ble_sm_id_info_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[102]">ble_sm_key_exch_exec</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[ff]">ble_sm_ltk_restore_exec</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[fe]">ble_sm_ltk_start_exec</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f5]">ble_sm_master_id_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[fb]">ble_sm_pair_exec</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[ef]">ble_sm_pair_req_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f0]">ble_sm_pair_rsp_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[fd]">ble_sm_random_exec</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f2]">ble_sm_random_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[5a]">ble_sm_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.text)
 <LI><a href="#[fa]">ble_sm_rx_noop</a> from ble_sm.o(.text) referenced 3 times from ble_sm.o(.constdata)
 <LI><a href="#[103]">ble_sm_sec_req_exec</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f9]">ble_sm_sec_req_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f8]">ble_sm_sign_info_rx</a> from ble_sm.o(.text) referenced from ble_sm.o(.constdata)
 <LI><a href="#[7bf]">ble_store_ram_delete</a> from ble_store_ram.o(.text) referenced from ble_store_ram.o(.text)
 <LI><a href="#[7bd]">ble_store_ram_read</a> from ble_store_ram.o(.text) referenced from ble_store_ram.o(.text)
 <LI><a href="#[7be]">ble_store_ram_write</a> from ble_store_ram.o(.text) referenced from ble_store_ram.o(.text)
 <LI><a href="#[5c]">ble_store_util_iter_count</a> from ble_store_util.o(.text) referenced from ble_store_util.o(.text)
 <LI><a href="#[5b]">ble_store_util_iter_unique_peer</a> from ble_store_util.o(.text) referenced from ble_store_util.o(.text)
 <LI><a href="#[5]">ble_svc_gap_access</a> from ble_svc_gap.o(.text) referenced 4 times from ble_svc_gap.o(.data)
 <LI><a href="#[20b]">blehr_boot</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[3a]">blehr_gap_event</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[3b]">blehr_on_sync</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[3c]">blehr_tx_hrate</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[54]">find_field_func</a> from ble_hs_adv.o(.text) referenced from ble_hs_adv.o(.text)
 <LI><a href="#[84]">fputc</a> from mcu_init.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[4]">gatt_svr_chr_access_device_info</a> from gatt_svr.o(.text) referenced 4 times from gatt_svr.o(.data)
 <LI><a href="#[3]">gatt_svr_chr_access_heart_rate</a> from gatt_svr.o(.text) referenced 4 times from gatt_svr.o(.data)
 <LI><a href="#[37]">knl_idle_entry</a> from tos_sys.o(.text) referenced from tos_sys.o(.text)
 <LI><a href="#[3e]">nimble_port_ll_task_func</a> from nimble_port.o(.text) referenced from nimble_port_tencentos_tiny.o(.text)
 <LI><a href="#[3d]">nimble_port_run</a> from nimble_port.o(.text) referenced from main.o(.text)
 <LI><a href="#[75b]">nrf52_timer5_irq_handler</a> from hal_timer.o(.text) referenced from hal_timer.o(.text)
 <LI><a href="#[3f]">os_callout_timer_cb</a> from npl_os_tencenos_tiny.o(.text) referenced from npl_os_tencenos_tiny.o(.text)
 <LI><a href="#[39]">task_default_walker</a> from tos_task.o(.text) referenced from tos_task.o(.text)
 <LI><a href="#[38]">task_exit</a> from tos_task.o(.text) referenced from tos_task.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[104]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[105]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[107]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7d6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7d7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7d8]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[7d9]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[7da]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[108]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7c8]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[10a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[10c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[7db]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[115]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[10e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[7dc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[7dd]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[110]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[7de]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[7df]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[7e0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[7e1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7e2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[7e3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[7e4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[7e5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[7e6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[7e7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[7e8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[7e9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[7ea]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[7eb]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[7ec]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[7ed]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[7ee]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[7ef]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[11a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[7f0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[7f1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[7f2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[7f3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[7f4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[7f5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[7f6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[106]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[7f7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[112]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[114]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[7f8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[116]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; nimble_port_init &rArr; ble_ll_init &rArr; ble_ll_conn_module_init &rArr; ble_ll_conn_module_reset &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7f9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7d5]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[119]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[7fa]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[11b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[663]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_master_common_init
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_access_addr
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_reschedule
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_backoff
</UL>

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7d4]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11c]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[84]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mcu_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[7fb]"></a>_ttywrch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_init.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mcu_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>board_init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mcu_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = board_init &rArr; simple_uart_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_config
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7fc]"></a>simple_uart_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, simple_uart.o(.text), UNUSED)

<P><STRONG><a name="[7fd]"></a>simple_uart_get_with_timeout</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, simple_uart.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>simple_uart_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, simple_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_putstring
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[124]"></a>simple_uart_putstring</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, simple_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_put
</UL>

<P><STRONG><a name="[123]"></a>simple_uart_config</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, simple_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = simple_uart_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[133]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 664 bytes, Stack size 8 bytes, system_nrf52.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_12
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_31
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_37
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_57
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_108
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_136
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_182
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>tos_cpu_clz</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>

<P><STRONG><a name="[136]"></a>tos_cpu_int_disable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_remove
</UL>

<P><STRONG><a name="[138]"></a>tos_cpu_int_enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_int_enable
</UL>

<P><STRONG><a name="[13a]"></a>tos_cpu_cpsr_save</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_flush
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_next_expires_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_next_expires_get
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_walkthru
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_curr_task_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_sem_get_count
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_remove
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create_cancel
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_start_now
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>

<P><STRONG><a name="[13c]"></a>tos_cpu_cpsr_restore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_flush
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_next_expires_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_next_expires_get
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_walkthru
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_curr_task_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_sem_get_count
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_remove
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create_cancel
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_start_now
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
</UL>

<P><STRONG><a name="[13e]"></a>cpu_systick_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_systick_init &rArr; port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[141]"></a>cpu_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cpu_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[143]"></a>cpu_reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpu_reset
</UL>

<P><STRONG><a name="[145]"></a>cpu_sched_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[147]"></a>cpu_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[149]"></a>cpu_irq_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_irq_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>

<P><STRONG><a name="[1c4]"></a>cpu_task_stk_init</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_task_stk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[144]"></a>port_cpu_reset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, port_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_reset
</UL>

<P><STRONG><a name="[140]"></a>port_systick_config</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, port_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[13f]"></a>port_systick_priority_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = port_systick_priority_set &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[137]"></a>port_int_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_int_disable
</UL>

<P><STRONG><a name="[139]"></a>port_int_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_int_enable
</UL>

<P><STRONG><a name="[13b]"></a>port_cpsr_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[13d]"></a>port_cpsr_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[135]"></a>port_clz</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>

<P><STRONG><a name="[146]"></a>port_sched_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>

<P><STRONG><a name="[148]"></a>port_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>

<P><STRONG><a name="[14a]"></a>port_irq_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>

<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>mmheap_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>

<P><STRONG><a name="[16e]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[170]"></a>mmheap_init_with_pool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[171]"></a>tos_mmheap_alloc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_init
</UL>

<P><STRONG><a name="[173]"></a>tos_mmheap_calloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[175]"></a>tos_mmheap_aligned_alloc</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
</UL>

<P><STRONG><a name="[177]"></a>tos_mmheap_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_free &rArr; blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[178]"></a>tos_mmheap_realloc</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_realloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[17a]"></a>tos_mmheap_pool_rmv</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_unrecord
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[17c]"></a>tos_mmheap_pool_check</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_check
</UL>

<P><STRONG><a name="[17d]"></a>tos_mmheap_check</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
</UL>

<P><STRONG><a name="[180]"></a>mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>

<P><STRONG><a name="[182]"></a>tos_mutex_create</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tos_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tos_mutex_create &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_init
</UL>

<P><STRONG><a name="[185]"></a>tos_mutex_destroy</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>

<P><STRONG><a name="[189]"></a>tos_mutex_pend_timed</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, tos_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_pend
</UL>

<P><STRONG><a name="[18f]"></a>tos_mutex_pend</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[190]"></a>tos_mutex_post</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, tos_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_task_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_release
</UL>

<P><STRONG><a name="[192]"></a>pend_highest_pending_prio_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[191]"></a>pend_highest_pending_task_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[195]"></a>pend_list_remove</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[184]"></a>pend_object_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>

<P><STRONG><a name="[187]"></a>pend_object_deinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_pend.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[186]"></a>pend_is_nopending</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_is_nopending
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[198]"></a>pend_list_adjust</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_adjust &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[7fe]"></a>pend_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_pend.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>pend_state2errno</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tos_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[19a]"></a>pend_task_wakeup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_task_recv
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
</UL>

<P><STRONG><a name="[18d]"></a>pend_task_block</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[193]"></a>pend_wakeup_one</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_one &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[181]"></a>pend_wakeup_all</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[19f]"></a>pend_wakeup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>

<P><STRONG><a name="[7ff]"></a>readyqueue_is_prio_onlyone</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tos_sched.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>readyqueue_first_task_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>

<P><STRONG><a name="[1b7]"></a>readyqueue_highest_ready_task_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[1b4]"></a>readyqueue_init</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[1a3]"></a>readyqueue_add_head</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[1a6]"></a>readyqueue_add_tail</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[19c]"></a>readyqueue_add</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
</UL>

<P><STRONG><a name="[19d]"></a>readyqueue_remove</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[1a9]"></a>readyqueue_move_head_to_tail</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>

<P><STRONG><a name="[1aa]"></a>tos_sem_create_max</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tos_sem_create_max &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
</UL>

<P><STRONG><a name="[1ab]"></a>tos_sem_create</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tos_sem_create &rArr; tos_sem_create_max &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_sem_init
</UL>

<P><STRONG><a name="[1ac]"></a>tos_sem_destroy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tos_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[1ae]"></a>tos_sem_post</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_sem_release
</UL>

<P><STRONG><a name="[1af]"></a>tos_sem_post_all</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>

<P><STRONG><a name="[1b0]"></a>tos_sem_pend</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tos_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_sem_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_sem_pend
</UL>

<P><STRONG><a name="[1b1]"></a>knl_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[1b3]"></a>tos_knl_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[1b6]"></a>tos_knl_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_curr_task_get
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_parent_task
</UL>

<P><STRONG><a name="[11e]"></a>tos_knl_irq_enter</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tos_knl_irq_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[18b]"></a>knl_is_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[18c]"></a>knl_is_sched_locked</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[183]"></a>knl_is_inirq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>

<P><STRONG><a name="[120]"></a>tos_knl_irq_leave</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_irq_leave &rArr; cpu_irq_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1b8]"></a>tos_knl_sched_lock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_lock &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_remove
</UL>

<P><STRONG><a name="[188]"></a>knl_sched</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = knl_sched &rArr; cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[1b9]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_unlock &rArr; knl_sched &rArr; cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[1ba]"></a>tos_knl_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_tencentos_tiny_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bf]"></a>knl_is_idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[1c2]"></a>tos_task_destroy</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
</UL>

<P><STRONG><a name="[1b2]"></a>tos_task_create</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_tencentos_tiny_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>tos_task_yield</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[17f]"></a>tos_task_prio_change</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>

<P><STRONG><a name="[1c6]"></a>tos_task_suspend</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tos_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>

<P><STRONG><a name="[1c7]"></a>tos_task_resume</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tos_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>

<P><STRONG><a name="[1c8]"></a>tos_task_delay</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, tos_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_hmsm
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_ms
</UL>

<P><STRONG><a name="[1c9]"></a>tos_task_delay_abort</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tos_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>

<P><STRONG><a name="[1ca]"></a>tos_task_curr_task_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>

<P><STRONG><a name="[1cb]"></a>tos_task_walkthru</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tos_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_info_display
</UL>

<P><STRONG><a name="[1cc]"></a>tos_task_info_display</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_walkthru
</UL>

<P><STRONG><a name="[19e]"></a>tick_list_add</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[19b]"></a>tick_list_remove</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[1d1]"></a>tick_update</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[1d2]"></a>tick_next_expires_get</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tos_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>

<P><STRONG><a name="[11f]"></a>tos_tick_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1d4]"></a>tos_systick_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_insert_prep_entry
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx_payload
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
</UL>

<P><STRONG><a name="[1d5]"></a>tos_systick_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[1d6]"></a>tos_tick2millisec</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tos_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1d7]"></a>tos_millisec2tick</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_ms
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_time_ms_to_ticks
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sync
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_wait_for_ack
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_set_timer
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_set_timer
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_auth_pyld_timer_start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_err_timer_cb
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_start_rsp_timer
</UL>

<P><STRONG><a name="[1d8]"></a>tos_sleep_ms</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[1d9]"></a>tos_sleep_hmsm</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, tos_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1dc]"></a>tos_timer_create</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, tos_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tos_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_init
</UL>

<P><STRONG><a name="[1de]"></a>tos_timer_destroy</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
</UL>

<P><STRONG><a name="[1df]"></a>tos_timer_start</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, tos_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_timer_start &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_reset
</UL>

<P><STRONG><a name="[1e0]"></a>tos_timer_stop</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tos_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_timer_stop &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_stop
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_reset
</UL>

<P><STRONG><a name="[1e1]"></a>tos_timer_delay_change</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, tos_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_reset
</UL>

<P><STRONG><a name="[1e3]"></a>tos_timer_period_change</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_change
</UL>

<P><STRONG><a name="[1e4]"></a>timer_next_expires_get</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[1d3]"></a>timer_update</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tos_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = timer_update &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[1b5]"></a>timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[1e5]"></a>tos_msg_q_create</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tos_message_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tos_msg_q_create &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_init
</UL>

<P><STRONG><a name="[1e7]"></a>tos_msg_q_destroy</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tos_message_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
</UL>

<P><STRONG><a name="[1e9]"></a>tos_msg_q_flush</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tos_message_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_flush
</UL>

<P><STRONG><a name="[1eb]"></a>tos_msg_q_pend</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, tos_message_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tos_msg_q_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_remove
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_get
</UL>

<P><STRONG><a name="[1f0]"></a>tos_msg_q_post</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_message_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_remove
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_put
</UL>

<P><STRONG><a name="[1f1]"></a>tos_msg_q_post_all</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_message_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
</UL>

<P><STRONG><a name="[1e6]"></a>tos_ring_q_create</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tos_ring_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
</UL>

<P><STRONG><a name="[1e8]"></a>tos_ring_q_destroy</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tos_ring_queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_destroy
</UL>

<P><STRONG><a name="[1f2]"></a>tos_ring_q_is_full</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tos_ring_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>

<P><STRONG><a name="[1ef]"></a>tos_ring_q_enqueue</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, tos_ring_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_enqueue &rArr; tos_ring_q_is_full &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
</UL>

<P><STRONG><a name="[1f3]"></a>tos_ring_q_is_empty</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_ring_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_is_empty
</UL>

<P><STRONG><a name="[1ec]"></a>tos_ring_q_dequeue</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, tos_ring_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_ring_q_dequeue &rArr; tos_ring_q_is_empty &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
</UL>

<P><STRONG><a name="[1ea]"></a>tos_ring_q_flush</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tos_ring_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_flush
</UL>

<P><STRONG><a name="[1f8]"></a>gatt_svr_register_cb</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, gatt_svr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_str
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[1fb]"></a>gatt_svr_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gatt_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = gatt_svr_init &rArr; ble_gatts_add_svcs &rArr; realloc &rArr; tos_mmheap_realloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_count_cfg
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_boot
</UL>

<P><STRONG><a name="[20a]"></a>sysinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[20b]"></a>blehr_boot</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = blehr_boot &rArr; gatt_svr_init &rArr; ble_gatts_add_svcs &rArr; realloc &rArr; tos_mmheap_realloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_tencentos_tiny_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_device_name_set
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = main &rArr; nimble_port_init &rArr; ble_ll_init &rArr; ble_ll_conn_module_init &rArr; ble_ll_conn_module_reset &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1f6]"></a>__aeabi_assert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nimble_port_tencentos_tiny.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_put
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_callout_timer_cb
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_boot
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_on_sync
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate_reset
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_register_cb
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_device_info
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_heart_rate
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_cmd
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_hs_acl_tx
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_free
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_start_stage2
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_hs_cmd_tx
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_begin
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_disconnect_cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_cancel_conn_complete_event
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_remapped_channel
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_master_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_get_priv_addr
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_terminate_start
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_ll_acl_tx
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_end
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_get_conn_comp_ev
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_setchan
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_reschedule
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_new
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_send_conn_comp_ev
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_make_done
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_reschedule_event
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_update_data_mbuf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_done
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_scan_rsp_legacy_pdu_make
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_legacy_pdu_make
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_init
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rxpdu_copy
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_init
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_wfr_timer_exp
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_init
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_module_init
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_pdu_max_tx_octets_get
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_task
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_tx_flat_mbuf_pducb
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_tx_mbuf_pducb
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_enable
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_periodic_adv
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_execute_item
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_time_till_settled
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_state
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_disable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_start
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_filter_policy
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_dup_update_legacy
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_send_adv_report
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_backoff
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_gen_priv_addr
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_rmv
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_add
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_ll_evt_tx
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_cmd_proc
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_pdu_make
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_isr
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_end_isr
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx_end_isr
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init_once
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_copypkthdr
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_relative
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_ram_init
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_read
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_config
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_access
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_appearance_write_access
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_device_name_write_access
</UL>

<P><STRONG><a name="[20f]"></a>nimble_port_tencentos_tiny_init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, nimble_port_tencentos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = nimble_port_tencentos_tiny_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_boot
</UL>

<P><STRONG><a name="[211]"></a>npl_tencentos_tiny_eventq_put</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_callout_timer_cb
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_put
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_cmd_rx
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mqueue_put
</UL>

<P><STRONG><a name="[212]"></a>npl_tencentos_tiny_eventq_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = npl_tencentos_tiny_eventq_init &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
</UL>

<P><STRONG><a name="[213]"></a>npl_tencentos_tiny_eventq_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = npl_tencentos_tiny_eventq_get &rArr; tos_msg_q_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_run
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_task
</UL>

<P><STRONG><a name="[214]"></a>npl_tencentos_tiny_eventq_remove</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_int_disable
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_remove
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_remove
</UL>

<P><STRONG><a name="[215]"></a>npl_tencentos_tiny_eventq_is_empty</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, npl_os_tencenos_tiny.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
</UL>

<P><STRONG><a name="[216]"></a>npl_tencentos_tiny_mutex_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = npl_tencentos_tiny_mutex_init &rArr; tos_mutex_create &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_init
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_init
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[217]"></a>npl_tencentos_tiny_mutex_pend</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt_done
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock_nested
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_lock
</UL>

<P><STRONG><a name="[218]"></a>npl_tencentos_tiny_mutex_release</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = npl_tencentos_tiny_mutex_release &rArr; tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt_done
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock_nested
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_unlock
</UL>

<P><STRONG><a name="[219]"></a>npl_tencentos_tiny_sem_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = npl_tencentos_tiny_sem_init &rArr; tos_sem_create &rArr; tos_sem_create_max &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_init
</UL>

<P><STRONG><a name="[21a]"></a>npl_tencentos_tiny_sem_pend</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = npl_tencentos_tiny_sem_pend &rArr; tos_sem_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_wait_for_ack
</UL>

<P><STRONG><a name="[21b]"></a>npl_tencentos_tiny_sem_release</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = npl_tencentos_tiny_sem_release &rArr; tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_ack
</UL>

<P><STRONG><a name="[21c]"></a>npl_tencentos_tiny_sem_get_count</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = npl_tencentos_tiny_sem_get_count &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_ack
</UL>

<P><STRONG><a name="[20d]"></a>npl_tencentos_tiny_callout_init</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = npl_tencentos_tiny_callout_init &rArr; tos_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_create
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_boot
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_sm_new
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_init
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_start_rsp_timer
</UL>

<P><STRONG><a name="[201]"></a>npl_tencentos_tiny_callout_reset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_delay_change
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_stop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate_reset
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_reset
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_auth_pyld_timer_start
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_reset
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_reset
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_start_rsp_timer
</UL>

<P><STRONG><a name="[1ff]"></a>npl_tencentos_tiny_callout_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = npl_tencentos_tiny_callout_stop &rArr; tos_timer_stop &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate_stop
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_reset
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
</UL>

<P><STRONG><a name="[440]"></a>npl_tencentos_tiny_callout_is_active</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_wr_auth_pyld_tmo
</UL>

<P><STRONG><a name="[441]"></a>npl_tencentos_tiny_callout_get_ticks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
</UL>

<P><STRONG><a name="[800]"></a>npl_tencentos_tiny_callout_remaining_ticks</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>npl_tencentos_tiny_time_ms_to_ticks</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = npl_tencentos_tiny_time_ms_to_ticks &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks
</UL>

<P><STRONG><a name="[21e]"></a>npl_tencentos_tiny_time_ticks_to_ms</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, npl_os_tencenos_tiny.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[11]"></a>RADIO_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf5x_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RADIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RNG_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf5x_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RNG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf5x_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[75d]"></a>ble_npl_hw_set_isr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf5x_isr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_init
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_rng_init
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_init
</UL>

<P><STRONG><a name="[21f]"></a>malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tencent_os_tiny_libc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = malloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_start
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mempool_gen
</UL>

<P><STRONG><a name="[220]"></a>realloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tencent_os_tiny_libc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = realloc &rArr; tos_mmheap_realloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
</UL>

<P><STRONG><a name="[221]"></a>calloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tencent_os_tiny_libc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
</UL>

<P><STRONG><a name="[222]"></a>free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tencent_os_tiny_libc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = free &rArr; tos_mmheap_free &rArr; blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_free_start_mem
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_free_mem
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_free_svc_defs
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mbuf_pool
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mempool_ext
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mempool
</UL>

<P><STRONG><a name="[223]"></a>ble_att_conn_chan_find</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_att.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_att_conn_chan_find &rArr; ble_hs_misc_conn_chan_find
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_mtu_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_tx
</UL>

<P><STRONG><a name="[268]"></a>ble_att_inc_tx_stat</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, ble_att.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
</UL>

<P><STRONG><a name="[225]"></a>ble_att_chan_mtu</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_att.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_att_chan_mtu
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_is_mtu_req_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_truncate_to_mtu
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_get_mtu
</UL>

<P><STRONG><a name="[227]"></a>ble_att_truncate_to_mtu</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ble_att_truncate_to_mtu &rArr; os_mbuf_adj &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_chan_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
</UL>

<P><STRONG><a name="[229]"></a>ble_att_mtu</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_att.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_att_mtu &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_chan_mtu
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_group_type_rsp
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_mult_rsp
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_type_rsp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_find_type_value_rsp
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_find_info_rsp
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_tx
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_tx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_rx_read_rsp
</UL>

<P><STRONG><a name="[23c]"></a>ble_att_set_peer_mtu</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_att.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
</UL>

<P><STRONG><a name="[801]"></a>ble_att_preferred_mtu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_att.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>ble_att_set_preferred_mtu</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_att.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_idx
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_chan_find_by_scid
</UL>

<P><STRONG><a name="[235]"></a>ble_att_create_chan</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_att.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_att_create_chan &rArr; ble_l2cap_chan_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
</UL>

<P><STRONG><a name="[461]"></a>ble_att_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_att.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[85]"></a>ble_att_clt_rx_error</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_error &rArr; ble_gattc_rx_err &rArr; ble_gattc_extract_first_by_conn_op &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[239]"></a>ble_att_clt_tx_mtu</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ble_att_clt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_tx
</UL>

<P><STRONG><a name="[87]"></a>ble_att_clt_rx_mtu</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_mtu &rArr; ble_gap_mtu_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_mtu
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_mtu_event
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_peer_mtu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_chan_mtu
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[23f]"></a>ble_att_clt_tx_find_info</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_tx_find_info &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_tx
</UL>

<P><STRONG><a name="[89]"></a>ble_att_clt_rx_find_info</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_find_info &rArr; ble_gattc_rx_find_info_complete &rArr; ble_gattc_disc_all_dscs_rx_complete &rArr; ble_gattc_disc_all_dscs_resume &rArr; ble_gattc_disc_all_dscs_tx &rArr; ble_att_clt_tx_find_info &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_idata
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_complete
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_parse_find_info_entry
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[245]"></a>ble_att_clt_tx_find_type_value</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_tx_find_type_value &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_tx
</UL>

<P><STRONG><a name="[8b]"></a>ble_att_clt_rx_find_type_value</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_find_type_value &rArr; ble_gattc_rx_find_type_value_complete &rArr; ble_gattc_disc_svc_uuid_rx_complete &rArr; ble_gattc_disc_svc_uuid_resume &rArr; ble_gattc_disc_svc_uuid_tx &rArr; ble_att_clt_tx_find_type_value &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_hinfo
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_complete
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_parse_find_type_value_hinfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[249]"></a>ble_att_clt_tx_read_type</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_tx
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_tx
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_tx
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_tx
</UL>

<P><STRONG><a name="[8d]"></a>ble_att_clt_rx_read_type</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_read_type &rArr; ble_gattc_rx_read_type_complete &rArr; ble_gattc_extract_with_rx_entry &rArr; ble_gattc_extract_one &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_complete
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_adata
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[24e]"></a>ble_att_clt_tx_read</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_tx_read &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_tx
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_tx
</UL>

<P><STRONG><a name="[8f]"></a>ble_att_clt_rx_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_read &rArr; ble_gattc_rx_read_rsp &rArr; ble_gattc_extract_with_rx_entry &rArr; ble_gattc_extract_one &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[250]"></a>ble_att_clt_tx_read_blob</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_tx_read_blob &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_tx
</UL>

<P><STRONG><a name="[91]"></a>ble_att_clt_rx_read_blob</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_read_blob &rArr; ble_gattc_rx_read_blob_rsp &rArr; ble_gattc_read_long_rx_read_rsp &rArr; ble_gattc_read_long_resume &rArr; ble_gattc_read_long_tx &rArr; ble_att_clt_tx_read_blob &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_blob_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[252]"></a>ble_att_clt_tx_read_mult</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ble_att_clt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult_tx
</UL>

<P><STRONG><a name="[93]"></a>ble_att_clt_rx_read_mult</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_read_mult &rArr; ble_gattc_rx_read_mult_rsp &rArr; ble_gattc_extract_first_by_conn_op &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_mult_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[254]"></a>ble_att_clt_tx_read_group_type</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_tx_read_group_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_tx
</UL>

<P><STRONG><a name="[95]"></a>ble_att_clt_rx_read_group_type</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_read_group_type &rArr; ble_gattc_rx_read_group_type_complete &rArr; ble_gattc_disc_all_svcs_rx_complete &rArr; ble_gattc_disc_all_svcs_resume &rArr; ble_gattc_disc_all_svcs_tx &rArr; ble_att_clt_tx_read_group_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_complete
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_adata
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_parse_read_group_type_adata
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[258]"></a>ble_att_clt_tx_write_req</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_att_clt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write
</UL>

<P><STRONG><a name="[25b]"></a>ble_att_clt_tx_write_cmd</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ble_att_clt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_no_rsp
</UL>

<P><STRONG><a name="[97]"></a>ble_att_clt_rx_write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_write &rArr; ble_gattc_rx_write_rsp &rArr; ble_gattc_extract_first_by_conn_op &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_write_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[25e]"></a>ble_att_clt_tx_prep_write</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_tx
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_tx
</UL>

<P><STRONG><a name="[99]"></a>ble_att_clt_rx_prep_write</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_prep_write &rArr; ble_gattc_rx_prep_write_rsp &rArr; ble_gattc_extract_with_rx_entry &rArr; ble_gattc_extract_one &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_prep_write_rsp
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[260]"></a>ble_att_clt_tx_exec_write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_tx_exec_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_err
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_tx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_err
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_tx
</UL>

<P><STRONG><a name="[9b]"></a>ble_att_clt_rx_exec_write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_exec_write &rArr; ble_gattc_rx_exec_write_rsp &rArr; ble_gattc_extract_with_rx_entry &rArr; ble_gattc_extract_one &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_exec_write_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[262]"></a>ble_att_clt_tx_notify</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_tx_notify &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify_custom
</UL>

<P><STRONG><a name="[263]"></a>ble_att_clt_tx_indicate</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_tx_indicate &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
</UL>

<P><STRONG><a name="[9e]"></a>ble_att_clt_rx_indicate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_rx_indicate &rArr; ble_gattc_rx_indicate_rsp &rArr; ble_gattc_indicate_rx_rsp &rArr; ble_gatts_send_next_indicate &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_indicate_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[265]"></a>ble_att_cmd_prepare</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_att_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_att_cmd_prepare &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_indicate_rsp
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_write_rsp
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_group_type_rsp
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_mult_rsp
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_type_rsp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_find_type_value_rsp
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_find_info_rsp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_mtu_rsp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_error_rsp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_blob
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
</UL>

<P><STRONG><a name="[23a]"></a>ble_att_cmd_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_att_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_att_cmd_get &rArr; ble_hs_mbuf_l2cap_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_indicate
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_notify
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_req
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_mult
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_blob
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_type_value
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_info
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
</UL>

<P><STRONG><a name="[23b]"></a>ble_att_tx</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_att_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_truncate_to_mtu
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_inc_tx_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_indicate
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_notify
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_req
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_mult
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_blob
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_type_value
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_info
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_error_rsp
</UL>

<P><STRONG><a name="[26b]"></a>ble_att_error_rsp_parse</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[26d]"></a>ble_att_error_rsp_write</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[26f]"></a>ble_att_error_rsp_log</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[271]"></a>ble_att_mtu_req_parse</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[272]"></a>ble_att_mtu_rsp_parse</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[273]"></a>ble_att_mtu_req_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[274]"></a>ble_att_mtu_rsp_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[275]"></a>ble_att_mtu_cmd_log</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[276]"></a>ble_att_find_info_req_parse</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[277]"></a>ble_att_find_info_req_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[278]"></a>ble_att_find_info_req_log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[279]"></a>ble_att_find_info_rsp_parse</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[27a]"></a>ble_att_find_info_rsp_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[27b]"></a>ble_att_find_info_rsp_log</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[27c]"></a>ble_att_find_type_value_req_parse</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[27d]"></a>ble_att_find_type_value_req_write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[27e]"></a>ble_att_find_type_value_req_log</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[27f]"></a>ble_att_read_type_req_parse</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[280]"></a>ble_att_read_type_req_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[281]"></a>ble_att_read_type_req_log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[282]"></a>ble_att_read_type_rsp_parse</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[283]"></a>ble_att_read_type_rsp_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[284]"></a>ble_att_read_type_rsp_log</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[285]"></a>ble_att_read_req_parse</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[286]"></a>ble_att_read_req_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[287]"></a>ble_att_read_req_log</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[288]"></a>ble_att_read_blob_req_parse</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[289]"></a>ble_att_read_blob_req_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[28a]"></a>ble_att_read_blob_req_log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[28b]"></a>ble_att_read_mult_req_parse</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[28c]"></a>ble_att_read_mult_req_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[28d]"></a>ble_att_read_mult_rsp_parse</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[28e]"></a>ble_att_read_mult_rsp_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[28f]"></a>ble_att_read_group_type_req_parse</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[290]"></a>ble_att_read_group_type_req_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[291]"></a>ble_att_read_group_type_req_log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[292]"></a>ble_att_read_group_type_rsp_parse</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[293]"></a>ble_att_read_group_type_rsp_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[294]"></a>ble_att_read_group_type_rsp_log</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[295]"></a>ble_att_write_req_parse</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[296]"></a>ble_att_write_cmd_parse</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[297]"></a>ble_att_write_req_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[298]"></a>ble_att_write_cmd_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[299]"></a>ble_att_write_cmd_log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[29a]"></a>ble_att_write_req_log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[29b]"></a>ble_att_prep_write_req_parse</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[29c]"></a>ble_att_prep_write_req_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[29d]"></a>ble_att_prep_write_rsp_parse</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[29e]"></a>ble_att_prep_write_rsp_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[29f]"></a>ble_att_prep_write_cmd_log</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[2a0]"></a>ble_att_exec_write_req_parse</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[2a1]"></a>ble_att_exec_write_req_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[2a2]"></a>ble_att_exec_write_req_log</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[2a3]"></a>ble_att_exec_write_rsp_parse</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[2a4]"></a>ble_att_exec_write_rsp_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[2a5]"></a>ble_att_notify_req_parse</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[2a6]"></a>ble_att_notify_req_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[2a7]"></a>ble_att_notify_req_log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[2a8]"></a>ble_att_indicate_req_parse</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[2a9]"></a>ble_att_indicate_req_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[2aa]"></a>ble_att_indicate_req_log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[2ab]"></a>ble_att_indicate_rsp_parse</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_parse
</UL>

<P><STRONG><a name="[2ac]"></a>ble_att_indicate_rsp_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init_write
</UL>

<P><STRONG><a name="[2b1]"></a>ble_att_svr_register</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_register &rArr; ble_att_svr_entry_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_next_id
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_entry_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svc
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_chr
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_clt_cfg_dsc
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_dsc
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_inc
</UL>

<P><STRONG><a name="[41f]"></a>ble_att_svr_prev_handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_att_svr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_round
</UL>

<P><STRONG><a name="[2c0]"></a>ble_att_svr_find_by_handle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_att_svr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write_handle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc_chr_attr
</UL>

<P><STRONG><a name="[2b3]"></a>ble_att_svr_find_by_uuid</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_att_svr_find_by_uuid &rArr; ble_uuid_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_type_rsp
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>

<P><STRONG><a name="[487]"></a>ble_att_svr_ticks_until_tmo</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_att_svr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
</UL>

<P><STRONG><a name="[2bf]"></a>ble_att_svr_read_handle</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_find_by_handle
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify_custom
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_local
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_mult_rsp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_blob
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
</UL>

<P><STRONG><a name="[2c1]"></a>ble_att_svr_read_local</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_att_svr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_bare_pkt
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>

<P><STRONG><a name="[22d]"></a>ble_att_svr_tx_error_rsp</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_tx_error_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx_handle_unknown_request
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
</UL>

<P><STRONG><a name="[86]"></a>ble_att_svr_rx_mtu</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_mtu &rArr; ble_att_svr_tx_rsp &rArr; ble_att_svr_tx_error_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_mtu_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_mtu_event
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_peer_mtu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_chan_mtu
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>ble_att_svr_rx_find_info</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_find_info &rArr; ble_att_svr_tx_rsp &rArr; ble_att_svr_tx_error_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_find_info_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>ble_att_svr_rx_find_type_value</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_find_type_value &rArr; ble_att_svr_build_find_type_value_rsp &rArr; ble_att_svr_fill_type_value &rArr; ble_att_svr_read_flat &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_find_type_value_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>ble_att_svr_rx_read_type</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_read_type &rArr; ble_att_svr_build_read_type_rsp &rArr; ble_att_svr_read_flat &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_type_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>ble_att_svr_rx_read</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_read &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>ble_att_svr_rx_read_blob</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_read_blob &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>ble_att_svr_rx_read_mult</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_read_mult &rArr; ble_att_svr_build_read_mult_rsp &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_mult_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>ble_att_svr_rx_read_group_type</STRONG> (Thumb, 204 bytes, Stack size 88 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_read_group_type &rArr; ble_att_svr_build_read_group_type_rsp &rArr; ble_att_svr_service_uuid &rArr; ble_att_svr_read_flat &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_group_type_rsp
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_is_valid_read_group_type
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>ble_att_svr_rx_write</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_write &rArr; ble_att_svr_write_handle &rArr; ble_att_svr_write &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_write_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write_handle
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>ble_att_svr_rx_write_no_rsp</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_write_no_rsp &rArr; ble_att_svr_write_handle &rArr; ble_att_svr_write &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write_handle
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[2d8]"></a>ble_att_svr_write_local</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_att_svr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write_handle
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>

<P><STRONG><a name="[2db]"></a>ble_att_svr_prep_clear</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_prep_clear &rArr; ble_att_svr_prep_free &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_free
</UL>

<P><STRONG><a name="[98]"></a>ble_att_svr_rx_prep_write</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_prep_write &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_find_by_handle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_insert_prep_entry
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>ble_att_svr_rx_exec_write</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_exec_write &rArr; ble_att_svr_prep_write &rArr; ble_att_svr_write &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_clear
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_write
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>ble_att_svr_rx_notify</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_notify &rArr; ble_gap_notify_rx_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_rx_event
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>ble_att_svr_rx_indicate</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_rx_indicate &rArr; ble_att_svr_tx_rsp &rArr; ble_att_svr_tx_error_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_rx_event
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_indicate_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[2e6]"></a>ble_att_svr_hide_range</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_svr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_move_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_set_visibility
</UL>

<P><STRONG><a name="[2e8]"></a>ble_att_svr_restore_range</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_att_svr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_move_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_set_visibility
</UL>

<P><STRONG><a name="[2e9]"></a>ble_att_svr_reset</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ble_att_svr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_entry_free
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_reset
</UL>

<P><STRONG><a name="[2eb]"></a>ble_att_svr_start</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_start &rArr; malloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_free_start_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>

<P><STRONG><a name="[2ed]"></a>ble_att_svr_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_att_svr_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[2f8]"></a>ble_gap_conn_find</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_gap_conn_find &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_fill_conn_desc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_read_bond
</UL>

<P><STRONG><a name="[2f9]"></a>ble_gap_conn_find_by_addr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_fill_conn_desc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
</UL>

<P><STRONG><a name="[2fc]"></a>ble_gap_set_priv_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_mode
</UL>

<P><STRONG><a name="[2fe]"></a>ble_gap_read_le_phy</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_read_phy
</UL>

<P><STRONG><a name="[301]"></a>ble_gap_set_prefered_default_le_phy</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_default_phy
</UL>

<P><STRONG><a name="[303]"></a>ble_gap_set_prefered_le_phy</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_phy
</UL>

<P><STRONG><a name="[313]"></a>ble_gap_terminate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_terminate_next_conn
</UL>

<P><STRONG><a name="[322]"></a>ble_gap_conn_broken</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_free
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_call
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_event_cb
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_find_snapshot
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_connection_broken
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_conn_broken
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_flow_connection_broken
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_connection_broken
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_disconn_complete
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_reset
</UL>

<P><STRONG><a name="[329]"></a>ble_gap_rx_disconn_complete</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = ble_gap_rx_disconn_complete &rArr; ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_call
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
</UL>

<P><STRONG><a name="[32a]"></a>ble_gap_rx_update_complete</STRONG> (Thumb, 208 bytes, Stack size 96 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ble_gap_rx_update_complete &rArr; ble_gap_update_notify &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_to_l2cap
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_find
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_free
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_conn_upd_complete
</UL>

<P><STRONG><a name="[337]"></a>ble_gap_master_in_progress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
</UL>

<P><STRONG><a name="[332]"></a>ble_gap_rx_adv_report</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_gap_rx_adv_report &rArr; ble_gap_disc_report &rArr; ble_gap_master_extract_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report_sanity_check
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_report
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_dir_adv_rpt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_adv_rpt
</UL>

<P><STRONG><a name="[335]"></a>ble_gap_adv_active</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_adv_active
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_active_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop_no_lock
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_mutable
</UL>

<P><STRONG><a name="[336]"></a>ble_gap_rx_conn_complete</STRONG> (Thumb, 478 bytes, Stack size 80 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ble_gap_rx_conn_complete &rArr; ble_gap_master_failed &rArr; ble_gap_master_connect_failure &rArr; ble_gap_master_extract_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_active
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_in_progress
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rd_rem_sup_feat_tx
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_accept_slave_conn
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_accept_master_conn
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_failed
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_call
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_connect_cancelled
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_finished
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_reset_state
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_reset_state
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_insert
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_flags
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_conn_complete
</UL>

<P><STRONG><a name="[33d]"></a>ble_gap_rx_rd_rem_sup_feat_complete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_gap_rx_rd_rem_sup_feat_complete &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_rd_rem_used_feat_complete
</UL>

<P><STRONG><a name="[33f]"></a>ble_gap_rx_l2cap_update_req</STRONG> (Thumb, 44 bytes, Stack size 72 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_gap_rx_l2cap_update_req &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
</UL>

<P><STRONG><a name="[340]"></a>ble_gap_rx_phy_update_complete</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gap_rx_phy_update_complete &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_call
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_phy_update_complete
</UL>

<P><STRONG><a name="[349]"></a>ble_gap_set_event_cb</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>

<P><STRONG><a name="[34a]"></a>ble_gap_timer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ble_gap_timer &rArr; ble_gap_update_timer &rArr; ble_gap_update_notify &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_timer
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_timer
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
</UL>

<P><STRONG><a name="[34e]"></a>ble_gap_wl_set</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_tx_clear
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_tx_add
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_busy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_wl
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>

<P><STRONG><a name="[351]"></a>ble_gap_adv_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop_no_lock
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>

<P><STRONG><a name="[206]"></a>ble_gap_adv_start</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ble_gap_adv_start &rArr; ble_gap_adv_params_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_validate
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_params_tx
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_enable_tx
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_set_timer
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_reset_state
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_is_preempted
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_adv
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_enabled
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_use_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
</UL>

<P><STRONG><a name="[35c]"></a>ble_gap_adv_set_data</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_gap_adv_set_data &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_adv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_fields
</UL>

<P><STRONG><a name="[35e]"></a>ble_gap_adv_rsp_set_data</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_scan_rsp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_rsp_set_fields
</UL>

<P><STRONG><a name="[205]"></a>ble_gap_adv_set_fields</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ble_gap_adv_set_fields &rArr; ble_hs_adv_set_fields &rArr; adv_set_fields &rArr; ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_data
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_fields
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
</UL>

<P><STRONG><a name="[361]"></a>ble_gap_adv_rsp_set_fields</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_rsp_set_data
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_fields
</UL>

<P><STRONG><a name="[366]"></a>ble_gap_disc_active</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_ext_validate
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel_no_lock
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_mutable
</UL>

<P><STRONG><a name="[367]"></a>ble_gap_disc_cancel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel_no_lock
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>

<P><STRONG><a name="[369]"></a>ble_gap_conn_active</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cancel_no_lock
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_ext_validate
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_mutable
</UL>

<P><STRONG><a name="[802]"></a>ble_gap_ext_disc</STRONG> (Thumb, 22 bytes, Stack size 28 bytes, ble_gap.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>ble_gap_disc</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_validate
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_fill_dflts
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_tx_params
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_enable_tx
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_set_timer
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_reset_state
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_disc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_use_addr
</UL>

<P><STRONG><a name="[36f]"></a>ble_gap_connect</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_active
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_active
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_create_tx
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_set_timer
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_reset_state
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_is_preempted
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_conn
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_enabled
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_use_addr
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_can_alloc
</UL>

<P><STRONG><a name="[371]"></a>ble_gap_conn_cancel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cancel_no_lock
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>

<P><STRONG><a name="[377]"></a>ble_gap_rx_param_req</STRONG> (Thumb, 136 bytes, Stack size 96 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ble_gap_rx_param_req &rArr; ble_gap_update_failed &rArr; ble_gap_update_notify &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_tx_param_neg_reply
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_tx_param_pos_reply
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_failed
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_conn_parm_req
</UL>

<P><STRONG><a name="[37a]"></a>ble_gap_update_params</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ble_gap_update_params &rArr; ble_l2cap_sig_update &rArr; ble_l2cap_sig_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_validate_conn_params
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_tx
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_alloc
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_to_l2cap
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_find
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_free
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_update
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
</UL>

<P><STRONG><a name="[37c]"></a>ble_gap_security_initiate</STRONG> (Thumb, 172 bytes, Stack size 176 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_peer_sec
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_slave_initiate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[380]"></a>ble_gap_pair_initiate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
</UL>

<P><STRONG><a name="[381]"></a>ble_gap_encryption_initiate</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_flags
</UL>

<P><STRONG><a name="[382]"></a>ble_gap_unpair</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_peer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_remove_entry
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair_oldest_peer
</UL>

<P><STRONG><a name="[385]"></a>ble_gap_unpair_oldest_peer</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_bonded_peers
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_status_rr
</UL>

<P><STRONG><a name="[387]"></a>ble_gap_passkey_event</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gap_passkey_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[388]"></a>ble_gap_enc_event</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_call
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_timer
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[38b]"></a>ble_gap_identity_event</STRONG> (Thumb, 40 bytes, Stack size 64 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gap_identity_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_persist_keys
</UL>

<P><STRONG><a name="[38c]"></a>ble_gap_repeat_pairing_event</STRONG> (Thumb, 46 bytes, Stack size 64 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gap_repeat_pairing_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_chk_repeat_pairing
</UL>

<P><STRONG><a name="[38d]"></a>ble_gap_conn_rssi</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_read_rssi
</UL>

<P><STRONG><a name="[2e4]"></a>ble_gap_notify_rx_event</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_gap_notify_rx_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_call
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_notify
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
</UL>

<P><STRONG><a name="[38f]"></a>ble_gap_notify_tx_event</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_gap_notify_tx_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify_custom
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_rx_rsp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_tmo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_err
</UL>

<P><STRONG><a name="[390]"></a>ble_gap_subscribe_event</STRONG> (Thumb, 254 bytes, Stack size 88 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_gap_subscribe_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_call
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_subscribe_event
</UL>

<P><STRONG><a name="[23d]"></a>ble_gap_mtu_event</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_gap_mtu_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_call
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
</UL>

<P><STRONG><a name="[391]"></a>ble_gap_preempt_no_lock</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_gap_preempt_no_lock &rArr; ble_gap_disc_cancel_no_lock &rArr; ble_gap_disc_disable_tx &rArr; ble_gap_disc_enable_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cancel_no_lock
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel_no_lock
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop_no_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt
</UL>

<P><STRONG><a name="[392]"></a>ble_gap_preempt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_gap_preempt &rArr; ble_gap_preempt_no_lock &rArr; ble_gap_disc_cancel_no_lock &rArr; ble_gap_disc_disable_tx &rArr; ble_gap_disc_enable_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt_no_lock
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_is_preempted
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop
</UL>

<P><STRONG><a name="[393]"></a>ble_gap_preempt_done</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_gap_preempt_done &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_release
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_pend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_event_cb
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop
</UL>

<P><STRONG><a name="[52d]"></a>ble_gap_event_listener_register</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop
</UL>

<P><STRONG><a name="[527]"></a>ble_gap_event_listener_unregister</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_event_listener_unregister
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_done
</UL>

<P><STRONG><a name="[394]"></a>ble_gap_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_gap_init &rArr; npl_tencentos_tiny_mutex_init &rArr; tos_mutex_create &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[3bf]"></a>ble_gattc_timer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_gattc_timer &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_timeout
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_ticks_until_resume
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_resume_procs
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_expired
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
</UL>

<P><STRONG><a name="[3c3]"></a>ble_gattc_exchange_mtu</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>

<P><STRONG><a name="[3c9]"></a>ble_gattc_disc_all_svcs</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>

<P><STRONG><a name="[3ce]"></a>ble_gattc_disc_svc_by_uuid</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_any
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_svc_uuid
</UL>

<P><STRONG><a name="[3d2]"></a>ble_gattc_find_inc_svcs</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_find_inc_svcs
</UL>

<P><STRONG><a name="[3d5]"></a>ble_gattc_disc_all_chrs</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_all_chrs
</UL>

<P><STRONG><a name="[3d8]"></a>ble_gattc_disc_chrs_by_uuid</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_any
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_chr_uuid
</UL>

<P><STRONG><a name="[3dd]"></a>ble_gattc_disc_all_dscs</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_all_dscs
</UL>

<P><STRONG><a name="[3e0]"></a>ble_gattc_read</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read
</UL>

<P><STRONG><a name="[3e3]"></a>ble_gattc_read_by_uuid</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_any
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read_uuid
</UL>

<P><STRONG><a name="[3e6]"></a>ble_gattc_read_long</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read_long
</UL>

<P><STRONG><a name="[3e9]"></a>ble_gattc_read_mult</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read_mult
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3ea]"></a>ble_gattc_write_no_rsp</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_cmd
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_no_rsp_flat
</UL>

<P><STRONG><a name="[3eb]"></a>ble_gattc_write_no_rsp_flat</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_no_rsp
</UL>

<P><STRONG><a name="[3ed]"></a>ble_gattc_write</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_req
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_flat
</UL>

<P><STRONG><a name="[3ee]"></a>ble_gattc_write_flat</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write
</UL>

<P><STRONG><a name="[3f3]"></a>ble_gattc_write_long</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_write_long
</UL>

<P><STRONG><a name="[3f6]"></a>ble_gattc_write_reliable</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_write_reliable
</UL>

<P><STRONG><a name="[208]"></a>ble_gattc_notify_custom</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = ble_gattc_notify_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_notify
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify
</UL>

<P><STRONG><a name="[3f7]"></a>ble_gattc_notify</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ble_gattc_notify &rArr; ble_gattc_notify_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications_one_chr
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
</UL>

<P><STRONG><a name="[3fb]"></a>ble_gatts_indicate_fail_notconn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_gatts_indicate_fail_notconn &rArr; ble_gattc_fail_procs &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_fail_procs
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
</UL>

<P><STRONG><a name="[3fc]"></a>ble_gattc_indicate_custom</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_indicate
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_indicate
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate
</UL>

<P><STRONG><a name="[3fd]"></a>ble_gattc_indicate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications_one_chr
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
</UL>

<P><STRONG><a name="[238]"></a>ble_gattc_rx_err</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_err &rArr; ble_gattc_extract_first_by_conn_op &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_err_dispatch_get
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_error
</UL>

<P><STRONG><a name="[23e]"></a>ble_gattc_rx_mtu</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_mtu &rArr; ble_gattc_extract_first_by_conn_op &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_cb
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
</UL>

<P><STRONG><a name="[243]"></a>ble_gattc_rx_find_info_idata</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_find_info_idata &rArr; ble_gattc_extract_first_by_conn_op &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_rx_idata
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_info
</UL>

<P><STRONG><a name="[244]"></a>ble_gattc_rx_find_info_complete</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_find_info_complete &rArr; ble_gattc_disc_all_dscs_rx_complete &rArr; ble_gattc_disc_all_dscs_resume &rArr; ble_gattc_disc_all_dscs_tx &rArr; ble_att_clt_tx_find_info &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_rx_complete
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_info
</UL>

<P><STRONG><a name="[247]"></a>ble_gattc_rx_find_type_value_hinfo</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_find_type_value_hinfo &rArr; ble_gattc_extract_first_by_conn_op &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_rx_hinfo
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_type_value
</UL>

<P><STRONG><a name="[248]"></a>ble_gattc_rx_find_type_value_complete</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_find_type_value_complete &rArr; ble_gattc_disc_svc_uuid_rx_complete &rArr; ble_gattc_disc_svc_uuid_resume &rArr; ble_gattc_disc_svc_uuid_tx &rArr; ble_att_clt_tx_find_type_value &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_rx_complete
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_type_value
</UL>

<P><STRONG><a name="[24c]"></a>ble_gattc_rx_read_type_adata</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_read_type_adata &rArr; ble_gattc_extract_with_rx_entry &rArr; ble_gattc_extract_one &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_with_rx_entry
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_type
</UL>

<P><STRONG><a name="[24d]"></a>ble_gattc_rx_read_type_complete</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_read_type_complete &rArr; ble_gattc_extract_with_rx_entry &rArr; ble_gattc_extract_one &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_with_rx_entry
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_type
</UL>

<P><STRONG><a name="[256]"></a>ble_gattc_rx_read_group_type_adata</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_read_group_type_adata &rArr; ble_gattc_extract_first_by_conn_op &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_rx_adata
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_group_type
</UL>

<P><STRONG><a name="[257]"></a>ble_gattc_rx_read_group_type_complete</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_read_group_type_complete &rArr; ble_gattc_disc_all_svcs_rx_complete &rArr; ble_gattc_disc_all_svcs_resume &rArr; ble_gattc_disc_all_svcs_tx &rArr; ble_att_clt_tx_read_group_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_rx_complete
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_group_type
</UL>

<P><STRONG><a name="[24f]"></a>ble_gattc_rx_read_rsp</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_read_rsp &rArr; ble_gattc_extract_with_rx_entry &rArr; ble_gattc_extract_one &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_with_rx_entry
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read
</UL>

<P><STRONG><a name="[251]"></a>ble_gattc_rx_read_blob_rsp</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_read_blob_rsp &rArr; ble_gattc_read_long_rx_read_rsp &rArr; ble_gattc_read_long_resume &rArr; ble_gattc_read_long_tx &rArr; ble_att_clt_tx_read_blob &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_rx_read_rsp
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_blob
</UL>

<P><STRONG><a name="[253]"></a>ble_gattc_rx_read_mult_rsp</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_read_mult_rsp &rArr; ble_gattc_extract_first_by_conn_op &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult_cb
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_mult
</UL>

<P><STRONG><a name="[25d]"></a>ble_gattc_rx_write_rsp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_write_rsp &rArr; ble_gattc_extract_first_by_conn_op &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_cb
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_write
</UL>

<P><STRONG><a name="[25f]"></a>ble_gattc_rx_prep_write_rsp</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_prep_write_rsp &rArr; ble_gattc_extract_with_rx_entry &rArr; ble_gattc_extract_one &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_with_rx_entry
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_prep_write
</UL>

<P><STRONG><a name="[261]"></a>ble_gattc_rx_exec_write_rsp</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_exec_write_rsp &rArr; ble_gattc_extract_with_rx_entry &rArr; ble_gattc_extract_one &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_with_rx_entry
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_exec_write
</UL>

<P><STRONG><a name="[264]"></a>ble_gattc_rx_indicate_rsp</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = ble_gattc_rx_indicate_rsp &rArr; ble_gattc_indicate_rx_rsp &rArr; ble_gatts_send_next_indicate &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_rx_rsp
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_indicate
</UL>

<P><STRONG><a name="[326]"></a>ble_gattc_connection_broken</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_gattc_connection_broken &rArr; ble_gattc_fail_procs &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_fail_procs
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[803]"></a>ble_gattc_any_jobs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gattc.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>ble_gattc_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[412]"></a>ble_gatts_clt_cfg_access</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ble_gatts_clt_cfg_access &rArr; ble_gatts_subscribe_event &rArr; ble_gap_subscribe_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value_cccd
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete_cccd
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access_locked
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_subscribe_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(.text)
</UL>
<P><STRONG><a name="[420]"></a>ble_gatts_register_svcs</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ble_gatts_register_svcs &rArr; ble_gatts_register_round &rArr; ble_gatts_register_svc &rArr; ble_gatts_register_chr &rArr; ble_gatts_register_dsc &rArr; ble_att_svr_register &rArr; ble_att_svr_entry_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_round
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>

<P><STRONG><a name="[325]"></a>ble_gatts_connection_broken</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ble_gatts_connection_broken &rArr; ble_gatts_subscribe_event &rArr; ble_gap_subscribe_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_subscribe_event
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_fail_notconn
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[423]"></a>ble_gatts_start</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ble_gatts_start &rArr; ble_gatts_register_svcs &rArr; ble_gatts_register_round &rArr; ble_gatts_register_svc &rArr; ble_gatts_register_chr &rArr; ble_gatts_register_dsc &rArr; ble_att_svr_register &rArr; ble_att_svr_entry_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_start
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_find_by_uuid
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svcs
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_free_mem
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_free_svc_defs
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_size
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_mutable
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_clt_cfg_allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
</UL>

<P><STRONG><a name="[47e]"></a>ble_gatts_conn_can_alloc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_can_alloc
</UL>

<P><STRONG><a name="[425]"></a>ble_gatts_conn_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ble_gatts_conn_init &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_size
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
</UL>

<P><STRONG><a name="[3f9]"></a>ble_gatts_send_next_indicate</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = ble_gatts_send_next_indicate &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_rx_rsp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_err
</UL>

<P><STRONG><a name="[3f8]"></a>ble_gatts_rx_indicate_ack</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_gatts_rx_indicate_ack &rArr; ble_store_write_cccd &rArr; ble_store_write &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_find_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_rx_rsp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_err
</UL>

<P><STRONG><a name="[426]"></a>ble_gatts_chr_updated</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, ble_gatts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_idx
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_cccd
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_notifications_sched
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_find_idx
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
</UL>

<P><STRONG><a name="[42b]"></a>ble_gatts_tx_notifications</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = ble_gatts_tx_notifications &rArr; ble_gatts_tx_notifications_one_chr &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications_one_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_tx_notify
</UL>

<P><STRONG><a name="[38a]"></a>ble_gatts_bonding_established</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ble_gatts_bonding_established &rArr; ble_store_write_cccd &rArr; ble_store_write &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
</UL>

<P><STRONG><a name="[389]"></a>ble_gatts_bonding_restored</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_cccd
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_schedule_update
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_subscribe_event
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_find
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
</UL>

<P><STRONG><a name="[42e]"></a>ble_gatts_find_svc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_gatts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc_entry
</UL>

<P><STRONG><a name="[42f]"></a>ble_gatts_find_chr</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gatts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc_chr_attr
</UL>

<P><STRONG><a name="[430]"></a>ble_gatts_find_dsc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gatts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc_chr_attr
</UL>

<P><STRONG><a name="[1fd]"></a>ble_gatts_add_svcs</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_gatts_add_svcs &rArr; realloc &rArr; tos_mmheap_realloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_mutable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_init
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_init
</UL>

<P><STRONG><a name="[431]"></a>ble_gatts_svc_set_visibility</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ble_gatts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_restore_range
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_hide_range
</UL>

<P><STRONG><a name="[1fc]"></a>ble_gatts_count_cfg</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_gatts_count_cfg &rArr; ble_gatts_count_resources
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_count_resources
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_init
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_init
</UL>

<P><STRONG><a name="[804]"></a>ble_gatts_lcl_svc_foreach</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_gatts.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>ble_gatts_reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_gatts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_reset
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_mutable
</UL>

<P><STRONG><a name="[462]"></a>ble_gatts_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[44e]"></a>ble_hs_evq_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_start_stage2
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop
</UL>

<P><STRONG><a name="[466]"></a>ble_hs_evq_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[434]"></a>ble_hs_is_parent_task</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hs_is_parent_task
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send_buf
</UL>

<P><STRONG><a name="[435]"></a>ble_hs_lock_nested</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>

<P><STRONG><a name="[436]"></a>ble_hs_unlock_nested</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ble_hs_unlock_nested &rArr; npl_tencentos_tiny_mutex_release &rArr; tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
</UL>

<P><STRONG><a name="[22a]"></a>ble_hs_lock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock_nested
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_infer_auto
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_security_initiate
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cancel
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_rsp_set_data
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_set
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_event_cb
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_rd_rem_sup_feat_complete
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_prefered_le_phy
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_read_le_phy
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find_by_addr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_timer
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_l2cap_cb
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_failed
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_extract_cb
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_extract_state
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_extract_conn_cb
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_find_snapshot
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_mtu_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_get_sec_state
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_preferred_mtu
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_set_flags
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_insert
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_first_conn_handle
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_reset
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_updated
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications_one_chr
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_tx
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_insert
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_slave_initiate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_flags
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_copy_addr
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_rnd
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_pub
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_rx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_master_id_rx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_extract_expired
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_persist_keys
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_extract_expired
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_extract
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_insert
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_done
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_periodic_sync_first
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read
</UL>

<P><STRONG><a name="[22b]"></a>ble_hs_unlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ble_hs_unlock &rArr; ble_hs_unlock_nested &rArr; npl_tencentos_tiny_mutex_release &rArr; tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock_nested
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_infer_auto
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_security_initiate
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cancel
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_rsp_set_data
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_set
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_event_cb
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_rd_rem_sup_feat_complete
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_prefered_le_phy
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_read_le_phy
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find_by_addr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_timer
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_l2cap_cb
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_failed
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_extract_cb
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_extract_state
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_extract_conn_cb
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_find_snapshot
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_mtu_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_get_sec_state
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_preferred_mtu
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_set_flags
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_insert
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_first_conn_handle
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_reset
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_updated
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications_one_chr
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_tx
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_insert
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_slave_initiate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_flags
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_copy_addr
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_rnd
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_pub
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_rx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_master_id_rx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_extract_expired
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_persist_keys
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_extract_expired
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_extract
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_insert
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_done
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_periodic_sync_first
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read
</UL>

<P><STRONG><a name="[437]"></a>ble_hs_process_rx_data_queue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ble_hs_process_rx_data_queue &rArr; ble_hs_hci_evt_acl_process &rArr; ble_l2cap_sig_reject_invalid_cid_tx &rArr; ble_l2cap_sig_reject_tx &rArr; ble_l2cap_sig_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_get
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_rx_data
</UL>

<P><STRONG><a name="[43c]"></a>ble_hs_wakeup_tx</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ble_hs_wakeup_tx &rArr; ble_hs_wakeup_tx_conn &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx_conn
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_first
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
</UL>

<P><STRONG><a name="[359]"></a>ble_hs_is_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_hs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_ext_validate
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_reset
</UL>

<P><STRONG><a name="[805]"></a>ble_hs_synced</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_hs.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>ble_hs_timer_resched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_hs_timer_resched &rArr; ble_hs_timer_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_set_timer
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_set_timer
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_reset_state
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_reset_state
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_insert_prep_entry
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_set_timer
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_set_timer
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx_payload
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_begin
</UL>

<P><STRONG><a name="[450]"></a>ble_hs_sched_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_hs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
</UL>

<P><STRONG><a name="[452]"></a>ble_hs_start</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ble_hs_start &rArr; ble_hs_sync &rArr; ble_hs_startup_go &rArr; ble_hs_pvcy_set_our_irk &rArr; ble_hs_pvcy_add_entry &rArr; ble_hs_pvcy_add_entry_hci &rArr; ble_hs_pvcy_set_mode &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sync
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_start_stage2
</UL>

<P><STRONG><a name="[453]"></a>ble_hs_enqueue_hci_event</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_enqueue_hci_event &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_free
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_init
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_evt
</UL>

<P><STRONG><a name="[427]"></a>ble_hs_notifications_sched</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_hs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_updated
</UL>

<P><STRONG><a name="[456]"></a>ble_hs_sched_reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hw_error
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_add_avail_pkts
</UL>

<P><STRONG><a name="[457]"></a>ble_hs_hw_error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_hw_error &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_hw_error
</UL>

<P><STRONG><a name="[45a]"></a>ble_hs_tx_data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_hs_tx_data &rArr; ble_hci_trans_hs_acl_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_hs_acl_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
</UL>

<P><STRONG><a name="[45c]"></a>ble_hs_init</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_init &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_init
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_init
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_periodic_sync_init
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_init
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_init
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_cfg_hs
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_evq_set
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_init
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[469]"></a>ble_hs_adv_set_flat</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, ble_hs_adv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_flat_mbuf
</UL>

<P><STRONG><a name="[360]"></a>ble_hs_adv_set_fields</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ble_hs_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_hs_adv_set_fields &rArr; adv_set_fields &rArr; ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_fields
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_rsp_set_fields
</UL>

<P><STRONG><a name="[472]"></a>ble_hs_adv_set_fields_mbuf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_hs_adv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[477]"></a>ble_hs_adv_parse_fields</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ble_hs_adv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_one_field
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[478]"></a>ble_hs_adv_parse</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ble_hs_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_hs_adv_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_find_field
</UL>

<P><STRONG><a name="[331]"></a>ble_hs_adv_find_field</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ble_hs_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_hs_adv_find_field &rArr; ble_hs_adv_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report_sanity_check
</UL>

<P><STRONG><a name="[328]"></a>ble_hs_atomic_conn_delete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_hs_atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_hs_atomic_conn_delete &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_remove
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[47b]"></a>ble_hs_atomic_conn_insert</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_insert
</UL>

<P><STRONG><a name="[338]"></a>ble_hs_atomic_conn_flags</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_hs_atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_hs_atomic_conn_flags &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_encryption_initiate
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
</UL>

<P><STRONG><a name="[47c]"></a>ble_hs_atomic_conn_set_flags</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_hs_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>

<P><STRONG><a name="[448]"></a>ble_hs_atomic_first_conn_handle</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_hs_atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_hs_atomic_first_conn_handle &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_first
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_reset
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_terminate_next_conn
</UL>

<P><STRONG><a name="[357]"></a>ble_hs_conn_can_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_hs_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hs_conn_can_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_conn_can_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_validate
</UL>

<P><STRONG><a name="[233]"></a>ble_hs_conn_chan_find_by_scid</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ble_hs_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_preferred_mtu
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
</UL>

<P><STRONG><a name="[806]"></a>ble_hs_conn_chan_find_by_dcid</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ble_hs_conn.o(.text), UNUSED)

<P><STRONG><a name="[481]"></a>ble_hs_conn_chan_insert</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, ble_hs_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_hs_conn_chan_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
</UL>

<P><STRONG><a name="[47f]"></a>ble_hs_conn_delete_chan</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_hs_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ble_hs_conn_delete_chan &rArr; ble_l2cap_chan_free &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_free
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_free
</UL>

<P><STRONG><a name="[47a]"></a>ble_hs_conn_free</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_hs_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ble_hs_conn_free &rArr; ble_hs_conn_delete_chan &rArr; ble_l2cap_chan_free &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_clear
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_delete_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
</UL>

<P><STRONG><a name="[33a]"></a>ble_hs_conn_alloc</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ble_hs_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_conn_alloc &rArr; ble_hs_conn_free &rArr; ble_hs_conn_delete_chan &rArr; ble_l2cap_chan_free &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_create_chan
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_free
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_conn_init
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_create_chan
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_create_chan
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_chan_insert
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
</UL>

<P><STRONG><a name="[2b9]"></a>ble_hs_conn_find</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_hs_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_security_initiate
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_event_cb
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_rd_rem_sup_feat_complete
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_prefered_le_phy
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_read_le_phy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_extract_conn_cb
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_find_snapshot
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_set_flags
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_insert
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_flags
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_exists
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_persist_keys
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_update_sec_state
</UL>

<P><STRONG><a name="[33c]"></a>ble_hs_conn_insert</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ble_hs_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ble_hs_conn_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_insert
</UL>

<P><STRONG><a name="[479]"></a>ble_hs_conn_remove</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ble_hs_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
</UL>

<P><STRONG><a name="[2b7]"></a>ble_hs_conn_find_assert</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_hs_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hs_conn_find_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_insert_prep_entry
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_get_sec_state
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ia_ra
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[2fa]"></a>ble_hs_conn_find_by_addr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_hs_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_addr_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find_by_addr
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_updated
</UL>

<P><STRONG><a name="[234]"></a>ble_hs_conn_find_by_idx</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_hs_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_preferred_mtu
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_updated
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications_one_chr
</UL>

<P><STRONG><a name="[484]"></a>ble_hs_conn_exists</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ble_hs_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ble_hs_conn_exists
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_exec
</UL>

<P><STRONG><a name="[401]"></a>ble_hs_conn_first</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_first_conn_handle
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_mutable
</UL>

<P><STRONG><a name="[2ba]"></a>ble_hs_conn_addrs</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, ble_hs_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_hs_conn_addrs &rArr; ble_hs_id_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_addr_type_to_id
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_security_initiate
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_fill_conn_desc
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ia_ra
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
</UL>

<P><STRONG><a name="[44c]"></a>ble_hs_conn_timer</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ble_hs_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ble_hs_conn_timer &rArr;  ble_hs_conn_timer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_ticks_until_tmo
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
</UL>

<P><STRONG><a name="[45e]"></a>ble_hs_conn_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_hs_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_hs_conn_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[49a]"></a>ble_hs_dbg_event_disp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_dbg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_process
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_process_ack
</UL>

<P><STRONG><a name="[807]"></a>ble_hs_dbg_set_sync_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_dbg.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>ble_hs_flow_connection_broken</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_flow.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[458]"></a>ble_hs_flow_fill_acl_usrhdr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_flow.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_rx_data
</UL>

<P><STRONG><a name="[525]"></a>ble_hs_flow_startup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_flow.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[51f]"></a>ble_hs_hci_set_buf_sz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_hs_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_buf_sz
</UL>

<P><STRONG><a name="[496]"></a>ble_hs_hci_add_avail_pkts</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_add_avail_pkts &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
</UL>

<P><STRONG><a name="[300]"></a>ble_hs_hci_cmd_tx</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_free
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_reset
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send_buf
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_wait_for_ack
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_process_ack
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_unlock
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_prefered_le_phy
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_prefered_default_le_phy
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_read_le_phy
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_read_adv_tx_pwr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_mode
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_remove_entry
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_read_rssi
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_read_chan_map
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_set_data_len
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_neg_reply_tx
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_reply_tx
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_bd_addr
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_buf_sz_tx
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_le_read_buf_sz_tx
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_le_read_sup_f_tx
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_local_ver_tx
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry_hci
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_clear_entries
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_resolve_enabled
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_addr_timeout
</UL>

<P><STRONG><a name="[315]"></a>ble_hs_hci_cmd_tx_empty_ack</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_rsp_set_data
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_data
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_tx
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_tx_param_neg_reply
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_tx_param_pos_reply
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_create_tx
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_tx_params
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_params_tx
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_tx_clear
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_tx_add
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_enable_tx
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cancel_tx
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_enable_tx
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rd_rem_sup_feat_tx
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_set_chan_class
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_set_random_addr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_host_buf_size
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_set_ctlr_to_host_fc
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_start_encrypt_tx
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_reset_tx
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_set_evmask_tx
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_le_set_evmask_tx
</UL>

<P><STRONG><a name="[49d]"></a>ble_hs_hci_rx_ack</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_rx_ack &rArr; npl_tencentos_tiny_sem_release &rArr; tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_sem_get_count
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_sem_release
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_evt
</UL>

<P><STRONG><a name="[53]"></a>ble_hs_hci_rx_evt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_rx_evt &rArr; ble_hs_enqueue_hci_event &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_enqueue_hci_event
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(.text)
</UL>
<P><STRONG><a name="[808]"></a>ble_hs_hci_frag_num_mbufs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci.o(.text), UNUSED)

<P><STRONG><a name="[809]"></a>ble_hs_hci_frag_num_mbufs_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci.o(.text), UNUSED)

<P><STRONG><a name="[43b]"></a>ble_hs_hci_acl_tx_now</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_tx_data
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_split_frag
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_mbuf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_hdr_prepend
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_max_acl_payload_sz
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx_conn
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx
</UL>

<P><STRONG><a name="[4a6]"></a>ble_hs_hci_acl_tx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
</UL>

<P><STRONG><a name="[51b]"></a>ble_hs_hci_set_le_supported_feat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_le_read_sup_f_tx
</UL>

<P><STRONG><a name="[80a]"></a>ble_hs_hci_get_le_supported_feat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci.o(.text), UNUSED)

<P><STRONG><a name="[519]"></a>ble_hs_hci_set_hci_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_local_ver_tx
</UL>

<P><STRONG><a name="[522]"></a>ble_hs_hci_get_hci_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_set_evmask_tx
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_le_set_evmask_tx
</UL>

<P><STRONG><a name="[45d]"></a>ble_hs_hci_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_hs_hci_init &rArr; npl_tencentos_tiny_sem_init &rArr; tos_sem_create &rArr; tos_sem_create_max &rArr; pend_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_sem_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_init
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init_mbuf_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[4aa]"></a>ble_hs_hci_cmd_write_hdr</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>

<P><STRONG><a name="[49c]"></a>ble_hs_hci_cmd_send_buf</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_cmd_send_buf &rArr; ble_hs_hci_cmd_send &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_parent_task
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>

<P><STRONG><a name="[355]"></a>ble_hs_hci_cmd_build_le_set_adv_params</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_hci_cmd_build_le_set_adv_params &rArr; ble_hs_hci_cmd_body_le_set_adv_params
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_adv_params
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_params_tx
</UL>

<P><STRONG><a name="[35d]"></a>ble_hs_hci_cmd_build_le_set_adv_data</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_hs_hci_cmd_build_le_set_adv_data &rArr; ble_hs_hci_cmd_body_le_set_adv_data
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_adv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_data
</UL>

<P><STRONG><a name="[35f]"></a>ble_hs_hci_cmd_build_le_set_scan_rsp_data</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_scan_rsp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_rsp_set_data
</UL>

<P><STRONG><a name="[4b5]"></a>ble_hs_hci_cmd_build_set_event_mask</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ble_hs_hci_cmd_build_set_event_mask &rArr; ble_hs_hci_cmd_body_set_event_mask &rArr; put_le64
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_set_event_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_set_evmask_tx
</UL>

<P><STRONG><a name="[4b6]"></a>ble_hs_hci_cmd_build_set_event_mask2</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ble_hs_hci_cmd_build_set_event_mask2 &rArr; ble_hs_hci_cmd_body_set_event_mask &rArr; put_le64
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_set_event_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_set_evmask_tx
</UL>

<P><STRONG><a name="[314]"></a>ble_hs_hci_cmd_build_disconnect</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_hs_hci_cmd_build_disconnect &rArr; ble_hs_hci_cmd_body_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
</UL>

<P><STRONG><a name="[4b9]"></a>ble_hs_hci_cmd_build_le_set_event_mask</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ble_hs_hci_cmd_build_le_set_event_mask &rArr; ble_hs_hci_cmd_body_le_set_event_mask &rArr; put_le64
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_event_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_le_set_evmask_tx
</UL>

<P><STRONG><a name="[346]"></a>ble_hs_hci_cmd_build_le_set_adv_enable</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_build_le_set_adv_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_adv_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_enable_tx
</UL>

<P><STRONG><a name="[363]"></a>ble_hs_hci_cmd_build_le_set_scan_params</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_scan_params
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_tx_params
</UL>

<P><STRONG><a name="[342]"></a>ble_hs_hci_cmd_build_le_set_scan_enable</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_hs_hci_cmd_build_le_set_scan_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_scan_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_enable_tx
</UL>

<P><STRONG><a name="[36e]"></a>ble_hs_hci_cmd_build_le_create_connection</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_create_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_create_tx
</UL>

<P><STRONG><a name="[34c]"></a>ble_hs_hci_cmd_build_le_add_to_whitelist</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_whitelist_chg
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_tx_add
</UL>

<P><STRONG><a name="[4bf]"></a>ble_hs_hci_cmd_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send
</UL>

<P><STRONG><a name="[4c0]"></a>ble_hs_hci_cmd_tx_set_ctlr_to_host_fc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
</UL>

<P><STRONG><a name="[4c1]"></a>ble_hs_hci_cmd_tx_host_buf_size</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
</UL>

<P><STRONG><a name="[4c2]"></a>ble_hs_hci_cmd_build_host_num_comp_pkts_entry</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>

<P><STRONG><a name="[4c3]"></a>ble_hs_hci_cmd_read_adv_pwr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send
</UL>

<P><STRONG><a name="[4c4]"></a>ble_hs_hci_cmd_le_create_conn_cancel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send
</UL>

<P><STRONG><a name="[379]"></a>ble_hs_hci_cmd_build_le_conn_update</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_hci_cmd_build_le_conn_update &rArr; ble_hs_hci_cmd_body_le_conn_update
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_conn_update
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_tx
</UL>

<P><STRONG><a name="[4c6]"></a>ble_hs_hci_cmd_le_conn_update</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_conn_update
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_le_send
</UL>

<P><STRONG><a name="[4c8]"></a>ble_hs_hci_cmd_build_le_lt_key_req_reply</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_hci_cmd_build_le_lt_key_req_reply &rArr; ble_hs_hci_cmd_body_le_lt_key_req_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_lt_key_req_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_reply_tx
</UL>

<P><STRONG><a name="[4c9]"></a>ble_hs_hci_cmd_build_le_lt_key_req_neg_reply</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_build_le_lt_key_req_neg_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_neg_reply_tx
</UL>

<P><STRONG><a name="[374]"></a>ble_hs_hci_cmd_build_le_conn_param_reply</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_hci_cmd_build_le_conn_param_reply &rArr; ble_hs_hci_cmd_body_le_conn_param_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_conn_param_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_tx_param_pos_reply
</UL>

<P><STRONG><a name="[4cb]"></a>ble_hs_hci_cmd_le_conn_param_reply</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_le_send
</UL>

<P><STRONG><a name="[376]"></a>ble_hs_hci_cmd_build_le_conn_param_neg_reply</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_hci_cmd_build_le_conn_param_neg_reply &rArr; ble_hs_hci_cmd_body_le_conn_param_neg_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_conn_param_neg_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_tx_param_neg_reply
</UL>

<P><STRONG><a name="[4cd]"></a>ble_hs_hci_cmd_le_conn_param_neg_reply</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_conn_param_neg_reply
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_le_send
</UL>

<P><STRONG><a name="[4cf]"></a>ble_hs_hci_cmd_build_le_start_encrypt</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ble_hs_hci_cmd_build_le_start_encrypt &rArr; ble_hs_hci_cmd_body_le_start_encrypt &rArr; put_le64
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_start_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_start_encrypt_tx
</UL>

<P><STRONG><a name="[4d1]"></a>ble_hs_hci_cmd_build_read_rssi</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_read_rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_read_rssi
</UL>

<P><STRONG><a name="[4fe]"></a>ble_hs_hci_cmd_build_le_set_host_chan_class</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_set_chan_class
</UL>

<P><STRONG><a name="[4d2]"></a>ble_hs_hci_cmd_build_le_read_chan_map</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_read_chan_map
</UL>

<P><STRONG><a name="[4d4]"></a>ble_hs_hci_cmd_build_set_data_len</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_set_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_set_data_len
</UL>

<P><STRONG><a name="[4d6]"></a>ble_hs_hci_cmd_build_add_to_resolv_list</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_hs_hci_cmd_build_add_to_resolv_list &rArr; ble_hs_hci_cmd_body_add_to_resolv_list
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_add_to_resolv_list
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry_hci
</UL>

<P><STRONG><a name="[4d7]"></a>ble_hs_hci_cmd_build_remove_from_resolv_list</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_remove_from_resolv_list
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_remove_entry
</UL>

<P><STRONG><a name="[4d9]"></a>ble_hs_hci_cmd_build_read_peer_resolv_addr</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_read_peer_resolv_addr
</UL>

<P><STRONG><a name="[4db]"></a>ble_hs_hci_cmd_build_read_lcl_resolv_addr</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_read_lcl_resolv_addr
</UL>

<P><STRONG><a name="[4dd]"></a>ble_hs_hci_cmd_build_set_addr_res_en</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_build_set_addr_res_en
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_set_addr_res_en
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_resolve_enabled
</UL>

<P><STRONG><a name="[4e0]"></a>ble_hs_hci_cmd_build_set_resolv_priv_addr_timeout</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_hci_cmd_build_set_resolv_priv_addr_timeout &rArr; ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_addr_timeout
</UL>

<P><STRONG><a name="[2ff]"></a>ble_hs_hci_cmd_build_le_read_phy</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_read_le_phy
</UL>

<P><STRONG><a name="[302]"></a>ble_hs_hci_cmd_build_le_set_default_phy</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_default_phy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_prefered_default_le_phy
</UL>

<P><STRONG><a name="[304]"></a>ble_hs_hci_cmd_build_le_set_phy</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_phy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_prefered_le_phy
</UL>

<P><STRONG><a name="[4e4]"></a>ble_hs_hci_cmd_build_le_enh_recv_test</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_enhanced_recv_test
</UL>

<P><STRONG><a name="[4e6]"></a>ble_hs_hci_cmd_build_le_enh_trans_test</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_enhanced_trans_test
</UL>

<P><STRONG><a name="[4e8]"></a>ble_hs_hci_cmd_build_le_set_priv_mode</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_hci_cmd_build_le_set_priv_mode &rArr; ble_hs_hci_cmd_body_le_set_priv_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_priv_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_mode
</UL>

<P><STRONG><a name="[4ea]"></a>ble_hs_hci_cmd_build_set_random_addr</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_set_random_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_set_random_addr
</UL>

<P><STRONG><a name="[334]"></a>ble_hs_hci_cmd_build_le_read_remote_feat</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_hci_cmd_build_le_read_remote_feat &rArr; ble_hs_hci_cmd_body_le_read_remote_feat
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_read_remote_feat
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rd_rem_sup_feat_tx
</UL>

<P><STRONG><a name="[451]"></a>ble_hs_hci_evt_process</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_process &rArr; ble_hci_trans_buf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_free
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_dispatch_find
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_event_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_rx_hci_ev
</UL>

<P><STRONG><a name="[438]"></a>ble_hs_hci_evt_acl_process</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_acl_process &rArr; ble_l2cap_sig_reject_invalid_cid_tx &rArr; ble_l2cap_sig_reject_tx &rArr; ble_l2cap_sig_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_invalid_cid_tx
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_remove_rx
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_data_hdr_strip
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_mbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_process_rx_data_queue
</UL>

<P><STRONG><a name="[4a1]"></a>ble_hs_hci_util_handle_pb_bc_join</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_hs_hci_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_hdr_prepend
</UL>

<P><STRONG><a name="[471]"></a>ble_hs_hci_util_read_adv_tx_pwr</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_hs_hci_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[4f9]"></a>ble_hs_hci_util_rand</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, ble_hs_hci_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_gen_rnd
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_pair_rand
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_csrk
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_ltk
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_master_id_rand
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_ediv
</UL>

<P><STRONG><a name="[38e]"></a>ble_hs_hci_util_read_rssi</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, ble_hs_hci_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_read_rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_rssi
</UL>

<P><STRONG><a name="[4fa]"></a>ble_hs_hci_util_set_random_addr</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_hs_hci_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_random_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_rnd
</UL>

<P><STRONG><a name="[4fb]"></a>ble_hs_hci_util_set_data_len</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, ble_hs_hci_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_data_len
</UL>

<P><STRONG><a name="[4f4]"></a>ble_hs_hci_util_data_hdr_strip</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_hs_hci_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_util_data_hdr_strip &rArr; os_mbuf_adj &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
</UL>

<P><STRONG><a name="[4fc]"></a>ble_hs_hci_read_chan_map</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, ble_hs_hci_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_read_chan_map
</UL>

<P><STRONG><a name="[4fd]"></a>ble_hs_hci_set_chan_class</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ble_hs_hci_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_host_chan_class
</UL>

<P><STRONG><a name="[4ff]"></a>ble_hs_id_set_pub</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_hs_id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_id_set_pub &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_bd_addr
</UL>

<P><STRONG><a name="[500]"></a>ble_hs_id_gen_rnd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_hs_id.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
</UL>

<P><STRONG><a name="[501]"></a>ble_hs_id_set_rnd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_hs_id.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_set_random_addr
</UL>

<P><STRONG><a name="[486]"></a>ble_hs_id_addr</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ble_hs_id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_id_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_copy_addr
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr_type_usable
</UL>

<P><STRONG><a name="[502]"></a>ble_hs_id_copy_addr</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_hs_id.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr
</UL>

<P><STRONG><a name="[35b]"></a>ble_hs_id_use_addr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_hs_id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_hs_id_use_addr &rArr; ble_hs_pvcy_ensure_started &rArr; ble_hs_pvcy_set_addr_timeout &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_ensure_started
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr_type_usable
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
</UL>

<P><STRONG><a name="[209]"></a>ble_hs_id_infer_auto</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ble_hs_id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_hs_id_infer_auto &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr_type_usable
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_on_sync
</UL>

<P><STRONG><a name="[449]"></a>ble_hs_id_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_hs_id.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_reset
</UL>

<P><STRONG><a name="[4a5]"></a>ble_hs_log_mbuf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_hs_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_hs_log_mbuf &rArr; os_mbuf_copydata
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx
</UL>

<P><STRONG><a name="[4ae]"></a>ble_hs_log_flat_buf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_hs_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_hs_log_flat_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_dhkey_check_log
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_public_key_log
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_log
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_log
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_log
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_random_log
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_confirm_log
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_s1
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_print_key_sec
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_print_value_sec
</UL>

<P><STRONG><a name="[2c2]"></a>ble_hs_mbuf_bare_pkt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_gen_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_local
</UL>

<P><STRONG><a name="[49f]"></a>ble_hs_mbuf_acl_pkt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_hs_mbuf_acl_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_gen_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_frag_alloc
</UL>

<P><STRONG><a name="[267]"></a>ble_hs_mbuf_l2cap_pkt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_hs_mbuf_l2cap_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_gen_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_alloc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pkt
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_cmd_get
</UL>

<P><STRONG><a name="[3f1]"></a>ble_hs_mbuf_att_pkt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_hs_mbuf_att_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_gen_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify_custom
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_tx
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_tx
</UL>

<P><STRONG><a name="[207]"></a>ble_hs_mbuf_from_flat</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_hs_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_hs_mbuf_from_flat &rArr; os_mbuf_copyinto &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copyinto
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_flat
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_no_rsp_flat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_rx_adata
</UL>

<P><STRONG><a name="[508]"></a>ble_hs_mbuf_to_flat</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ble_hs_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
</UL>

<P><STRONG><a name="[237]"></a>ble_hs_mbuf_pullup_base</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_hs_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ble_hs_mbuf_pullup_base &rArr; os_mbuf_pullup &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_parse_read_group_type_adata
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_parse_find_type_value_hinfo
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_parse_find_info_entry
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_type
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_group_type
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_prep_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_info
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_error
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_fail_rx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_rx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_master_id_rx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_rsp_rx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
</UL>

<P><STRONG><a name="[224]"></a>ble_hs_misc_conn_chan_find</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_hs_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_misc_conn_chan_find
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_chan_find_by_scid
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
</UL>

<P><STRONG><a name="[269]"></a>ble_hs_misc_conn_chan_find_reqd</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ble_hs_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_hs_misc_conn_chan_find_reqd &rArr; ble_hs_misc_conn_chan_find
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
</UL>

<P><STRONG><a name="[485]"></a>ble_hs_misc_addr_type_to_id</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ble_hs_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr_type_usable
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_persist_keys
</UL>

<P><STRONG><a name="[444]"></a>ble_hs_misc_restore_irks</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_hs_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ble_hs_misc_restore_irks &rArr; ble_store_iterate &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sync
</UL>

<P><STRONG><a name="[464]"></a>ble_mqueue_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_hs_mqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_mqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[439]"></a>ble_mqueue_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_hs_mqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_mqueue_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_process_rx_data_queue
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_clear_rx_queue
</UL>

<P><STRONG><a name="[459]"></a>ble_mqueue_put</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ble_hs_mqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_mqueue_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_put
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_rx_data
</UL>

<P><STRONG><a name="[50d]"></a>ble_hs_periodic_sync_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_hs_periodic_sync.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[50e]"></a>ble_hs_periodic_sync_free</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_hs_periodic_sync.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>

<P><STRONG><a name="[510]"></a>ble_hs_periodic_sync_find_by_handle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_hs_periodic_sync.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_periodic_sync_insert
</UL>

<P><STRONG><a name="[50f]"></a>ble_hs_periodic_sync_insert</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ble_hs_periodic_sync.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_periodic_sync_find_by_handle
</UL>

<P><STRONG><a name="[80b]"></a>ble_hs_periodic_sync_remove</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ble_hs_periodic_sync.o(.text), UNUSED)

<P><STRONG><a name="[511]"></a>ble_hs_periodic_sync_find</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ble_hs_periodic_sync.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[512]"></a>ble_hs_periodic_sync_first</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_hs_periodic_sync.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>

<P><STRONG><a name="[45f]"></a>ble_hs_periodic_sync_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_hs_periodic_sync.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_hs_periodic_sync_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[383]"></a>ble_hs_pvcy_remove_entry</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ble_hs_pvcy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_remove_from_resolv_list
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
</UL>

<P><STRONG><a name="[2fd]"></a>ble_hs_pvcy_set_mode</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ble_hs_pvcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_hs_pvcy_set_mode &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_priv_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_priv_mode
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry_hci
</UL>

<P><STRONG><a name="[509]"></a>ble_hs_pvcy_add_entry</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_hs_pvcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ble_hs_pvcy_add_entry &rArr; ble_hs_pvcy_add_entry_hci &rArr; ble_hs_pvcy_set_mode &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry_hci
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_restore_one_irk
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_peer_sec
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_our_irk
</UL>

<P><STRONG><a name="[504]"></a>ble_hs_pvcy_ensure_started</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_hs_pvcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_hs_pvcy_ensure_started &rArr; ble_hs_pvcy_set_addr_timeout &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_addr_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_use_addr
</UL>

<P><STRONG><a name="[517]"></a>ble_hs_pvcy_set_our_irk</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ble_hs_pvcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ble_hs_pvcy_set_our_irk &rArr; ble_hs_pvcy_add_entry &rArr; ble_hs_pvcy_add_entry_hci &rArr; ble_hs_pvcy_set_mode &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_clear_entries
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_resolve_enabled
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[57f]"></a>ble_hs_pvcy_our_irk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_hs_pvcy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[443]"></a>ble_hs_startup_go</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ble_hs_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ble_hs_startup_go &rArr; ble_hs_pvcy_set_our_irk &rArr; ble_hs_pvcy_add_entry &rArr; ble_hs_pvcy_add_entry_hci &rArr; ble_hs_pvcy_set_mode &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_flow_startup
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_reset_tx
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_set_evmask_tx
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_le_set_evmask_tx
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_bd_addr
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_buf_sz
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_le_read_sup_f_tx
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_local_ver_tx
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_our_irk
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sync
</UL>

<P><STRONG><a name="[52c]"></a>ble_hs_stop</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ble_hs_stop.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_put
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_register
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_evq_get
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_begin
</UL>

<P><STRONG><a name="[463]"></a>ble_hs_stop_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_hs_stop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[236]"></a>ble_l2cap_chan_alloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_chan_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_create_chan
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_create_chan
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_create_chan
</UL>

<P><STRONG><a name="[480]"></a>ble_l2cap_chan_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_chan_free &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_delete_chan
</UL>

<P><STRONG><a name="[226]"></a>ble_l2cap_is_mtu_req_sent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_chan_mtu
</UL>

<P><STRONG><a name="[52e]"></a>ble_l2cap_parse_hdr</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_l2cap_parse_hdr &rArr; os_mbuf_copydata
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
</UL>

<P><STRONG><a name="[52f]"></a>ble_l2cap_prepend_hdr</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_prepend_hdr &rArr; os_mbuf_prepend_pullup &rArr; os_mbuf_pullup &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend_pullup
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
</UL>

<P><STRONG><a name="[22e]"></a>ble_l2cap_get_conn_handle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_rx
</UL>

<P><STRONG><a name="[80c]"></a>ble_l2cap_create_server</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_l2cap.o(.text), UNUSED)

<P><STRONG><a name="[80d]"></a>ble_l2cap_connect</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ble_l2cap.o(.text), UNUSED)

<P><STRONG><a name="[80e]"></a>ble_l2cap_disconnect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_l2cap.o(.text), UNUSED)

<P><STRONG><a name="[80f]"></a>ble_l2cap_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_l2cap.o(.text), UNUSED)

<P><STRONG><a name="[810]"></a>ble_l2cap_recv_ready</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_l2cap.o(.text), UNUSED)

<P><STRONG><a name="[4f7]"></a>ble_l2cap_remove_rx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_remove_rx &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx_payload
</UL>

<P><STRONG><a name="[4f6]"></a>ble_l2cap_rx</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, ble_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_rx &rArr; ble_l2cap_rx_payload &rArr; ble_l2cap_append_rx &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_chan_find_by_scid
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_remove_rx
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_parse_hdr
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_get_mtu
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
</UL>

<P><STRONG><a name="[26a]"></a>ble_l2cap_tx</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ble_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_prepend_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
</UL>

<P><STRONG><a name="[460]"></a>ble_l2cap_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_l2cap_init &rArr; ble_sm_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_init
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[32d]"></a>ble_l2cap_sig_update</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_update &rArr; ble_l2cap_sig_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_cmd_get
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_process_status
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_alloc
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_next_id
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
</UL>

<P><STRONG><a name="[482]"></a>ble_l2cap_sig_create_chan</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_create_chan &rArr; ble_l2cap_chan_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
</UL>

<P><STRONG><a name="[323]"></a>ble_l2cap_sig_conn_broken</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_conn_broken &rArr; ble_l2cap_sig_proc_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_call_cb
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[44a]"></a>ble_l2cap_sig_timer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_timer &rArr; ble_l2cap_sig_extract_expired &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_extract_expired
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_call_cb
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
</UL>

<P><STRONG><a name="[535]"></a>ble_l2cap_sig_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_l2cap_sig_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_init
</UL>

<P><STRONG><a name="[541]"></a>ble_l2cap_sig_tx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_l2cap_sig_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
</UL>

<P><STRONG><a name="[544]"></a>ble_l2cap_sig_hdr_parse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_l2cap_sig_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_l2cap_sig_hdr_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx
</UL>

<P><STRONG><a name="[540]"></a>ble_l2cap_sig_cmd_get</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ble_l2cap_sig_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_cmd_get &rArr; ble_hs_mbuf_l2cap_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
</UL>

<P><STRONG><a name="[546]"></a>ble_l2cap_sig_reject_tx</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ble_l2cap_sig_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_reject_tx &rArr; ble_l2cap_sig_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_cmd_get
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_invalid_cid_tx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx
</UL>

<P><STRONG><a name="[4f8]"></a>ble_l2cap_sig_reject_invalid_cid_tx</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, ble_l2cap_sig_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_reject_invalid_cid_tx &rArr; ble_l2cap_sig_reject_tx &rArr; ble_l2cap_sig_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
</UL>

<P><STRONG><a name="[811]"></a>ble_sm_num_procs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_sm.o(.text), UNUSED)

<P><STRONG><a name="[548]"></a>ble_sm_gen_pair_rand</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_sm_gen_pair_rand &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
</UL>

<P><STRONG><a name="[556]"></a>ble_sm_ia_ra</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_sm_ia_ra &rArr; ble_hs_conn_addrs &rArr; ble_hs_id_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
</UL>

<P><STRONG><a name="[55a]"></a>ble_sm_proc_find</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ble_sm_proc_find &rArr; ble_sm_proc_matches
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_matches
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_slave_initiate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_rx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_master_id_rx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
</UL>

<P><STRONG><a name="[560]"></a>ble_sm_ioact_state</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_can_advance
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
</UL>

<P><STRONG><a name="[55f]"></a>ble_sm_proc_can_advance</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ble_sm_proc_can_advance &rArr; ble_sm_io_action &rArr; ble_sm_lgcy_io_action
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ioact_state
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_io_action
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
</UL>

<P><STRONG><a name="[567]"></a>ble_sm_process_result</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_passkey_event
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_fail_tx
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_exec
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_persist_keys
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_remove
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_free
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_set_timer
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_slave_initiate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_connection_broken
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_rx
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
</UL>

<P><STRONG><a name="[4ed]"></a>ble_sm_enc_change_rx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = ble_sm_enc_change_rx &rArr; ble_sm_enc_event_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_encrypt_change
</UL>

<P><STRONG><a name="[4ee]"></a>ble_sm_enc_key_refresh_rx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = ble_sm_enc_key_refresh_rx &rArr; ble_sm_enc_event_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_enc_key_refresh
</UL>

<P><STRONG><a name="[4f2]"></a>ble_sm_ltk_req_rx</STRONG> (Thumb, 222 bytes, Stack size 168 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = ble_sm_ltk_req_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_neg_reply_tx
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_retrieve_ltk
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_insert
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_alloc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_lt_key_req
</UL>

<P><STRONG><a name="[57c]"></a>ble_sm_our_pair_rand</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_exec
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
</UL>

<P><STRONG><a name="[572]"></a>ble_sm_peer_pair_rand</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
</UL>

<P><STRONG><a name="[37e]"></a>ble_sm_pair_initiate</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ble_sm_pair_initiate &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_chk_store_overflow
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_insert
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_alloc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_pair_initiate
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_security_initiate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
</UL>

<P><STRONG><a name="[37d]"></a>ble_sm_enc_initiate</STRONG> (Thumb, 162 bytes, Stack size 96 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ble_sm_enc_initiate &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_insert
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_alloc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_encryption_initiate
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_security_initiate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
</UL>

<P><STRONG><a name="[44b]"></a>ble_sm_timer</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ble_sm_timer &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_extract_expired
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
</UL>

<P><STRONG><a name="[37f]"></a>ble_sm_slave_initiate</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ble_sm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_insert
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_alloc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_security_initiate
</UL>

<P><STRONG><a name="[583]"></a>ble_sm_inject_io</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, ble_sm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ioact_state
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_io_action
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[324]"></a>ble_sm_connection_broken</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[536]"></a>ble_sm_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_sm_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_init
</UL>

<P><STRONG><a name="[483]"></a>ble_sm_create_chan</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_sm_create_chan &rArr; ble_l2cap_chan_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
</UL>

<P><STRONG><a name="[589]"></a>ble_sm_alg_s1</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_sm_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ble_sm_alg_s1 &rArr; ble_sm_alg_encrypt &rArr; tc_aes_encrypt &rArr; shift_rows &rArr; _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_stk
</UL>

<P><STRONG><a name="[58a]"></a>ble_sm_alg_c1</STRONG> (Thumb, 290 bytes, Stack size 88 bytes, ble_sm_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ble_sm_alg_c1 &rArr; ble_sm_alg_encrypt &rArr; tc_aes_encrypt &rArr; shift_rows &rArr; _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_encrypt
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_xor_128
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
</UL>

<P><STRONG><a name="[563]"></a>ble_sm_cmd_get</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ble_sm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ble_sm_cmd_get &rArr; ble_hs_mbuf_l2cap_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_exec
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_exec
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_fail_tx
</UL>

<P><STRONG><a name="[564]"></a>ble_sm_tx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ble_sm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_sm_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_exec
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_exec
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_fail_tx
</UL>

<P><STRONG><a name="[58d]"></a>ble_sm_pair_cmd_log</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[58f]"></a>ble_sm_pair_confirm_log</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
</UL>

<P><STRONG><a name="[590]"></a>ble_sm_pair_random_log</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
</UL>

<P><STRONG><a name="[591]"></a>ble_sm_pair_fail_log</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[592]"></a>ble_sm_enc_info_log</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
</UL>

<P><STRONG><a name="[593]"></a>ble_sm_master_id_log</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[594]"></a>ble_sm_id_info_log</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
</UL>

<P><STRONG><a name="[595]"></a>ble_sm_id_addr_info_log</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[596]"></a>ble_sm_sign_info_log</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
</UL>

<P><STRONG><a name="[597]"></a>ble_sm_sec_req_log</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[598]"></a>ble_sm_public_key_log</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
</UL>

<P><STRONG><a name="[599]"></a>ble_sm_dhkey_check_log</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
</UL>

<P><STRONG><a name="[55e]"></a>ble_sm_lgcy_io_action</STRONG> (Thumb, 172 bytes, Stack size 12 bytes, ble_sm_lgcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_sm_lgcy_io_action
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_io_action
</UL>

<P><STRONG><a name="[574]"></a>ble_sm_lgcy_confirm_exec</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, ble_sm_lgcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ble_sm_lgcy_confirm_exec &rArr; ble_sm_alg_c1 &rArr; ble_sm_alg_encrypt &rArr; tc_aes_encrypt &rArr; shift_rows &rArr; _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_our_pair_rand
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ia_ra
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_exec
</UL>

<P><STRONG><a name="[571]"></a>ble_sm_lgcy_random_exec</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ble_sm_lgcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_sm_lgcy_random_exec &rArr; ble_sm_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_our_pair_rand
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_exec
</UL>

<P><STRONG><a name="[573]"></a>ble_sm_lgcy_random_rx</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, ble_sm_lgcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ble_sm_lgcy_random_rx &rArr; ble_sm_alg_c1 &rArr; ble_sm_alg_encrypt &rArr; tc_aes_encrypt &rArr; shift_rows &rArr; _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_peer_pair_rand
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ia_ra
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_stk
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
</UL>

<P><STRONG><a name="[59b]"></a>ble_store_read</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_peer_sec
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_cccd
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_our_sec
</UL>

<P><STRONG><a name="[59c]"></a>ble_store_overflow_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_store_overflow_event &rArr; ble_store_status
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_status
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write
</UL>

<P><STRONG><a name="[59e]"></a>ble_store_write</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_store_write &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_overflow_event
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_persist_sec
</UL>

<P><STRONG><a name="[59f]"></a>ble_store_delete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_store_delete &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete_cccd
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_all
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_clear
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete_peer_sec
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete_our_sec
</UL>

<P><STRONG><a name="[5a0]"></a>ble_store_full_event</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ble_store.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_status
</UL>

<P><STRONG><a name="[56d]"></a>ble_store_read_our_sec</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_store_read_our_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_retrieve_ltk
</UL>

<P><STRONG><a name="[558]"></a>ble_store_write_our_sec</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ble_store_write_our_sec &rArr; ble_store_persist_sec &rArr; ble_store_write &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_persist_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_persist_keys
</UL>

<P><STRONG><a name="[5a2]"></a>ble_store_delete_our_sec</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_store.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete
</UL>

<P><STRONG><a name="[5a3]"></a>ble_store_delete_peer_sec</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_store.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete
</UL>

<P><STRONG><a name="[2bb]"></a>ble_store_read_peer_sec</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_security_initiate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_read_bond
</UL>

<P><STRONG><a name="[559]"></a>ble_store_write_peer_sec</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ble_store_write_peer_sec &rArr; ble_hs_pvcy_add_entry &rArr; ble_hs_pvcy_add_entry_hci &rArr; ble_hs_pvcy_set_mode &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_persist_sec
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_persist_keys
</UL>

<P><STRONG><a name="[428]"></a>ble_store_read_cccd</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_store_read_cccd &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_updated
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
</UL>

<P><STRONG><a name="[415]"></a>ble_store_write_cccd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_store_write_cccd &rArr; ble_store_write &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_updated
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
</UL>

<P><STRONG><a name="[414]"></a>ble_store_delete_cccd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_store_delete_cccd &rArr; ble_store_delete &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
</UL>

<P><STRONG><a name="[413]"></a>ble_store_key_from_value_cccd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_store.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_cccd
</UL>

<P><STRONG><a name="[5a5]"></a>ble_store_key_from_value_sec</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_store.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_peer_sec
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_our_sec
</UL>

<P><STRONG><a name="[5a4]"></a>ble_store_key_from_value</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_store.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value_cccd
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value_sec
</UL>

<P><STRONG><a name="[50a]"></a>ble_store_iterate</STRONG> (Thumb, 176 bytes, Stack size 160 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ble_store_iterate &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_restore_irks
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_bonded_peers
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_count
</UL>

<P><STRONG><a name="[5a6]"></a>ble_store_clear</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, ble_store.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[386]"></a>ble_store_util_bonded_peers</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ble_store_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair_oldest_peer
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_oldest_peer
</UL>

<P><STRONG><a name="[5a7]"></a>ble_store_util_delete_all</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_store_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_peer
</UL>

<P><STRONG><a name="[384]"></a>ble_store_util_delete_peer</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, ble_store_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_all
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_oldest_peer
</UL>

<P><STRONG><a name="[5a8]"></a>ble_store_util_count</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_store_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate
</UL>

<P><STRONG><a name="[5a9]"></a>ble_store_util_delete_oldest_peer</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, ble_store_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_peer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_bonded_peers
</UL>

<P><STRONG><a name="[5aa]"></a>ble_store_util_status_rr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_store_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair_oldest_peer
</UL>

<P><STRONG><a name="[2d4]"></a>ble_uuid_init_from_buf</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ble_uuid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_uuid_init_from_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_service_uuid
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_uuids128
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_uuids32
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_uuids16
</UL>

<P><STRONG><a name="[2b4]"></a>ble_uuid_cmp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_uuid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_uuid_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_find_by_uuid
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_group_type_rsp
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_type_value
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_dsc
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc_chr_attr
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc_entry
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_adata
</UL>

<P><STRONG><a name="[5ab]"></a>ble_uuid_copy</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_uuid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1f9]"></a>ble_uuid_to_str</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, ble_uuid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_register_cb
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_uuid
</UL>

<P><STRONG><a name="[1f4]"></a>ble_uuid_u16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_uuid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_device_info
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_heart_rate
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_is_valid_read_group_type
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_is_valid_group_end
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_is_valid_find_group_type
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_dsc
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc_chr_attr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_inc_access
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_access
</UL>

<P><STRONG><a name="[3c7]"></a>ble_uuid_init_from_att_buf</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ble_uuid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_uuid_init_from_att_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_adata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_adata
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_adata
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_rx_adata
</UL>

<P><STRONG><a name="[242]"></a>ble_uuid_init_from_att_mbuf</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, ble_uuid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_uuid_init_from_att_mbuf &rArr; os_mbuf_copydata
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_parse_find_info_entry
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_read_rsp
</UL>

<P><STRONG><a name="[3cf]"></a>ble_uuid_to_any</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_uuid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_by_uuid
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chrs_by_uuid
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_by_uuid
</UL>

<P><STRONG><a name="[24b]"></a>ble_uuid_flat</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ble_uuid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_uuid_flat
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le32
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_group_type_entry_write
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_info
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_mbuf
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid128
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid16
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_def_access
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_access
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_tx
</UL>

<P><STRONG><a name="[24a]"></a>ble_uuid_length</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_uuid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_mbuf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_def_access
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_access
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_tx
</UL>

<P><STRONG><a name="[46b]"></a>ble_uuid_to_mbuf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_uuid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ble_uuid_to_mbuf &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid128
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid16
</UL>

<P><STRONG><a name="[5ad]"></a>ble_ll_rxpdu_alloc</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ble_ll_rxpdu_alloc &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_end
</UL>

<P><STRONG><a name="[6ac]"></a>ble_ll_chk_txrx_octets</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_set_data_len
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_wr_sugg_data_len
</UL>

<P><STRONG><a name="[6ad]"></a>ble_ll_chk_txrx_time</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_set_data_len
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_wr_sugg_data_len
</UL>

<P><STRONG><a name="[630]"></a>ble_ll_is_rpa</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_prepare
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_get_local_rpa
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_req
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_pkt_in
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_filter_policy
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_send_adv_report
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_pdu_prepare
</UL>

<P><STRONG><a name="[679]"></a>ble_ll_addr_is_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_is_peer_adv
</UL>

<P><STRONG><a name="[5af]"></a>ble_ll_is_valid_random_addr</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_is_valid_random_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_start
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_set_random_addr
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_start
</UL>

<P><STRONG><a name="[812]"></a>ble_ll_set_public_addr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_ll.o(.text), UNUSED)

<P><STRONG><a name="[5b0]"></a>ble_ll_set_random_addr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_ll_set_random_addr &rArr; ble_ll_is_valid_random_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_enabled
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_enabled
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_valid_random_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[5b3]"></a>ble_ll_is_our_devaddr</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_is_our_devaddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_filter_policy
</UL>

<P><STRONG><a name="[737]"></a>ble_ll_get_our_devaddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
</UL>

<P><STRONG><a name="[5b4]"></a>ble_ll_wfr_timer_exp</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ble_ll_wfr_timer_exp &rArr; ble_ll_scan_wfr_timer_exp &rArr; ble_ll_scan_interrupted &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_xcvr_state_get
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_started
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_wfr_timer_exp
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_wfr_timer_exp
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_init_wfr_timer_exp
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_wfr_timer_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_isr
</UL>

<P><STRONG><a name="[813]"></a>ble_ll_wfr_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_ll.o(.text), UNUSED)

<P><STRONG><a name="[5e5]"></a>ble_ll_wfr_disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_current_sm_over
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_start
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_start
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_execute_item
</UL>

<P><STRONG><a name="[5c6]"></a>ble_ll_rx_pdu_in</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_ll_rx_pdu_in &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_end
</UL>

<P><STRONG><a name="[5c8]"></a>ble_ll_acl_data_in</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_ll_acl_data_in &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_acl_rx
</UL>

<P><STRONG><a name="[5c9]"></a>ble_ll_data_buffer_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_ll.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
</UL>

<P><STRONG><a name="[5ca]"></a>ble_ll_hw_error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_ll.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_reset
</UL>

<P><STRONG><a name="[5cd]"></a>ble_ll_rx_start</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ble_ll_rx_start &rArr; ble_ll_adv_rx_isr_start &rArr; ble_ll_adv_tx_done &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_access_addr_get
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_start
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_start
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_start
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_isr_start
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_start_isr
</UL>

<P><STRONG><a name="[5d3]"></a>ble_ll_rx_end</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ble_ll_rx_end &rArr; ble_ll_init_rx_isr_end &rArr; ble_ll_rx_pdu_in &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rxpdu_copy
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_isr_end
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pdu_in
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rxpdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_end_isr
</UL>

<P><STRONG><a name="[71]"></a>ble_ll_tx_mbuf_pducb</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_ll_tx_mbuf_pducb &rArr; os_mbuf_copydata
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[5d9]"></a>ble_ll_tx_flat_mbuf_pducb</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_ll.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[5dc]"></a>ble_ll_task</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ble_ll_task &rArr; npl_tencentos_tiny_eventq_get &rArr; tos_msg_q_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_get
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_txpwr_set
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_init
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_start
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_send_noop
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_ll_task_func
</UL>

<P><STRONG><a name="[5ec]"></a>ble_ll_state_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_stop
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_halt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_txend_to_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_txend_to_standby
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_current_sm_over
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_halt
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_done
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_wfr_timer_exp
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_start
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_isr_end
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_execute_item
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>

<P><STRONG><a name="[61d]"></a>ble_ll_state_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_stop
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rfclk_chk_restart
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_resched_pdu
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_execute_item
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_overlaps_current
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_start_isr
</UL>

<P><STRONG><a name="[5e1]"></a>ble_ll_event_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_halt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_current_sm_over
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_start
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_overlap
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_timer_cb
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_interrupted
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_start
</UL>

<P><STRONG><a name="[6e2]"></a>ble_ll_read_supp_states</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_read_supp_states
</UL>

<P><STRONG><a name="[6a1]"></a>ble_ll_read_supp_features</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_param_reply
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_read_rem_features
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_read_local_features
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_feature_req
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
</UL>

<P><STRONG><a name="[814]"></a>ble_ll_mbuf_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_ll.o(.text), UNUSED)

<P><STRONG><a name="[5e3]"></a>ble_ll_reset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ble_ll_reset &rArr; ble_ll_conn_module_reset &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_init
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_stop
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_clear
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_stop
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_init
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_reset
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_reset
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_init
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_module_reset
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_reset
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_disable
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_flush_pkt_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ctlr_bb_cmd_proc
</UL>

<P><STRONG><a name="[617]"></a>ble_ll_pdu_tx_time_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_can_send_next_pdu
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_sched
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_module_reset
</UL>

<P><STRONG><a name="[5f2]"></a>ble_ll_pdu_max_tx_octets_get</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_pdu_max_tx_octets_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_update_max_tx_octets_phy_mode
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_adjust_pyld_len
</UL>

<P><STRONG><a name="[5f3]"></a>ble_ll_init</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ble_ll_init &rArr; ble_ll_conn_module_init &rArr; ble_ll_conn_module_reset &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_init
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_init
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_init
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_init
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_init
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_module_init
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_init
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_get_public_addr
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_cfg_ll
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_addr_empty
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_init
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_seed_prng
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[605]"></a>ble_ll_adv_chk_rpa_timeout</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_chk_rpa_timeout &rArr; ble_ll_adv_rpa_update &rArr; ble_ll_resolv_gen_rpa &rArr; ble_ll_resolv_get_priv_addr &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rpa_update
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
</UL>

<P><STRONG><a name="[606]"></a>ble_ll_adv_rpa_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_rpa_timeout &rArr; ble_ll_adv_flags_set &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_rpa_timer_cb
</UL>

<P><STRONG><a name="[60a]"></a>ble_ll_adv_event_rmvd_from_sched</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_event_rmvd_from_sched &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_final_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
</UL>

<P><STRONG><a name="[618]"></a>ble_ll_adv_halt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_halt &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_active_chanset_clear
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_txpwr_set
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_execute_item
</UL>

<P><STRONG><a name="[619]"></a>ble_ll_adv_set_adv_params</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_ll_adv_set_adv_params
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6ea]"></a>ble_ll_adv_read_txpwr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_ll_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[628]"></a>ble_ll_adv_set_enable</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_set_enable &rArr; ble_ll_adv_sm_stop &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_start
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[62a]"></a>ble_ll_adv_set_scan_rsp_data</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_set_scan_rsp_data &rArr; ble_ll_adv_update_data_mbuf &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_configured
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_update_data_mbuf
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_clear
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[62c]"></a>ble_ll_adv_set_adv_data</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_set_adv_data &rArr; ble_ll_adv_update_data_mbuf &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_adv_mode_ext
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_configured
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_update_data_mbuf
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_clear
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[5d6]"></a>ble_ll_adv_rx_isr_end</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_rx_isr_end &rArr; ble_ll_adv_tx_done &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_req
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_done
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_end
</UL>

<P><STRONG><a name="[5c3]"></a>ble_ll_adv_rx_pkt_in</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_rx_pkt_in &rArr; ble_ll_adv_conn_req_rxd &rArr; ble_ll_conn_slave_start &rArr; ble_ll_conn_created &rArr; ble_ll_conn_next_event &rArr; ble_ll_conn_chk_csm_flags &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_make_done
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_conn_req_rxd
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pkt_in
</UL>

<P><STRONG><a name="[5d0]"></a>ble_ll_adv_rx_isr_start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_rx_isr_start &rArr; ble_ll_adv_tx_done &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_done
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_start
</UL>

<P><STRONG><a name="[74a]"></a>ble_ll_adv_can_chg_whitelist</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ble_ll_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_chg_allowed
</UL>

<P><STRONG><a name="[63e]"></a>ble_ll_adv_send_conn_comp_ev</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_send_conn_comp_ev &rArr; ble_ll_conn_comp_event_send &rArr; ble_ll_hci_event_send &rArr; ble_hci_trans_ll_evt_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_le_csa
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
</UL>

<P><STRONG><a name="[640]"></a>ble_ll_adv_get_local_rpa</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_adv_get_local_rpa
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_rpa
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
</UL>

<P><STRONG><a name="[697]"></a>ble_ll_adv_get_peer_rpa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_ll_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
</UL>

<P><STRONG><a name="[5b7]"></a>ble_ll_adv_wfr_timer_exp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_wfr_timer_exp &rArr; ble_ll_adv_tx_done &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_done
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_timer_exp
</UL>

<P><STRONG><a name="[5e8]"></a>ble_ll_adv_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_reset &rArr; ble_ll_adv_sm_stop &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_init
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
</UL>

<P><STRONG><a name="[5b2]"></a>ble_ll_adv_enabled</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_ll_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_set_random_addr
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_controller_busy
</UL>

<P><STRONG><a name="[5f9]"></a>ble_ll_adv_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_ll_adv_init &rArr; ble_ll_adv_sm_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
</UL>

<P><STRONG><a name="[73f]"></a>ble_ll_conn_is_lru</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_conn_is_lru
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
</UL>

<P><STRONG><a name="[645]"></a>ble_ll_conn_get_ce_end_time</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_get_ce_end_time &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_overlaps_current
</UL>

<P><STRONG><a name="[688]"></a>ble_ll_conn_find_active_conn</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ble_ll_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_wr_auth_pyld_tmo
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_auth_pyld_tmo
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_neg_reply
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_reply
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_start_encrypt
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_set_data_len
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_chan_map
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_rssi
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_rem_ver_cmd
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_disconnect_cmd
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_param_reply
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_update
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_read_rem_features
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_pkt_in
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
</UL>

<P><STRONG><a name="[690]"></a>ble_ll_conn_sm_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_ll_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_slave_start
</UL>

<P><STRONG><a name="[649]"></a>ble_ll_conn_calc_dci</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_ll_conn_calc_dci &rArr; ble_ll_utils_calc_dci_csa2 &rArr; ble_ll_utils_remapped_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_dci_csa2
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_calc_dci_csa1
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_next_event
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_set_csa
</UL>

<P><STRONG><a name="[5b8]"></a>ble_ll_conn_wfr_timer_exp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_wfr_timer_exp &rArr; ble_ll_conn_current_sm_over &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_current_sm_over
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_timer_exp
</UL>

<P><STRONG><a name="[72d]"></a>ble_ll_conn_reset_pending_aux_conn_rsp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_ll_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_execute_item
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
</UL>

<P><STRONG><a name="[815]"></a>ble_ll_conn_init_pending_aux_conn_rsp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_ll_conn.o(.text), UNUSED)

<P><STRONG><a name="[5ba]"></a>ble_ll_conn_init_wfr_timer_exp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_ll_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_timer_exp
</UL>

<P><STRONG><a name="[65c]"></a>ble_ll_conn_auth_pyld_timer_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_auth_pyld_timer_start &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_wr_auth_pyld_tmo
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_tx_done
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_auth_pyld_timer_cb
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_start_enc_rsp
</UL>

<P><STRONG><a name="[65d]"></a>ble_ll_conn_auth_pyld_timer_cb</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_auth_pyld_timer_cb &rArr; ble_ll_ctrl_proc_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_auth_pyld_tmo_event_send
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_auth_pyld_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[660]"></a>ble_ll_conn_rd_features_timer_cb</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_ll_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_used_feat
</UL>

<P><STRONG><a name="[664]"></a>ble_ll_conn_master_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_ll_conn_master_init &rArr; ble_ll_conn_master_common_init &rArr; ble_ll_utils_calc_access_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_master_common_init
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create
</UL>

<P><STRONG><a name="[667]"></a>ble_ll_conn_end</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_used_feat
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_disconn_comp_event_send
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_remove
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create_cancel
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_timeout
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_end
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_module_reset
</UL>

<P><STRONG><a name="[671]"></a>ble_ll_conn_sm_new</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_ll_conn_sm_new &rArr; npl_tencentos_tiny_callout_init &rArr; tos_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_init
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_update_max_tx_octets_phy_mode
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_calc_itvl_ticks
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_slave_start
</UL>

<P><STRONG><a name="[672]"></a>ble_ll_conn_datalen_update</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_datalen_update &rArr; ble_ll_hci_ev_datalen_chg &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_datalen_chg
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_update_max_tx_octets_phy_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_len_proc
</UL>

<P><STRONG><a name="[67b]"></a>ble_ll_conn_connect_ind_send</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_ll_conn_connect_ind_send &rArr; ble_phy_tx &rArr; ble_phy_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_txend_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[67c]"></a>ble_ll_conn_event_halt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_event_halt &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_send
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_execute_item
</UL>

<P><STRONG><a name="[5c5]"></a>ble_ll_init_rx_pkt_in</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ble_ll_init_rx_pkt_in &rArr; ble_ll_conn_created &rArr; ble_ll_conn_next_event &rArr; ble_ll_conn_chk_csm_flags &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_whitelist_enabled
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_stop
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_set_peer_rpa
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_adv_decode_addr
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_local_rpa
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_set_csa
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_peer_rpa
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_rpa
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pkt_in
</UL>

<P><STRONG><a name="[5d1]"></a>ble_ll_init_rx_isr_start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_ll_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_start
</UL>

<P><STRONG><a name="[5d8]"></a>ble_ll_init_rx_isr_end</STRONG> (Thumb, 656 bytes, Stack size 120 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_ll_init_rx_isr_end &rArr; ble_ll_rx_pdu_in &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_restart_rx
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_master_new
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_whitelist_enabled
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_get_pdu_data
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_adv_decode_addr
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_rpa
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_send
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_is_peer_adv
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_prepare
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_match
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_irk_nonzero
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enabled
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_resolv_list_match
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rxpdu_copy
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pdu_in
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_our_devaddr
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_rpa
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rxpdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_end
</UL>

<P><STRONG><a name="[685]"></a>ble_ll_conn_timeout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_timeout &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_end
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_current_sm_over
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_chanmap_req
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_conn_update
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_rsp_timer_cb
</UL>

<P><STRONG><a name="[5cf]"></a>ble_ll_conn_rx_isr_start</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_rx_isr_start &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_send
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_start
</UL>

<P><STRONG><a name="[5c2]"></a>ble_ll_conn_rx_data_pdu</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_rx_data_pdu &rArr; ble_ll_ctrl_rx_pdu &rArr; ble_ll_ctrl_rx_chanmap_req &rArr; ble_ll_conn_timeout &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_enc_allowed_pdu_rx
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_ll_acl_tx
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_timeout
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_auth_pyld_timer_start
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_chk_csm_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pkt_in
</UL>

<P><STRONG><a name="[5d4]"></a>ble_ll_conn_rx_isr_end</STRONG> (Thumb, 718 bytes, Stack size 96 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_rx_isr_end &rArr; ble_ll_conn_tx_data_pdu &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_put
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_tx_done
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_can_send_next_pdu
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_adjust_pyld_len
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_current_sm_over
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_is_empty_pdu
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rxpdu_copy
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_pdu_tx_time_get
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pdu_in
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rxpdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_end
</UL>

<P><STRONG><a name="[68e]"></a>ble_ll_conn_enqueue_pkt</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_enqueue_pkt &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_param_reply
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_reject_ind_send
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_pkt_in
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_start_enc_send
</UL>

<P><STRONG><a name="[5bc]"></a>ble_ll_conn_tx_pkt_in</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_tx_pkt_in &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_enqueue_pkt
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_tx_pkt_in
</UL>

<P><STRONG><a name="[68f]"></a>ble_ll_conn_set_global_chanmap</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_set_global_chanmap &rArr; ble_ll_ctrl_proc_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_set_chan_class
</UL>

<P><STRONG><a name="[637]"></a>ble_ll_conn_slave_start</STRONG> (Thumb, 544 bytes, Stack size 56 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_slave_start &rArr; ble_ll_conn_created &rArr; ble_ll_conn_next_event &rArr; ble_ll_conn_chk_csm_flags &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_num_used_chans
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_sm_new
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_sm_get
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_set_csa
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_conn_req_rxd
</UL>

<P><STRONG><a name="[5e9]"></a>ble_ll_conn_module_reset</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_module_reset &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_free
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_max_data_pdu_pyld
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_end
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_pdu_tx_time_get
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_module_init
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
</UL>

<P><STRONG><a name="[5fb]"></a>ble_ll_conn_module_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_module_init &rArr; ble_ll_conn_module_reset &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_module_reset
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
</UL>

<P><STRONG><a name="[69d]"></a>ble_ll_conn_hci_chk_conn_params</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_ll_conn_hci_chk_conn_params
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_update
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_process_conn_params
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_pdu_proc
</UL>

<P><STRONG><a name="[622]"></a>ble_ll_conn_comp_event_send</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_ll_conn_comp_event_send &rArr; ble_ll_hci_event_send &rArr; ble_hci_trans_ll_evt_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_get_peer_rpa
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_get_local_rpa
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_get_peer_rpa
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_get_local_rpa
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_le_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_cancel_conn_complete_event
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_send_conn_comp_ev
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop_timeout
</UL>

<P><STRONG><a name="[5db]"></a>ble_ll_conn_num_comp_pkts_event_send</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_num_comp_pkts_event_send &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_end
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_comp_pkts
</UL>

<P><STRONG><a name="[65e]"></a>ble_ll_auth_pyld_tmo_event_send</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_auth_pyld_tmo_event_send &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_auth_pyld_timer_cb
</UL>

<P><STRONG><a name="[66a]"></a>ble_ll_disconn_comp_event_send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_disconn_comp_event_send &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_end
</UL>

<P><STRONG><a name="[69b]"></a>ble_ll_conn_create</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_create &rArr; ble_ll_scan_initiator_start &rArr; ble_ll_scan_sm_start &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_chk_conn_params
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_chk_scan_params
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_alloc_conn_comp_ev
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_sm_new
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_master_init
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_sm_get
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_enabled
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_initiator_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6a0]"></a>ble_ll_conn_hci_read_rem_features</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_hci_read_rem_features &rArr; ble_ll_ctrl_proc_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_read_supp_features
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6a2]"></a>ble_ll_conn_hci_update</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_hci_update &rArr; ble_ll_ctrl_proc_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_chk_conn_params
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_reject_ind_send
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6a3]"></a>ble_ll_conn_hci_param_reply</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_hci_param_reply &rArr; ble_ll_ctrl_reject_ind_send &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_process_conn_params
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_reject_ind_send
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_enqueue_pkt
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_read_supp_features
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6a5]"></a>ble_ll_conn_create_cancel</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_create_cancel &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_stop
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_end
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6a6]"></a>ble_ll_conn_hci_disconnect_cmd</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_hci_disconnect_cmd &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_terminate_start
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_link_ctrl_cmd_proc
</UL>

<P><STRONG><a name="[6a7]"></a>ble_ll_conn_hci_rd_rem_ver_cmd</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_hci_rd_rem_ver_cmd &rArr; ble_ll_ctrl_proc_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_link_ctrl_cmd_proc
</UL>

<P><STRONG><a name="[6a8]"></a>ble_ll_conn_hci_rd_rssi</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_conn_hci_rd_rssi
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_status_params_cmd_proc
</UL>

<P><STRONG><a name="[6a9]"></a>ble_ll_conn_hci_rd_chan_map</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_conn_hci_rd_chan_map
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6aa]"></a>ble_ll_conn_hci_set_chan_class</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_hci_set_chan_class &rArr; ble_ll_conn_set_global_chanmap &rArr; ble_ll_ctrl_proc_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_num_used_chans
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_set_global_chanmap
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6ab]"></a>ble_ll_conn_hci_set_data_len</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_hci_set_data_len &rArr; ble_ll_ctrl_initiate_dle &rArr; ble_ll_ctrl_proc_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_chk_txrx_time
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_chk_txrx_octets
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_initiate_dle
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6af]"></a>ble_ll_conn_hci_le_start_encrypt</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_hci_le_start_encrypt &rArr; ble_ll_ctrl_proc_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le64
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6b0]"></a>ble_ll_conn_hci_le_ltk_reply</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_hci_le_ltk_reply &rArr; ble_ll_ctrl_start_enc_send &rArr; ble_ll_ctrl_start_rsp_timer &rArr; npl_tencentos_tiny_callout_init &rArr; tos_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_calc_session_key
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_start_enc_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6b3]"></a>ble_ll_conn_hci_le_ltk_neg_reply</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_hci_le_ltk_neg_reply &rArr; ble_ll_ctrl_reject_ind_send &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_reject_ind_send
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6b4]"></a>ble_ll_conn_hci_rd_auth_pyld_tmo</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_conn_hci_rd_auth_pyld_tmo
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ctlr_bb_cmd_proc
</UL>

<P><STRONG><a name="[6b5]"></a>ble_ll_conn_hci_wr_auth_pyld_tmo</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_hci_wr_auth_pyld_tmo &rArr; ble_ll_conn_auth_pyld_timer_start &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_is_active
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_auth_pyld_timer_start
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_find_active_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ctlr_bb_cmd_proc
</UL>

<P><STRONG><a name="[816]"></a>ble_ll_ctrl_proc_with_instant_initiated</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ble_ll_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[817]"></a>ble_ll_ctrl_rej_ext_ind_make</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_ll_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[65f]"></a>ble_ll_ctrl_proc_start</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_proc_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_start_rsp_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_start_encrypt
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_rem_ver_cmd
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_update
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_read_rem_features
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_chk_proc_start
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_set_global_chanmap
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_auth_pyld_timer_cb
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_initiate_dle
</UL>

<P><STRONG><a name="[66c]"></a>ble_ll_ctrl_terminate_start</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_disconnect_cmd
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_chk_proc_start
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_next_event
</UL>

<P><STRONG><a name="[66f]"></a>ble_ll_ctrl_chk_proc_start</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_terminate_start
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_ver
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_end
</UL>

<P><STRONG><a name="[652]"></a>ble_ll_ctrl_proc_stop</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_stop
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_chk_proc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_next_event
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_chk_csm_flags
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_version_ind
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_conn_param_req
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_feature_rsp
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_reject_ind
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_start_enc_rsp
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_unk_rsp
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_ping_rsp
</UL>

<P><STRONG><a name="[6a4]"></a>ble_ll_ctrl_conn_param_reply</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_ll_ctrl_conn_param_reply &rArr; ble_ll_ctrl_conn_upd_make
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_upd_make
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_pdu_make
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_param_reply
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_pdu_proc
</UL>

<P><STRONG><a name="[6b1]"></a>ble_ll_calc_session_key</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_ll_calc_session_key &rArr; ble_hw_encrypt_block
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_encrypt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_reply
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_enc_rsp
</UL>

<P><STRONG><a name="[689]"></a>ble_ll_ctrl_enc_allowed_pdu_rx</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_ll_ctrl_enc_allowed_pdu_rx &rArr; ble_ll_ctrl_enc_allowed_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_enc_allowed_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
</UL>

<P><STRONG><a name="[656]"></a>ble_ll_ctrl_enc_allowed_pdu_tx</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ble_ll_ctrl_enc_allowed_pdu_tx &rArr; ble_ll_ctrl_enc_allowed_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_enc_allowed_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
</UL>

<P><STRONG><a name="[657]"></a>ble_ll_ctrl_is_start_enc_rsp</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_ll_ctrl_is_start_enc_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
</UL>

<P><STRONG><a name="[6b2]"></a>ble_ll_ctrl_start_enc_send</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_start_enc_send &rArr; ble_ll_ctrl_start_rsp_timer &rArr; npl_tencentos_tiny_callout_init &rArr; tos_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_enqueue_pkt
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_start_rsp_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_reply
</UL>

<P><STRONG><a name="[6ae]"></a>ble_ll_ctrl_initiate_dle</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_initiate_dle &rArr; ble_ll_ctrl_proc_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_set_data_len
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[658]"></a>ble_ll_ctrl_is_terminate_ind</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
</UL>

<P><STRONG><a name="[68a]"></a>ble_ll_ctrl_rx_pdu</STRONG> (Thumb, 670 bytes, Stack size 64 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_rx_pdu &rArr; ble_ll_ctrl_rx_chanmap_req &rArr; ble_ll_conn_timeout &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_enqueue_pkt
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_read_supp_features
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_chanmap_req
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_version_ind
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_conn_param_rsp
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_conn_param_req
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_feature_rsp
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_feature_req
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_conn_update
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_reject_ind
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_start_enc_rsp
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pause_enc_rsp
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pause_enc_req
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_start_enc_req
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_enc_req
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_enc_rsp
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_unk_rsp
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_ping_rsp
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_datalen_upd_make
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_len_proc
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_initiate_dle
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
</UL>

<P><STRONG><a name="[651]"></a>ble_ll_ctrl_reject_ind_send</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_reject_ind_send &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_enqueue_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_neg_reply
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_param_reply
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_update
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_chk_csm_flags
</UL>

<P><STRONG><a name="[68d]"></a>ble_ll_ctrl_tx_done</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_tx_done &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_auth_pyld_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
</UL>

<P><STRONG><a name="[62d]"></a>ble_ll_hci_adv_mode_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_ll_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_adv_data
</UL>

<P><STRONG><a name="[698]"></a>ble_ll_hci_event_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_hci_event_send &rArr; ble_hci_trans_ll_evt_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_ll_evt_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_used_feat
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_ltk_req
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_datalen_chg
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_conn_update
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_disconn_comp_event_send
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_auth_pyld_tmo_event_send
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_le_csa
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_send_noop
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_hw_err
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_databuf_overflow
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_num_comp_pkts_event_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_send_adv_report
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_send_vendor_err
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_cmd_proc
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rem_conn_parm_req
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_ver
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_encrypt_chg
</UL>

<P><STRONG><a name="[5df]"></a>ble_ll_hci_send_noop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_send_noop &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_get_num_cmd_pkts
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_task
</UL>

<P><STRONG><a name="[694]"></a>ble_ll_hci_is_le_event_enabled</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_hci_is_le_event_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_used_feat
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_ltk_req
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_datalen_chg
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_conn_update
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_le_csa
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_send_adv_report
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rem_conn_parm_req
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_pdu_proc
</UL>

<P><STRONG><a name="[69a]"></a>ble_ll_hci_is_event_enabled</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_ll_hci_is_event_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_disconn_comp_event_send
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_auth_pyld_tmo_event_send
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_hw_err
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_databuf_overflow
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_ver
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_encrypt_chg
</UL>

<P><STRONG><a name="[818]"></a>ble_ll_get_tx_pwr_compensation</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_ll_hci.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>ble_ll_hci_cmd_rx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_cmd_rx &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>ble_ll_hci_acl_rx</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_acl_rx &rArr; ble_ll_acl_data_in &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_acl_data_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll.o(.text)
</UL>
<P><STRONG><a name="[5ea]"></a>ble_ll_hci_init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ble_ll_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
</UL>

<P><STRONG><a name="[673]"></a>ble_ll_hci_ev_datalen_chg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_ll_hci_ev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_ev_datalen_chg &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_le_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_datalen_update
</UL>

<P><STRONG><a name="[6c3]"></a>ble_ll_hci_ev_rem_conn_parm_req</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_ll_hci_ev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_ev_rem_conn_parm_req &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_le_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_pdu_proc
</UL>

<P><STRONG><a name="[653]"></a>ble_ll_hci_ev_conn_update</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_ll_hci_ev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_ev_conn_update &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_le_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_chk_csm_flags
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_conn_param_req
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_reject_ind
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_unk_rsp
</UL>

<P><STRONG><a name="[6ca]"></a>ble_ll_hci_ev_encrypt_chg</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_ll_hci_ev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_ev_encrypt_chg &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_reject_ind
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_start_enc_rsp
</UL>

<P><STRONG><a name="[650]"></a>ble_ll_hci_ev_ltk_req</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_ll_hci_ev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_ev_ltk_req &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le64
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_le_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_chk_csm_flags
</UL>

<P><STRONG><a name="[661]"></a>ble_ll_hci_ev_rd_rem_used_feat</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_ll_hci_ev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_ev_rd_rem_used_feat &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_le_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_end
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rd_features_timer_cb
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_end
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_feature_rsp
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_unk_rsp
</UL>

<P><STRONG><a name="[6c0]"></a>ble_ll_hci_ev_rd_rem_ver</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_ll_hci_ev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_ev_rd_rem_ver &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_chk_proc_start
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_version_ind
</UL>

<P><STRONG><a name="[5cc]"></a>ble_ll_hci_ev_hw_err</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_ll_hci_ev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_ev_hw_err &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_err_timer_cb
</UL>

<P><STRONG><a name="[5da]"></a>ble_ll_hci_ev_databuf_overflow</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_ll_hci_ev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_ev_databuf_overflow &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_dbuf_overflow
</UL>

<P><STRONG><a name="[63f]"></a>ble_ll_hci_ev_le_csa</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_ll_hci_ev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_ev_le_csa &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_le_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_send_conn_comp_ev
</UL>

<P><STRONG><a name="[700]"></a>ble_ll_hci_ev_send_vendor_err</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_ll_hci_ev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le32
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[701]"></a>ble_ll_rand_sample</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ble_ll_rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_ll_rand_sample &rArr; ble_hw_rng_stop &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_rng_stop
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_rand.o(.text)
</UL>
<P><STRONG><a name="[6b9]"></a>ble_ll_rand_data_get</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ble_ll_rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ble_ll_rand_data_get &rArr; ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_rng_start
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_refresh_nrpa
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_prand_get
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_rand
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_enc_req
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_enc_req_make
</UL>

<P><STRONG><a name="[706]"></a>ble_ll_rand_prand_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_ll_rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_rand_prand_get &rArr; ble_ll_rand_data_get &rArr; ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_gen_priv_addr
</UL>

<P><STRONG><a name="[5e0]"></a>ble_ll_rand_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_ll_rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ble_ll_rand_start &rArr; ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_rng_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_task
</UL>

<P><STRONG><a name="[5fd]"></a>ble_ll_rand_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_ll_rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_rand_init &rArr; ble_hw_rng_init
</UL>
<BR>[Calls]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_rng_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
</UL>

<P><STRONG><a name="[633]"></a>ble_ll_resolv_irk_nonzero</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_is_peer_adv
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_gen_rpa
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_req
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[6f2]"></a>ble_ll_resolv_list_clr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_resolv_list_clr &rArr; ble_ll_resolv_list_chg_allowed &rArr; ble_ll_is_controller_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_resolv_list_clear
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_chg_allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_reset
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6f3]"></a>ble_ll_resolv_list_read_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[632]"></a>ble_ll_resolv_list_find</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_resolv_list_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_is_peer_adv
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_prepare
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_gen_rpa
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_req
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_pdu_prepare
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolve_set_priv_mode
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_peer_addr_rd
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_local_addr_rd
</UL>

<P><STRONG><a name="[6f0]"></a>ble_ll_resolv_list_add</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_ll_resolv_list_add &rArr; ble_ll_resolv_gen_priv_addr &rArr; ble_ll_rand_prand_get &rArr; ble_ll_rand_data_get &rArr; ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_resolv_list_add
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_on_resolv_list
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_gen_priv_addr
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_chg_allowed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6f1]"></a>ble_ll_resolv_list_rmv</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_ll_resolv_list_rmv &rArr; ble_ll_is_on_resolv_list &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_resolv_list_rmv
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_on_resolv_list
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_chg_allowed
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6f6]"></a>ble_ll_resolv_enable_cmd</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ble_ll_resolv_enable_cmd &rArr; ble_npl_callout_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_reset
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_controller_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6f4]"></a>ble_ll_resolv_peer_addr_rd</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_ll_resolv_peer_addr_rd &rArr; ble_ll_resolv_list_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6f5]"></a>ble_ll_resolv_local_addr_rd</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_ll_resolv_local_addr_rd &rArr; ble_ll_resolv_list_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[60f]"></a>ble_ll_resolv_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_is_peer_adv
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_prepare
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_req
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_pdu_prepare
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_rpa_tmo
</UL>

<P><STRONG><a name="[6f7]"></a>ble_ll_resolv_set_rpa_tmo</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_ll_resolv_set_rpa_tmo &rArr; ble_npl_time_ms_to_ticks32 &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enabled
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6f8]"></a>ble_ll_resolve_set_priv_mode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_ll_resolve_set_priv_mode &rArr; ble_ll_resolv_list_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_controller_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[719]"></a>ble_ll_resolv_get_rpa_tmo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_refresh_nrpa
</UL>

<P><STRONG><a name="[677]"></a>ble_ll_resolv_get_priv_addr</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_ll_resolv_get_priv_addr &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_prepare
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_gen_rpa
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_pdu_prepare
</UL>

<P><STRONG><a name="[636]"></a>ble_ll_resolv_set_peer_rpa</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_ll_resolv_set_peer_rpa &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_conn_req_rxd
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_pkt_in
</UL>

<P><STRONG><a name="[680]"></a>ble_ll_resolv_set_local_rpa</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_ll_resolv_set_local_rpa &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_pkt_in
</UL>

<P><STRONG><a name="[604]"></a>ble_ll_resolv_gen_rpa</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_ll_resolv_gen_rpa &rArr; ble_ll_resolv_get_priv_addr &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_get_priv_addr
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_irk_nonzero
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rpa_update
</UL>

<P><STRONG><a name="[682]"></a>ble_ll_resolv_rpa</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_ll_resolv_rpa &rArr; ble_hw_encrypt_block
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_encrypt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[5fc]"></a>ble_ll_resolv_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_ll_resolv_init &rArr; npl_tencentos_tiny_callout_init &rArr; tos_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_init
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_resolv_list_size
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_reset
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
</UL>

<P><STRONG><a name="[5ef]"></a>ble_ll_resolv_list_reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_ll_resolv_list_reset &rArr; ble_ll_resolv_init &rArr; npl_tencentos_tiny_callout_init &rArr; tos_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_init
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
</UL>

<P><STRONG><a name="[745]"></a>ble_ll_scan_clean_cur_aux_data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_ll_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_execute_item
</UL>

<P><STRONG><a name="[681]"></a>ble_ll_scan_sm_stop</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_sm_stop &rArr; ble_ll_scan_rfclk_chk_stop &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_get
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rfclk_chk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create_cancel
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_reset
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_pkt_in
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_set_enable
</UL>

<P><STRONG><a name="[61e]"></a>ble_ll_scan_chk_resume</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_chk_resume &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_send
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_get
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_window_chk
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_timeout
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_end
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_pkt_in
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_interrupted_event_cb
</UL>

<P><STRONG><a name="[5d2]"></a>ble_ll_scan_rx_isr_start</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_ll_scan_rx_isr_start &rArr; ble_ll_scan_req_backoff
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_disable
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_backoff
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_start
</UL>

<P><STRONG><a name="[67d]"></a>ble_ll_scan_adv_decode_addr</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_ll_scan_adv_decode_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_get_addr_type
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_pkt_in
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[733]"></a>ble_ll_scan_interrupted</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_interrupted &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_wfr_timer_exp
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
</UL>

<P><STRONG><a name="[5d7]"></a>ble_ll_scan_rx_isr_end</STRONG> (Thumb, 540 bytes, Stack size 104 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_rx_isr_end &rArr; ble_ll_scan_interrupted &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_adv_decode_addr
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_rpa
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_match
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enabled
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_resolv_list_match
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_rpa
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_interrupted
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_have_rxd_scan_rsp
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_pdu_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_end
</UL>

<P><STRONG><a name="[734]"></a>ble_ll_scan_timer_cb</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_timer_cb &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_scan.o(.text)
</UL>
<P><STRONG><a name="[5b9]"></a>ble_ll_scan_wfr_timer_exp</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_wfr_timer_exp &rArr; ble_ll_scan_interrupted &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_restart_rx
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_setchan
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_interrupted
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_window_chk
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_get_chan_to_scan
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_backoff
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_timer_exp
</UL>

<P><STRONG><a name="[5c4]"></a>ble_ll_scan_rx_pkt_in</STRONG> (Thumb, 434 bytes, Stack size 88 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_rx_pkt_in &rArr; ble_ll_scan_send_adv_report &rArr; os_mbuf_adj &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_adv_decode_addr
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_rpa
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enabled
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_get_our_devaddr
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_rpa
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_dup_check_legacy
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_filter_policy
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_send_adv_report
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_add_scan_rsp_adv
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_backoff
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pkt_in
</UL>

<P><STRONG><a name="[6eb]"></a>ble_ll_scan_set_scan_params</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_ll_scan_set_scan_params
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6ec]"></a>ble_ll_scan_set_enable</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_set_enable &rArr; ble_ll_scan_sm_start &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_stop
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[74b]"></a>ble_ll_scan_can_chg_whitelist</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_scan_can_chg_whitelist
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_chg_allowed
</UL>

<P><STRONG><a name="[69e]"></a>ble_ll_scan_initiator_start</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_initiator_start &rArr; ble_ll_scan_sm_start &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create
</UL>

<P><STRONG><a name="[5b1]"></a>ble_ll_scan_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_ll_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_set_random_addr
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_controller_busy
</UL>

<P><STRONG><a name="[696]"></a>ble_ll_scan_get_peer_rpa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_ll_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
</UL>

<P><STRONG><a name="[695]"></a>ble_ll_scan_get_local_rpa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_ll_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
</UL>

<P><STRONG><a name="[67f]"></a>ble_ll_scan_set_peer_rpa</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_ll_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_pkt_in
</UL>

<P><STRONG><a name="[67a]"></a>ble_ll_scan_get_pdu_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_ll_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_tx_pducb
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[67e]"></a>ble_ll_scan_whitelist_enabled</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_ll_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_pkt_in
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[5e7]"></a>ble_ll_scan_reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_reset &rArr; ble_ll_scan_sm_stop &rArr; ble_ll_scan_rfclk_chk_stop &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_stop
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_clear
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_common_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
</UL>

<P><STRONG><a name="[5fa]"></a>ble_ll_scan_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_init &rArr; ble_ll_scan_common_init &rArr; os_cputime_timer_init &rArr; hal_timer_set_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_common_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
</UL>

<P><STRONG><a name="[670]"></a>ble_ll_sched_conn_reschedule</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_conn_reschedule &rArr; ble_ll_adv_event_rmvd_from_sched &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_is_lru
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_event_rmvd_from_sched
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_send
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_timer_start
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_overlaps_current
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_is_overlap
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_end
</UL>

<P><STRONG><a name="[683]"></a>ble_ll_sched_master_new</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_master_new &rArr; os_cputime_timer_start &rArr; hal_timer_start_at &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_ticks_to_usecs
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_insert_if_empty
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_is_overlap
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[675]"></a>ble_ll_sched_slave_new</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_slave_new &rArr; ble_ll_sched_conn_overlap &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_timer_start
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_insert_if_empty
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_overlap
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_overlaps_current
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_is_overlap
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
</UL>

<P><STRONG><a name="[627]"></a>ble_ll_sched_adv_new</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_adv_new &rArr; ble_ll_xcvr_rfclk_timer_start &rArr; os_cputime_timer_start &rArr; hal_timer_start_at &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_timer_start
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_insert_if_empty
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_is_overlap
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_start
</UL>

<P><STRONG><a name="[742]"></a>ble_ll_sched_periodic_adv</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, ble_ll_sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_timer_start
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_insert_if_empty
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_is_overlap
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
</UL>

<P><STRONG><a name="[63a]"></a>ble_ll_sched_adv_reschedule</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_adv_reschedule &rArr; ble_ll_xcvr_rfclk_timer_start &rArr; os_cputime_timer_start &rArr; hal_timer_start_at &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_timer_start
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_insert_if_empty
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_is_overlap
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_reschedule_event
</UL>

<P><STRONG><a name="[63c]"></a>ble_ll_sched_adv_resched_pdu</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_adv_resched_pdu &rArr; os_cputime_timer_start &rArr; hal_timer_start_at &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_get
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_insert_if_empty
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_is_overlap
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
</UL>

<P><STRONG><a name="[61c]"></a>ble_ll_sched_rmv_elem</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_rmv_elem &rArr; os_cputime_timer_start &rArr; hal_timer_start_at &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_end
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_drop_event
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[743]"></a>ble_ll_sched_rmv_elem_type</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ble_ll_sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
</UL>

<P><STRONG><a name="[64e]"></a>ble_ll_sched_next_time</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_next_time &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_get_next_sched_time
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rfclk_chk_restart
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rfclk_chk_stop
</UL>

<P><STRONG><a name="[61f]"></a>ble_ll_sched_rfclk_chk_restart</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_rfclk_chk_restart &rArr; ble_ll_xcvr_rfclk_timer_start &rArr; os_cputime_timer_start &rArr; hal_timer_start_at &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_next_time
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_stop
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_get
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_timer_start
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_end
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
</UL>

<P><STRONG><a name="[5e6]"></a>ble_ll_sched_stop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_stop &rArr; os_cputime_timer_stop &rArr; hal_timer_stop &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
</UL>

<P><STRONG><a name="[5eb]"></a>ble_ll_sched_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ble_ll_sched_init &rArr; os_cputime_timer_init &rArr; hal_timer_set_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
</UL>

<P><STRONG><a name="[624]"></a>ble_ll_utils_calc_access_addr</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, ble_ll_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_ll_utils_calc_access_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_pop
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_master_common_init
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_start
</UL>

<P><STRONG><a name="[648]"></a>ble_ll_utils_remapped_channel</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ble_ll_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_ll_utils_remapped_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_dci_csa2
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_calc_dci_csa1
</UL>

<P><STRONG><a name="[66d]"></a>ble_ll_utils_calc_num_used_chans</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_ll_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_utils_calc_num_used_chans
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_set_chan_class
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_next_event
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_slave_start
</UL>

<P><STRONG><a name="[64a]"></a>ble_ll_utils_calc_dci_csa2</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, ble_ll_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_ll_utils_calc_dci_csa2 &rArr; ble_ll_utils_remapped_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_remapped_channel
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_csa2_prng
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_calc_dci
</UL>

<P><STRONG><a name="[66e]"></a>ble_ll_utils_calc_window_widening</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ble_ll_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_ll_utils_calc_window_widening &rArr; os_cputime_ticks_to_usecs
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_ticks_to_usecs
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_next_event
</UL>

<P><STRONG><a name="[5ee]"></a>ble_ll_whitelist_clear</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_ll_whitelist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_whitelist_clear &rArr; ble_ll_whitelist_chg_allowed &rArr; ble_ll_scan_can_chg_whitelist
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_chg_allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6ed]"></a>ble_ll_whitelist_read_size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_ll_whitelist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[634]"></a>ble_ll_whitelist_match</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_ll_whitelist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_ll_whitelist_match &rArr; ble_ll_whitelist_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_search
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_req
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[6ee]"></a>ble_ll_whitelist_add</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_ll_whitelist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_ll_whitelist_add &rArr; ble_ll_whitelist_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_search
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_chg_allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6ef]"></a>ble_ll_whitelist_rmv</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_ll_whitelist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_ll_whitelist_rmv &rArr; ble_ll_whitelist_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_search
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_chg_allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[614]"></a>ble_ll_whitelist_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_ll_whitelist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>

<P><STRONG><a name="[615]"></a>ble_ll_whitelist_disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_ll_whitelist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>

<P><STRONG><a name="[72e]"></a>ble_ll_xcvr_rfclk_state</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ble_ll_xcvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_ll_xcvr_rfclk_state &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_is_in_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
</UL>

<P><STRONG><a name="[74e]"></a>ble_ll_xcvr_rfclk_enable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_ll_xcvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_xcvr_rfclk_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rfclk_enable
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_is_in_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_start_now
</UL>

<P><STRONG><a name="[725]"></a>ble_ll_xcvr_rfclk_disable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_ll_xcvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_xcvr_rfclk_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rfclk_disable
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_is_in_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rfclk_chk_restart
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_stop
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rfclk_chk_stop
</UL>

<P><STRONG><a name="[5ed]"></a>ble_ll_xcvr_rfclk_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_ll_xcvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_ll_xcvr_rfclk_stop &rArr; os_cputime_timer_stop &rArr; hal_timer_stop &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rfclk_chk_restart
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
</UL>

<P><STRONG><a name="[72f]"></a>ble_ll_xcvr_rfclk_time_till_settled</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_ll_xcvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_ll_xcvr_rfclk_time_till_settled &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
</UL>

<P><STRONG><a name="[730]"></a>ble_ll_xcvr_rfclk_start_now</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_ll_xcvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_xcvr_rfclk_start_now &rArr; ble_ll_xcvr_rfclk_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_timer_exp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
</UL>

<P><STRONG><a name="[5d]"></a>ble_ll_xcvr_rfclk_timer_exp</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_ll_xcvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_ll_xcvr_rfclk_timer_exp &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_start_now
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll.o(.text)
</UL>
<P><STRONG><a name="[740]"></a>ble_ll_xcvr_rfclk_timer_start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ble_ll_xcvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_ll_xcvr_rfclk_timer_start &rArr; os_cputime_timer_start &rArr; hal_timer_start_at &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_slave_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rfclk_chk_restart
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_reschedule
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_new
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_periodic_adv
</UL>

<P><STRONG><a name="[2c8]"></a>put_le16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, endian.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_group_type_entry_write
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_type_value_entry
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_info
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array16
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access_locked
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_def_access
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_inc_access
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_read_phy
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_read_chan_map
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_le_conn_param_reply
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_lt_key_req_neg_reply
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_host_num_comp_pkts_entry
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_host_buf_size
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_write_hdr
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_read_remote_feat
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_phy
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_set_data_len
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_read_rssi
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_start_encrypt
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_conn_param_neg_reply
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_conn_param_reply
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_lt_key_req_reply
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_conn_update
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_create_connection
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_scan_params
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_disconnect
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_adv_params
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_hdr_prepend
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_prepend_hdr
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_wr_auth_pyld_tmo
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_auth_pyld_tmo
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_neg_reply
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_reply
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_set_data_len
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_chan_map
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_rssi
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_param_reply
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_used_feat
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_ltk_req
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_datalen_chg
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_conn_update
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_disconn_comp_event_send
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_auth_pyld_tmo_event_send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_tx_pducb
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_le_csa
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_send_noop
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_num_comp_pkts_event_send
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_cmd_proc
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_read_rf_path_compensation
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_rd_max_data_len
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_rd_sugg_data_len
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_read_bufsize
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_rd_local_version
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rem_conn_parm_req
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_ver
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_encrypt_chg
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_upd_make
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_chanmap_req_make
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_version_ind_make
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_pdu_make
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_datalen_upd_make
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_enc_req_make
</UL>

<P><STRONG><a name="[46d]"></a>put_le32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, endian.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid32
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_tx_pducb
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_send_vendor_err
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_read_local_features
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_feature_req
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
</UL>

<P><STRONG><a name="[4b4]"></a>put_le64</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, endian.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = put_le64
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_start_encrypt
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_event_mask
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_set_event_mask
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_ltk_req
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_read_supp_states
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_enc_req_make
</UL>

<P><STRONG><a name="[241]"></a>get_le16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, endian.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_mult_rsp
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_parse_read_group_type_adata
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_parse_find_info_entry
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_one_field
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access_locked
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_adata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_adata
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_adata
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_read_rssi
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_read_chan_map
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_set_data_len
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_data_hdr_strip
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_phy_update_complete
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_conn_parm_req
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_lt_key_req
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_conn_upd_complete
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_rd_rem_used_feat_complete
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_conn_complete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_enc_key_refresh
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_encrypt_change
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_hdr_prepend
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_cmd_status
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_cmd_complete
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_cmd_status_disp
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_cmd_complete_disp
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_cmd_comp_info_params
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_auth_pyld_tmo_disp
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_num_comp_pkts_disp
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_rd_rem_ver_disp
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_encrypt_refresh_disp
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_encrypt_chg_disp
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_disconn_comp_disp
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_le_event_disp
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_parse_hdr
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_buf_sz_tx
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_le_read_buf_sz_tx
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_wr_auth_pyld_tmo
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_auth_pyld_tmo
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_neg_reply
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_reply
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_start_encrypt
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_set_data_len
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_chan_map
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_rssi
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_rem_ver_cmd
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_disconnect_cmd
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_param_reply
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_update
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_read_rem_features
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_process_conn_params
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_slave_start
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_adv_params
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_tx_pkt_in
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_set_scan_params
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_rpa_tmo
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_cmd_proc
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_write_rf_path_compensation
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_wr_sugg_data_len
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_chanmap_req
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_version_ind
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_conn_update
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_enc_req
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_pdu_proc
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_len_proc
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_whitelist_rmv
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_whitelist_add
</UL>

<P><STRONG><a name="[33e]"></a>get_le32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, endian.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_rd_rem_sup_feat_complete
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_cmd_complete_disp
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_cmd_comp_info_params
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_le_event_disp
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_le_read_sup_f_tx
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_slave_start
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_whitelist_rmv
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_whitelist_add
</UL>

<P><STRONG><a name="[4f1]"></a>get_le64</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, endian.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_le64
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_lt_key_req
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_start_encrypt
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_enc_req
</UL>

<P><STRONG><a name="[819]"></a>put_be16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, endian.o(.text), UNUSED)

<P><STRONG><a name="[81a]"></a>put_be32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, endian.o(.text), UNUSED)

<P><STRONG><a name="[81b]"></a>put_be64</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, endian.o(.text), UNUSED)

<P><STRONG><a name="[81c]"></a>get_be16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, endian.o(.text), UNUSED)

<P><STRONG><a name="[81d]"></a>get_be32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, endian.o(.text), UNUSED)

<P><STRONG><a name="[81e]"></a>get_be64</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, endian.o(.text), UNUSED)

<P><STRONG><a name="[588]"></a>swap_in_place</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, endian.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = swap_in_place
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_encrypt
</UL>

<P><STRONG><a name="[585]"></a>swap_buf</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, endian.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = swap_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_encrypt
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_reply
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_start_encrypt
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_add
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_encrypt
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_enc_req
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_enc_rsp
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_enc_req_make
</UL>

<P><STRONG><a name="[75b]"></a>nrf52_timer5_irq_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = nrf52_timer5_irq_handler &rArr; hal_rtc_timer_irq_handler &rArr; hal_timer_chk_queue &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_timer_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_timer.o(.text)
</UL>
<P><STRONG><a name="[75c]"></a>hal_timer_init</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_set_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[75e]"></a>hal_timer_config</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = hal_timer_config &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_init
</UL>

<P><STRONG><a name="[75f]"></a>hal_timer_deinit</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, hal_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>

<P><STRONG><a name="[81f]"></a>hal_timer_get_resolution</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, hal_timer.o(.text), UNUSED)

<P><STRONG><a name="[760]"></a>hal_timer_read</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_read_bsptimer
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_read_timer_cntr
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_delay
</UL>

<P><STRONG><a name="[761]"></a>hal_timer_delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hal_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_read
</UL>

<P><STRONG><a name="[773]"></a>hal_timer_set_cb</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_timer_set_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_init
</UL>

<P><STRONG><a name="[762]"></a>hal_timer_start_at</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = hal_timer_start_at &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_set_ocmp
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_relative
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_start
</UL>

<P><STRONG><a name="[763]"></a>hal_timer_start</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hal_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_start_at
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_read_bsptimer
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_read_timer_cntr
</UL>

<P><STRONG><a name="[764]"></a>hal_timer_stop</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = hal_timer_stop &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_disable_ocmp
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_disable_ocmp
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_set_ocmp
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
</UL>

<P><STRONG><a name="[766]"></a>mem_malloc_mempool</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mempool_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mbuf_pool
</UL>

<P><STRONG><a name="[767]"></a>mem_malloc_mempool_ext</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_ext_init
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mempool_gen
</UL>

<P><STRONG><a name="[769]"></a>mem_malloc_mbuf_pool</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pool_init
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mempool
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mbufpkt_pool
</UL>

<P><STRONG><a name="[76b]"></a>mem_malloc_mbufpkt_pool</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mbuf_pool
</UL>

<P><STRONG><a name="[4a7]"></a>mem_init_mbuf_pool</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mem_init_mbuf_pool &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_init
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init_once
</UL>

<P><STRONG><a name="[4a4]"></a>mem_split_frag</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_trim_front
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
</UL>

<P><STRONG><a name="[210]"></a>nimble_port_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nimble_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = nimble_port_init &rArr; ble_ll_init &rArr; ble_ll_conn_module_init &rArr; ble_ll_conn_module_reset &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_init
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_init
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_init
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_ram_init
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>nimble_port_run</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nimble_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = nimble_port_run &rArr; npl_tencentos_tiny_eventq_get &rArr; tos_msg_q_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[20c]"></a>nimble_port_get_dflt_eventq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nimble_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_boot
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_start
</UL>

<P><STRONG><a name="[3e]"></a>nimble_port_ll_task_func</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nimble_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = nimble_port_ll_task_func &rArr; ble_ll_task &rArr; npl_tencentos_tiny_eventq_get &rArr; tos_msg_q_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nimble_port_tencentos_tiny.o(.text)
</UL>
<P><STRONG><a name="[76f]"></a>os_cputime_init</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os_cputime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = os_cputime_init &rArr; hal_timer_config &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[626]"></a>os_cputime_get32</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_cputime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_master_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_terminate_start
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_get_ce_end_time
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rfclk_chk_restart
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_timer_exp
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_wfr_timer_exp
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_execute_item
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_time_till_settled
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_state
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_start
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rfclk_chk_stop
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_start_now
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_relative
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_delay_ticks
</UL>

<P><STRONG><a name="[771]"></a>os_cputime_delay_ticks</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_cputime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_delay_usecs
</UL>

<P><STRONG><a name="[772]"></a>os_cputime_delay_usecs</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_cputime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_delay_ticks
</UL>

<P><STRONG><a name="[5f7]"></a>os_cputime_timer_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, os_cputime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = os_cputime_timer_init &rArr; hal_timer_set_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_set_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_init
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_common_init
</UL>

<P><STRONG><a name="[731]"></a>os_cputime_timer_start</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_cputime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = os_cputime_timer_start &rArr; hal_timer_start_at &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_start_at
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_slave_new
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_master_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_reschedule
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_resched_pdu
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_new
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_timer_start
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem_type
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_periodic_adv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_run
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
</UL>

<P><STRONG><a name="[774]"></a>os_cputime_timer_relative</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_cputime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_start_at
</UL>

<P><STRONG><a name="[72a]"></a>os_cputime_timer_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cputime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = os_cputime_timer_stop &rArr; hal_timer_stop &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_slave_new
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_master_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_stop
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_reschedule
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_resched_pdu
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_new
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_stop
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_stop
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_timer_start
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem_type
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_periodic_adv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
</UL>

<P><STRONG><a name="[5f6]"></a>os_cputime_usecs_to_ticks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cputime_pwr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_cputime_usecs_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_slave_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_terminate_start
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_end
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_next_event
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_calc_itvl_ticks
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_reschedule_event
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_start
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_scheduled
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_sched
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_init
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_window_chk
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_get_current_scan_win
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_start_isr
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_relative
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_delay_usecs
</UL>

<P><STRONG><a name="[643]"></a>os_cputime_ticks_to_usecs</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_cputime_pwr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_cputime_ticks_to_usecs
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_window_widening
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_master_new
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_next_event
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_can_send_next_pdu
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_calc_itvl_ticks
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_start_isr
</UL>

<P><STRONG><a name="[820]"></a>os_mqueue_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_mbuf.o(.text), UNUSED)

<P><STRONG><a name="[775]"></a>os_mqueue_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, os_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>

<P><STRONG><a name="[778]"></a>os_mqueue_put</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, os_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_put
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>

<P><STRONG><a name="[789]"></a>os_msys_register</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, os_mbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init_once
</UL>

<P><STRONG><a name="[78a]"></a>os_msys_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_mbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
</UL>

<P><STRONG><a name="[779]"></a>os_mbuf_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get_pkthdr
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_dup
</UL>

<P><STRONG><a name="[5ae]"></a>os_msys_get</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_msys_find_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rxpdu_alloc
</UL>

<P><STRONG><a name="[49e]"></a>os_mbuf_get_pkthdr</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_frag_alloc
</UL>

<P><STRONG><a name="[403]"></a>os_msys_get_pkthdr</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get_pkthdr
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_msys_find_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_val_access
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_gen_pkt
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_param_reply
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_reject_ind_send
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_update_data_mbuf
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rxpdu_alloc
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_start_enc_send
</UL>

<P><STRONG><a name="[821]"></a>os_msys_count</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_mbuf.o(.text), UNUSED)

<P><STRONG><a name="[822]"></a>os_msys_num_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_mbuf.o(.text), UNUSED)

<P><STRONG><a name="[76a]"></a>os_mbuf_pool_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_mbuf_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init_mbuf_pool
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mbuf_pool
</UL>

<P><STRONG><a name="[77b]"></a>os_mbuf_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_trim_front
</UL>

<P><STRONG><a name="[259]"></a>os_mbuf_free_chain</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify_custom
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_rx_event
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write_local
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_local
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_write
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_free
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_indicate
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_notify
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_req
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_free
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_rx_data
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_clear_rx_queue
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_val_access
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_tx
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_tx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_rx_adata
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_read_rsp
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_free
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_gen_pkt
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_remove_rx
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_split_frag
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_free
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_cmd_get
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_append_rx
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_tx_done
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_end
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_adv_data
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_scan_rsp_data
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_update_data_mbuf
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_update_adv_scan_rsp_data
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_pkt_in
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_reset
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rxpdu_alloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_flush_pkt_queue
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pkt_in
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_tx_pkt_in
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_dup
</UL>

<P><STRONG><a name="[1f5]"></a>os_mbuf_append</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_device_info
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_heart_rate
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_type_value_entry
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array16
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid32
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_flat_mbuf
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_hdr
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copyinto
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_update_data_mbuf
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_appearance_read_access
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_device_name_read_access
</UL>

<P><STRONG><a name="[77e]"></a>os_mbuf_off</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_mbuf_off
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpf
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpm
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copyinto
</UL>

<P><STRONG><a name="[2e0]"></a>os_mbuf_appendfrom</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_off
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_insert_prep_entry
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_val_access
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_tx
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_tx
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_split_frag
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_append_rx
</UL>

<P><STRONG><a name="[77f]"></a>os_mbuf_dup</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, os_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_copypkthdr
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_leadingspace
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[22f]"></a>os_mbuf_copydata</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_mbuf_copydata
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_cmd
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_to_flat
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_data_hdr_strip
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_mbuf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_rx
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_parse_hdr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_scan_rsp_legacy_pdu_make
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_legacy_pdu_make
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_tx_mbuf_pducb
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_send_adv_report
</UL>

<P><STRONG><a name="[228]"></a>os_mbuf_adj</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = os_mbuf_adj &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx_handle_unknown_request
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_group_type_rsp
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_mult_rsp
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_type_rsp
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_find_info_rsp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_mtu_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_parse_find_type_value_hinfo
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_parse_find_info_entry
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write_no_rsp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_blob
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_notify
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_type
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_group_type
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_prep_write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_info
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_truncate_to_mtu
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_data_hdr_strip
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_split_frag
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_rx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_tx_pkt_in
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_send_adv_report
</UL>

<P><STRONG><a name="[2ce]"></a>os_mbuf_cmpf</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = os_mbuf_cmpf &rArr; os_mbuf_off
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_off
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_type_value
</UL>

<P><STRONG><a name="[3f2]"></a>os_mbuf_cmpm</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = os_mbuf_cmpm &rArr; os_mbuf_off
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_off
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_rx_prep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_rx_prep
</UL>

<P><STRONG><a name="[2e3]"></a>os_mbuf_prepend</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = os_mbuf_prepend &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get_pkthdr
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_copypkthdr
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_leadingspace
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_hdr_prepend
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend_pullup
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
</UL>

<P><STRONG><a name="[411]"></a>os_mbuf_pullup</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = os_mbuf_pullup &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_copypkthdr
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access_locked
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_hdr_prepend
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend_pullup
</UL>

<P><STRONG><a name="[530]"></a>os_mbuf_prepend_pullup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = os_mbuf_prepend_pullup &rArr; os_mbuf_pullup &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_prepend_hdr
</UL>

<P><STRONG><a name="[507]"></a>os_mbuf_copyinto</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = os_mbuf_copyinto &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_off
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
</UL>

<P><STRONG><a name="[25a]"></a>os_mbuf_concat</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_mbuf_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_extract
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_indicate
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_notify
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_req
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_append_rx
</UL>

<P><STRONG><a name="[266]"></a>os_mbuf_extend</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_group_type_entry_write
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_type_rsp
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_info
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_mbuf
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access_locked
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_def_access
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_inc_access
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_access
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_cmd_get
</UL>

<P><STRONG><a name="[76c]"></a>os_mbuf_trim_front</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = os_mbuf_trim_front &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_leadingspace
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_split_frag
</UL>

<P><STRONG><a name="[2ec]"></a>os_mempool_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, os_mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_periodic_sync_init
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_init
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_init
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init_mbuf_pool
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_init
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_init
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_ram_init
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_ext_init
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mempool
</UL>

<P><STRONG><a name="[768]"></a>os_mempool_ext_init</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, os_mempool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mempool_ext
</UL>

<P><STRONG><a name="[72c]"></a>os_mempool_clear</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os_mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_mempool_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_reset
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_start
</UL>

<P><STRONG><a name="[782]"></a>os_memblock_from</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os_mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_memblock_from
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_free
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_is_sane
</UL>

<P><STRONG><a name="[781]"></a>os_mempool_is_sane</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_mempool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_from
</UL>

<P><STRONG><a name="[2ae]"></a>os_memblock_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_alloc
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_alloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_entry_alloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_alloc
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_enqueue_hci_event
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_conn_init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_alloc
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_alloc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_periodic_sync_alloc
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_dup_check_legacy
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
</UL>

<P><STRONG><a name="[785]"></a>os_memblock_put_from_cb</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, os_mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>

<P><STRONG><a name="[2b0]"></a>os_memblock_put</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, os_mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put_from_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_free
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_entry_free
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_free
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_free
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_rx_hci_ev
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_free
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_free
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_free
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_free
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_periodic_sync_free
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free
</UL>

<P><STRONG><a name="[786]"></a>os_mempool_info_get_next</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_mempool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[76d]"></a>os_msys_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, os_msys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = os_msys_init &rArr; os_msys_init_once &rArr; mem_init_mbuf_pool &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init_once
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[586]"></a>tc_aes128_set_encrypt_key</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, aes_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tc_aes128_set_encrypt_key &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotword
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_encrypt
</UL>

<P><STRONG><a name="[587]"></a>tc_aes_encrypt</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, aes_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tc_aes_encrypt &rArr; shift_rows &rArr; _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_rows
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mult_row_column
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bytes
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_encrypt
</UL>

<P><STRONG><a name="[78f]"></a>_copy</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_rows
</UL>

<P><STRONG><a name="[792]"></a>_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _set
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
</UL>

<P><STRONG><a name="[78d]"></a>_double_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mult_row_column
</UL>

<P><STRONG><a name="[823]"></a>_compare</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, utils.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>ble_hci_trans_cfg_hs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hci_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hci_trans_cfg_hs
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[5fe]"></a>ble_hci_trans_cfg_ll</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hci_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hci_trans_cfg_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
</UL>

<P><STRONG><a name="[4a9]"></a>ble_hci_trans_hs_cmd_tx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_hci_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hci_trans_hs_cmd_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_transport
</UL>

<P><STRONG><a name="[6d6]"></a>ble_hci_trans_ll_evt_tx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_hci_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hci_trans_ll_evt_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>

<P><STRONG><a name="[45b]"></a>ble_hci_trans_hs_acl_tx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_hci_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hci_trans_hs_acl_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_tx_data
</UL>

<P><STRONG><a name="[68b]"></a>ble_hci_trans_ll_acl_tx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_hci_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hci_trans_ll_acl_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
</UL>

<P><STRONG><a name="[4ac]"></a>ble_hci_trans_buf_alloc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_hci_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_alloc_conn_comp_ev
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_used_feat
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_ltk_req
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_datalen_chg
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_conn_update
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_disconn_comp_event_send
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_auth_pyld_tmo_event_send
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_le_csa
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_start
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_send_noop
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_hw_err
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_databuf_overflow
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_num_comp_pkts_event_send
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_send_adv_report
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_send_vendor_err
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rem_conn_parm_req
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_ver
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_encrypt_chg
</UL>

<P><STRONG><a name="[454]"></a>ble_hci_trans_buf_free</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ble_hci_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_hci_trans_buf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_from
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_process
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_enqueue_hci_event
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_ack
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_module_reset
</UL>

<P><STRONG><a name="[824]"></a>ble_hci_trans_set_acl_free_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hci_ram.o(.text), UNUSED)

<P><STRONG><a name="[447]"></a>ble_hci_trans_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hci_ram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_reset
</UL>

<P><STRONG><a name="[770]"></a>ble_hci_ram_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ble_hci_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_hci_ram_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[5f5]"></a>ble_hw_get_public_addr</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ble_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hw_get_public_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
</UL>

<P><STRONG><a name="[825]"></a>ble_hw_get_static_addr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ble_hw.o(.text), UNUSED)

<P><STRONG><a name="[826]"></a>ble_hw_whitelist_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_hw.o(.text), UNUSED)

<P><STRONG><a name="[793]"></a>ble_hw_whitelist_add</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_hw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
</UL>

<P><STRONG><a name="[794]"></a>ble_hw_whitelist_rmv</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ble_hw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
</UL>

<P><STRONG><a name="[827]"></a>ble_hw_whitelist_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hw.o(.text), UNUSED)

<P><STRONG><a name="[828]"></a>ble_hw_whitelist_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_hw.o(.text), UNUSED)

<P><STRONG><a name="[829]"></a>ble_hw_whitelist_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_hw.o(.text), UNUSED)

<P><STRONG><a name="[82a]"></a>ble_hw_whitelist_match</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hw.o(.text), UNUSED)

<P><STRONG><a name="[6c5]"></a>ble_hw_encrypt_block</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, ble_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_hw_encrypt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_calc_session_key
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_rpa
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_gen_priv_addr
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_encrypt
</UL>

<P><STRONG><a name="[707]"></a>ble_hw_rng_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ble_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hw_rng_init
</UL>
<BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_set_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_init
</UL>

<P><STRONG><a name="[705]"></a>ble_hw_rng_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_start
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_data_get
</UL>

<P><STRONG><a name="[703]"></a>ble_hw_rng_stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ble_hw_rng_stop &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_sample
</UL>

<P><STRONG><a name="[82b]"></a>ble_hw_rng_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_hw.o(.text), UNUSED)

<P><STRONG><a name="[70e]"></a>ble_hw_resolv_list_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_clr
</UL>

<P><STRONG><a name="[710]"></a>ble_hw_resolv_list_add</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hw_resolv_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_add
</UL>

<P><STRONG><a name="[712]"></a>ble_hw_resolv_list_rmv</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_hw_resolv_list_rmv &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_rmv
</UL>

<P><STRONG><a name="[715]"></a>ble_hw_resolv_list_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_init
</UL>

<P><STRONG><a name="[631]"></a>ble_hw_resolv_list_match</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_req
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[7a0]"></a>ble_phy_get_cur_phy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_start_isr
</UL>

<P><STRONG><a name="[5d5]"></a>ble_phy_rxpdu_copy</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_phy_rxpdu_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_end
</UL>

<P><STRONG><a name="[65a]"></a>ble_phy_wfr_enable</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_phy_wfr_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx_end_isr
</UL>

<P><STRONG><a name="[79d]"></a>ble_phy_disable_irq_and_ppi</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_restart_rx
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
</UL>

<P><STRONG><a name="[79c]"></a>ble_phy_stop_usec_timer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
</UL>

<P><STRONG><a name="[5e4]"></a>ble_phy_disable</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ble_phy_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_stop_usec_timer
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable_irq_and_ppi
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_stop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_current_sm_over
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx_set_start_time
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_wfr_timer_exp
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_wfr_timer_exp
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_execute_item
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_start_isr
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_end_isr
</UL>

<P><STRONG><a name="[5dd]"></a>ble_phy_init</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_phy_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_set_isr
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_dbg_time_setup
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_task
</UL>

<P><STRONG><a name="[7a2]"></a>ble_phy_rx</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_phy_rx &rArr; ble_phy_rx_xcvr_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_xcvr_setup
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wait_disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_set_start_time
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_restart_rx
</UL>

<P><STRONG><a name="[64b]"></a>ble_phy_encrypt_enable</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_phy_encrypt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_start_rx_encrypt
</UL>

<P><STRONG><a name="[64c]"></a>ble_phy_encrypt_set_pkt_cntr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_phy_encrypt_set_pkt_cntr
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_continue_rx_encrypt
</UL>

<P><STRONG><a name="[60e]"></a>ble_phy_encrypt_disable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_start_rx_unencrypt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>

<P><STRONG><a name="[612]"></a>ble_phy_set_txend_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_send
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_req
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>

<P><STRONG><a name="[60d]"></a>ble_phy_tx_set_start_time</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_phy_tx_set_start_time &rArr; ble_phy_set_start_time
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_start_time
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
</UL>

<P><STRONG><a name="[659]"></a>ble_phy_rx_set_start_time</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ble_phy_rx_set_start_time &rArr; ble_phy_set_start_now &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_start_now
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_start_time
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>

<P><STRONG><a name="[613]"></a>ble_phy_tx</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ble_phy_tx &rArr; ble_phy_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_get_ccm_datarate
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wait_disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_connect_ind_send
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_req
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
</UL>

<P><STRONG><a name="[6e4]"></a>ble_phy_txpower_round</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_txpwr_set
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_read_tx_power
</UL>

<P><STRONG><a name="[5de]"></a>ble_phy_txpwr_set</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ble_phy_txpwr_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_txpower_round
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_halt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_done
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_task
</UL>

<P><STRONG><a name="[7a5]"></a>ble_phy_set_access_addr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_phy_set_access_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_apply_errata_102_106_107
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_setchan
</UL>

<P><STRONG><a name="[82c]"></a>ble_phy_txpwr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_phy.o(.text), UNUSED)

<P><STRONG><a name="[6e7]"></a>ble_phy_set_rx_pwr_compensation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_write_rf_path_compensation
</UL>

<P><STRONG><a name="[60c]"></a>ble_phy_setchan</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_phy_setchan &rArr; ble_phy_set_access_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_access_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_wfr_timer_exp
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>

<P><STRONG><a name="[684]"></a>ble_phy_restart_rx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_phy_restart_rx &rArr; ble_phy_set_start_now &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable_irq_and_ppi
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_start_now
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_wfr_timer_exp
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[5ce]"></a>ble_phy_access_addr_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_start
</UL>

<P><STRONG><a name="[82d]"></a>ble_phy_state_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_phy.o(.text), UNUSED)

<P><STRONG><a name="[5b5]"></a>ble_phy_rx_started</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_timer_exp
</UL>

<P><STRONG><a name="[5b6]"></a>ble_phy_xcvr_state_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_timer_exp
</UL>

<P><STRONG><a name="[691]"></a>ble_phy_max_data_pdu_pyld</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_module_reset
</UL>

<P><STRONG><a name="[610]"></a>ble_phy_resolv_list_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>

<P><STRONG><a name="[611]"></a>ble_phy_resolv_list_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>

<P><STRONG><a name="[74f]"></a>ble_phy_rfclk_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_enable
</UL>

<P><STRONG><a name="[750]"></a>ble_phy_rfclk_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_disable
</UL>

<P><STRONG><a name="[82e]"></a>ble_svc_gap_device_name</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_svc_gap.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>ble_svc_gap_device_name_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_svc_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_svc_gap_device_name_set &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_boot
</UL>

<P><STRONG><a name="[82f]"></a>ble_svc_gap_device_appearance</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_svc_gap.o(.text), UNUSED)

<P><STRONG><a name="[830]"></a>ble_svc_gap_device_appearance_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_svc_gap.o(.text), UNUSED)

<P><STRONG><a name="[831]"></a>ble_svc_gap_set_chr_changed_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_svc_gap.o(.text), UNUSED)

<P><STRONG><a name="[7ab]"></a>ble_svc_gap_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ble_svc_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_count_cfg
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[7bd]"></a>ble_store_ram_read</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_store_ram_read &rArr; ble_store_ram_read_peer_sec &rArr; ble_store_ram_find_sec &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read_cccd
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read_peer_sec
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read_our_sec
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_print_key_sec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_store_ram.o(.text)
</UL>
<P><STRONG><a name="[7be]"></a>ble_store_ram_write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_store_ram_write &rArr; ble_store_ram_write_peer_sec &rArr; ble_store_ram_find_sec &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_cccd
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_peer_sec
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_our_sec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_store_ram.o(.text)
</UL>
<P><STRONG><a name="[7bf]"></a>ble_store_ram_delete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_store_ram_delete &rArr; ble_store_ram_delete_peer_sec &rArr; ble_store_ram_delete_sec &rArr; ble_store_ram_find_sec &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_cccd
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_peer_sec
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_our_sec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_store_ram.o(.text)
</UL>
<P><STRONG><a name="[76e]"></a>ble_store_ram_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_store_ram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[832]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[833]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[834]"></a>__I$use$heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_hmsm
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick2millisec
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_time_ticks_to_ms
</UL>

<P><STRONG><a name="[835]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_default_walker
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_remove
</UL>

<P><STRONG><a name="[5ac]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_str
</UL>

<P><STRONG><a name="[48a]"></a>__2snprintf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_le_event_disp
</UL>

<P><STRONG><a name="[7c3]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[7c4]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[7c2]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[109]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[10b]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[836]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[7c6]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[5f1]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_seed_prng
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[111]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[33b]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpm
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_addr_cmp
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_peer_sec
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_persist_keys
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_our_irk
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_periodic_sync_find
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_set_global_chanmap
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_is_peer_adv
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_slave_start
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_conn_req_rxd
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_req
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_already_connected
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_our_devaddr
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_valid_random_addr
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_addr_empty
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_iter_unique_peer
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_search
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_dup_check_legacy
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_dup_update_legacy
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_have_rxd_scan_rsp
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_on_resolv_list
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_addr_cmp
</UL>

<P><STRONG><a name="[1f7]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_device_name_set
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_device_info
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_send_vendor_err
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_device_name_read_access
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_device_name_set
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_type_rsp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_type_value
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_uuids128
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_flat_mbuf
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_conn_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_any
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copyinto
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_add_to_resolv_list
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_start_encrypt
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_lt_key_req_reply
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_scan_rsp_data
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_adv_data
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_process_ack
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_exec
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_reply_tx
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_start_exec
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_fill_store_value
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_our_irk
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry_hci
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_encrypt_enable
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rxpdu_copy
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_tx_flat_mbuf_pducb
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_copy
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_stk
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_resolv_list_add
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_gen_priv_addr
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_send_vendor_err
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ctlr_bb_cmd_proc
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_rd_local_supp_cmd
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_dup
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[7c9]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[837]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[711]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_rmv
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_obj
</UL>

<P><STRONG><a name="[7ca]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[838]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_report
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_extract_state
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_rx_idata
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_rx_hinfo
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes128_set_encrypt_key
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_copypkthdr
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_trim_front
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_peer_sec
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read_peer_sec
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_our_sec
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read_our_sec
</UL>

<P><STRONG><a name="[839]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[83a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[83b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[797]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_resolv_list_rmv
</UL>

<P><STRONG><a name="[83c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[7cc]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[7cb]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[83d]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[692]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_module_reset
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_phy
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_default_phy
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_scan_rsp_data
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_adv_data
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_ltk
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_reset
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_stk
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_add
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_rd_local_supp_cmd
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[7ce]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[7cd]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_subscribe_event
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_repeat_pairing_event
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_identity_event
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_passkey_event
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_security_initiate
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_phy_update_complete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_l2cap_update_req
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_disconn_complete
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_alloc
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_report
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_connect_cancelled
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_connect_failure
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_finished
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_rx_event
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_entry_alloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_mtu_event
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_alloc
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_fields
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_adata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_adata
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_peer
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_slave_initiate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_connection_broken
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_dir_adv_rpt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_adv_rpt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_conn_complete
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_le_event_disp
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_rx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_retrieve_ltk
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_read_bond
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_exec
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_fill_store_value
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_alloc
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_alloc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_periodic_sync_alloc
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_sm_new
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_init
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_init
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_module_init
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_clear
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_common_init
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_gen_priv_addr
</UL>

<P><STRONG><a name="[83e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[83f]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[7cf]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[787]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_info_get_next
</UL>

<P><STRONG><a name="[840]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[841]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[842]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[843]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[844]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7c5]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7c1]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[81]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[7d0]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[7d1]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[10d]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[7c0]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7d2]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[113]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[118]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[845]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7d3]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[846]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[746]"></a>__ARM_pop</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_ll_utils.o(i.__ARM_pop))
<BR><BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_access_addr
</UL>

<P><STRONG><a name="[7c7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[10f]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[847]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[848]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[122]"></a>lfclk_config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mcu_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[127]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, simple_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[125]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, simple_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_config
</UL>

<P><STRONG><a name="[126]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, simple_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_config
</UL>

<P><STRONG><a name="[132]"></a>errata_182</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[131]"></a>errata_136</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[130]"></a>errata_108</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[12f]"></a>errata_66</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[12e]"></a>errata_57</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[12d]"></a>errata_37</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[12c]"></a>errata_36</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[12b]"></a>errata_32</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[12a]"></a>errata_31</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[129]"></a>errata_16</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[128]"></a>errata_12</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[14b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>

<P><STRONG><a name="[14c]"></a>generic_fls</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>

<P><STRONG><a name="[14d]"></a>__ffs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __ffs &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>

<P><STRONG><a name="[14e]"></a>__fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[14f]"></a>mapping_insert</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
</UL>

<P><STRONG><a name="[150]"></a>mapping_search</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mapping_search &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[15a]"></a>blk_set_prev_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[151]"></a>blk_next</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>

<P><STRONG><a name="[155]"></a>blk_link_next</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[156]"></a>blk_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
</UL>

<P><STRONG><a name="[159]"></a>blk_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_mark_as_used &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[15f]"></a>insert_free_block</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[15d]"></a>remove_free_block</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
</UL>

<P><STRONG><a name="[15c]"></a>blk_remove</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
</UL>

<P><STRONG><a name="[15e]"></a>blk_insert</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_free_block
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[160]"></a>blk_can_split</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blk_can_split
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[161]"></a>blk_split</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[163]"></a>blk_absorb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blk_absorb &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
</UL>

<P><STRONG><a name="[164]"></a>blk_merge_prev</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[165]"></a>blk_merge_next</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
</UL>

<P><STRONG><a name="[166]"></a>blk_trim_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[167]"></a>blk_trim_used</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = blk_trim_used &rArr; blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
</UL>

<P><STRONG><a name="[168]"></a>blk_trim_free_leading</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
</UL>

<P><STRONG><a name="[169]"></a>blk_search_suitable</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = blk_search_suitable &rArr; __ffs &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[16a]"></a>blk_locate_free</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = blk_locate_free &rArr; mapping_search &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[172]"></a>adjust_request_size</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[16b]"></a>blk_prepare_used</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[16f]"></a>mmheap_pool_is_exist</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[17b]"></a>mmheap_pool_unrecord</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
</UL>

<P><STRONG><a name="[16d]"></a>mmheap_ctl_init</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init
</UL>

<P><STRONG><a name="[152]"></a>blk_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[162]"></a>blk_set_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
</UL>

<P><STRONG><a name="[158]"></a>blk_set_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[15b]"></a>blk_set_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[157]"></a>blk_set_prev_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[153]"></a>blk_to_ptr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[154]"></a>offset_to_block</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[176]"></a>align_ptr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
</UL>

<P><STRONG><a name="[17e]"></a>mutex_old_owner_release</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tos_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[18a]"></a>mutex_fresh_owner_mark</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tos_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mutex_fresh_owner_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[199]"></a>pend_list_add</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[197]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
</UL>

<P><STRONG><a name="[196]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>

<P><STRONG><a name="[194]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>

<P><STRONG><a name="[1a5]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[1a0]"></a>readyqueue_prio_highest_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[1a4]"></a>readyqueue_prio_mark</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[1a8]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[1a7]"></a>tos_list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
</UL>

<P><STRONG><a name="[1a2]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[1ad]"></a>sem_do_post</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tos_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post_all
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
</UL>

<P><STRONG><a name="[37]"></a>knl_idle_entry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tos_sys.o(.text)
</UL>
<P><STRONG><a name="[1bb]"></a>task_reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[1bd]"></a>task_mutex_release</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[1be]"></a>task_do_destroy</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[38]"></a>task_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task_exit &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(.text)
</UL>
<P><STRONG><a name="[1c3]"></a>task_highest_pending_prio_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[1bc]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[1c0]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[1c1]"></a>task_state_is_ready</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[39]"></a>task_default_walker</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = task_default_walker &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(.text)
</UL>
<P><STRONG><a name="[1ce]"></a>tick_task_place</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[1cf]"></a>tick_task_takeoff</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[1d0]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_next_expires_get
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>

<P><STRONG><a name="[1da]"></a>timer_place</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tos_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[1db]"></a>timer_takeoff</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tos_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_stop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[1e2]"></a>timer_change</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tos_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_period_change
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_delay_change
</UL>

<P><STRONG><a name="[1dd]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_create
</UL>

<P><STRONG><a name="[1ed]"></a>msg_q_task_recv</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_message_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
</UL>

<P><STRONG><a name="[1ee]"></a>msg_q_do_post</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, tos_message_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_task_recv
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post_all
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post
</UL>

<P><STRONG><a name="[3]"></a>gatt_svr_chr_access_heart_rate</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, gatt_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = gatt_svr_chr_access_heart_rate &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_svr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>gatt_svr_chr_access_device_info</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, gatt_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = gatt_svr_chr_access_device_info &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_svr.o(.data)
</UL>
<P><STRONG><a name="[1fa]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gatt_svr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_register_cb
</UL>

<P><STRONG><a name="[1fe]"></a>blehr_tx_hrate_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = blehr_tx_hrate_stop &rArr; npl_tencentos_tiny_callout_stop &rArr; tos_timer_stop &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_gap_event
</UL>

<P><STRONG><a name="[200]"></a>blehr_tx_hrate_reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blehr_tx_hrate_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_gap_event
</UL>

<P><STRONG><a name="[3a]"></a>blehr_gap_event</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = blehr_gap_event &rArr; blehr_advertise &rArr; ble_gap_adv_set_fields &rArr; ble_hs_adv_set_fields &rArr; adv_set_fields &rArr; ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate_reset
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[203]"></a>blehr_advertise</STRONG> (Thumb, 150 bytes, Stack size 128 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = blehr_advertise &rArr; ble_gap_adv_set_fields &rArr; ble_hs_adv_set_fields &rArr; adv_set_fields &rArr; ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_fields
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_on_sync
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_gap_event
</UL>

<P><STRONG><a name="[3c]"></a>blehr_tx_hrate</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = blehr_tx_hrate &rArr; ble_gattc_notify_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify_custom
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate_reset
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate_stop
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>blehr_on_sync</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = blehr_on_sync &rArr; blehr_advertise &rArr; ble_gap_adv_set_fields &rArr; ble_hs_adv_set_fields &rArr; adv_set_fields &rArr; ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_infer_auto
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[202]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_gap_event
</UL>

<P><STRONG><a name="[3f]"></a>os_callout_timer_cb</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, npl_os_tencenos_tiny.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = os_callout_timer_cb &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_put
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npl_os_tencenos_tiny.o(.text)
</UL>
<P><STRONG><a name="[230]"></a>ble_att_rx_dispatch_entry_find</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ble_att.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx
</UL>

<P><STRONG><a name="[231]"></a>ble_att_inc_rx_stat</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, ble_att.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx
</UL>

<P><STRONG><a name="[22c]"></a>ble_att_rx_handle_unknown_request</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_att.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ble_att_rx_handle_unknown_request &rArr; ble_att_svr_tx_error_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_error_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx
</UL>

<P><STRONG><a name="[40]"></a>ble_att_rx</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ble_att.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ble_att_rx &rArr; ble_att_rx_handle_unknown_request &rArr; ble_att_svr_tx_error_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx_handle_unknown_request
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_inc_rx_stat
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx_dispatch_entry_find
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_get_conn_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.text)
</UL>
<P><STRONG><a name="[240]"></a>ble_att_clt_parse_find_info_entry</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_parse_find_info_entry &rArr; ble_hs_mbuf_pullup_base &rArr; os_mbuf_pullup &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_info
</UL>

<P><STRONG><a name="[246]"></a>ble_att_clt_parse_find_type_value_hinfo</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_parse_find_type_value_hinfo &rArr; ble_hs_mbuf_pullup_base &rArr; os_mbuf_pullup &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_type_value
</UL>

<P><STRONG><a name="[255]"></a>ble_att_clt_parse_read_group_type_adata</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ble_att_clt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_att_clt_parse_read_group_type_adata &rArr; ble_hs_mbuf_pullup_base &rArr; os_mbuf_pullup &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_group_type
</UL>

<P><STRONG><a name="[25c]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_att_clt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_cmd
</UL>

<P><STRONG><a name="[26c]"></a>ble_att_init_parse</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_indicate_rsp_parse
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_indicate_req_parse
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_notify_req_parse
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_exec_write_rsp_parse
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_exec_write_req_parse
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_prep_write_rsp_parse
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_prep_write_req_parse
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_write_cmd_parse
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_write_req_parse
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_group_type_rsp_parse
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_group_type_req_parse
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_mult_rsp_parse
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_mult_req_parse
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_blob_req_parse
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_req_parse
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_type_rsp_parse
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_type_req_parse
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_find_type_value_req_parse
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_find_info_rsp_parse
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_find_info_req_parse
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu_rsp_parse
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu_req_parse
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_error_rsp_parse
</UL>

<P><STRONG><a name="[26e]"></a>ble_att_init_write</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_indicate_rsp_write
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_indicate_req_write
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_notify_req_write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_exec_write_rsp_write
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_exec_write_req_write
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_prep_write_rsp_write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_prep_write_req_write
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_write_cmd_write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_write_req_write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_group_type_rsp_write
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_group_type_req_write
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_mult_rsp_write
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_mult_req_write
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_blob_req_write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_req_write
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_type_rsp_write
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_type_req_write
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_find_type_value_req_write
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_find_info_rsp_write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_find_info_req_write
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu_rsp_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu_req_write
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_error_rsp_write
</UL>

<P><STRONG><a name="[270]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_att_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_indicate_req_log
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_notify_req_log
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_exec_write_req_log
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_prep_write_cmd_log
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_write_req_log
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_write_cmd_log
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_group_type_rsp_log
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_group_type_req_log
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_blob_req_log
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_req_log
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_type_rsp_log
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_read_type_req_log
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_find_type_value_req_log
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_find_info_rsp_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_find_info_req_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu_cmd_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_error_rsp_log
</UL>

<P><STRONG><a name="[2ad]"></a>ble_att_svr_entry_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_entry_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_register
</UL>

<P><STRONG><a name="[2af]"></a>ble_att_svr_entry_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_att_svr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_reset
</UL>

<P><STRONG><a name="[2b2]"></a>ble_att_svr_next_id</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_att_svr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_register
</UL>

<P><STRONG><a name="[2b5]"></a>ble_att_svr_pullup_req_base</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_pullup_req_base &rArr; ble_hs_mbuf_pullup_base &rArr; os_mbuf_pullup &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_mult_rsp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write_no_rsp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_blob
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_notify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_info
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
</UL>

<P><STRONG><a name="[2b6]"></a>ble_att_svr_get_sec_state</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_get_sec_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
</UL>

<P><STRONG><a name="[2b8]"></a>ble_att_svr_check_perms</STRONG> (Thumb, 306 bytes, Stack size 200 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_peer_sec
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_get_sec_state
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
</UL>

<P><STRONG><a name="[2bc]"></a>ble_att_svr_pkt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_pkt &rArr; ble_hs_mbuf_l2cap_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_indicate_rsp
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_write_rsp
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_mult_rsp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_find_type_value_rsp
</UL>

<P><STRONG><a name="[2bd]"></a>ble_att_svr_read</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
</UL>

<P><STRONG><a name="[2be]"></a>ble_att_svr_read_flat</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_read_flat &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_service_uuid
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_type_rsp
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_type_value
</UL>

<P><STRONG><a name="[2c3]"></a>ble_att_svr_write</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_write &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write_handle
</UL>

<P><STRONG><a name="[2c4]"></a>ble_att_svr_write_handle</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_write_handle &rArr; ble_att_svr_write &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_find_by_handle
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write_local
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write_no_rsp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write
</UL>

<P><STRONG><a name="[2c5]"></a>ble_att_svr_tx_rsp</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_tx_rsp &rArr; ble_att_svr_tx_error_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_error_rsp
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_truncate_to_mtu
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_inc_tx_stat
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_mult
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_blob
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_info
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
</UL>

<P><STRONG><a name="[2c6]"></a>ble_att_svr_build_mtu_rsp</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_build_mtu_rsp &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
</UL>

<P><STRONG><a name="[2c7]"></a>ble_att_svr_fill_info</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_fill_info &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_find_info_rsp
</UL>

<P><STRONG><a name="[2c9]"></a>ble_att_svr_build_find_info_rsp</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_build_find_info_rsp &rArr; ble_att_mtu &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_info
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_info
</UL>

<P><STRONG><a name="[2ca]"></a>ble_att_svr_fill_type_value_entry</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_fill_type_value_entry &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_type_value
</UL>

<P><STRONG><a name="[2cb]"></a>ble_att_svr_is_valid_find_group_type</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_att_svr_is_valid_find_group_type
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_is_valid_group_end
</UL>

<P><STRONG><a name="[2cc]"></a>ble_att_svr_is_valid_group_end</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_att_svr_is_valid_group_end &rArr; ble_att_svr_is_valid_find_group_type
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_is_valid_find_group_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_type_value
</UL>

<P><STRONG><a name="[2cd]"></a>ble_att_svr_fill_type_value</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_fill_type_value &rArr; ble_att_svr_read_flat &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_is_valid_group_end
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_type_value_entry
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_find_type_value_rsp
</UL>

<P><STRONG><a name="[2cf]"></a>ble_att_svr_build_find_type_value_rsp</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_build_find_type_value_rsp &rArr; ble_att_svr_fill_type_value &rArr; ble_att_svr_read_flat &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_fill_type_value
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pkt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
</UL>

<P><STRONG><a name="[2d0]"></a>ble_att_svr_build_read_type_rsp</STRONG> (Thumb, 324 bytes, Stack size 104 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_build_read_type_rsp &rArr; ble_att_svr_read_flat &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_find_by_uuid
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
</UL>

<P><STRONG><a name="[2d1]"></a>ble_att_svr_build_read_mult_rsp</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_build_read_mult_rsp &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pkt
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pullup_req_base
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_mult
</UL>

<P><STRONG><a name="[2d2]"></a>ble_att_svr_is_valid_read_group_type</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_att_svr_is_valid_read_group_type
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_group_type_rsp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
</UL>

<P><STRONG><a name="[2d3]"></a>ble_att_svr_service_uuid</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_service_uuid &rArr; ble_att_svr_read_flat &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_group_type_rsp
</UL>

<P><STRONG><a name="[2d5]"></a>ble_att_svr_read_group_type_entry_write</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_read_group_type_entry_write &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_build_read_group_type_rsp
</UL>

<P><STRONG><a name="[2d6]"></a>ble_att_svr_build_read_group_type_rsp</STRONG> (Thumb, 374 bytes, Stack size 88 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_build_read_group_type_rsp &rArr; ble_att_svr_service_uuid &rArr; ble_att_svr_read_flat &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_group_type_entry_write
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_service_uuid
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_is_valid_read_group_type
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
</UL>

<P><STRONG><a name="[2d7]"></a>ble_att_svr_build_write_rsp</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_build_write_rsp &rArr; ble_att_svr_pkt &rArr; ble_hs_mbuf_l2cap_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pkt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write
</UL>

<P><STRONG><a name="[2d9]"></a>ble_att_svr_prep_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_prep_free &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_clear
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_insert_prep_entry
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_extract
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_alloc
</UL>

<P><STRONG><a name="[2da]"></a>ble_att_svr_prep_alloc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_prep_alloc &rArr; ble_hs_mbuf_l2cap_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_free
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_insert_prep_entry
</UL>

<P><STRONG><a name="[2e1]"></a>ble_att_svr_prep_find_prev</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_att_svr_prep_find_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_insert_prep_entry
</UL>

<P><STRONG><a name="[2de]"></a>ble_att_svr_prep_validate</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_att_svr_prep_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_write
</UL>

<P><STRONG><a name="[2dc]"></a>ble_att_svr_prep_extract</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_prep_extract &rArr; ble_att_svr_prep_free &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_free
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_write
</UL>

<P><STRONG><a name="[2dd]"></a>ble_att_svr_prep_write</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_prep_write &rArr; ble_att_svr_write &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_find_by_handle
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_extract
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_validate
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
</UL>

<P><STRONG><a name="[2df]"></a>ble_att_svr_insert_prep_entry</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_insert_prep_entry &rArr; ble_att_svr_prep_alloc &rArr; ble_hs_mbuf_l2cap_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_find_prev
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_alloc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_free
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
</UL>

<P><STRONG><a name="[2e5]"></a>ble_att_svr_build_indicate_rsp</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_build_indicate_rsp &rArr; ble_att_svr_pkt &rArr; ble_hs_mbuf_l2cap_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_pkt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
</UL>

<P><STRONG><a name="[2e7]"></a>ble_att_svr_move_entries</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, ble_att_svr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_restore_range
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_hide_range
</UL>

<P><STRONG><a name="[2ea]"></a>ble_att_svr_free_start_mem</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_att_svr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_att_svr_free_start_mem &rArr; free &rArr; tos_mmheap_free &rArr; blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_start
</UL>

<P><STRONG><a name="[2ee]"></a>ble_gap_log_duration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_disc
</UL>

<P><STRONG><a name="[2f0]"></a>ble_gap_log_conn</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
</UL>

<P><STRONG><a name="[2f1]"></a>ble_gap_log_disc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_duration
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
</UL>

<P><STRONG><a name="[2f2]"></a>ble_gap_log_update</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_log_update
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
</UL>

<P><STRONG><a name="[2f3]"></a>ble_gap_log_wl</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_set
</UL>

<P><STRONG><a name="[2f4]"></a>ble_gap_log_adv</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_log_adv
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
</UL>

<P><STRONG><a name="[2f5]"></a>ble_gap_fill_conn_desc</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_gap_fill_conn_desc &rArr; ble_hs_conn_addrs &rArr; ble_hs_id_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find_by_addr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_to_snapshot
</UL>

<P><STRONG><a name="[2f6]"></a>ble_gap_conn_to_snapshot</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_gap_conn_to_snapshot &rArr; ble_gap_fill_conn_desc &rArr; ble_hs_conn_addrs &rArr; ble_hs_id_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_fill_conn_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_find_snapshot
</UL>

<P><STRONG><a name="[2f7]"></a>ble_gap_find_snapshot</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_gap_find_snapshot &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_to_snapshot
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[2fb]"></a>ble_gap_extract_conn_cb</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
</UL>

<P><STRONG><a name="[306]"></a>ble_gap_call_event_cb</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_call_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt_done
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
</UL>

<P><STRONG><a name="[305]"></a>ble_gap_call_conn_event_cb</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_event_cb
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_extract_conn_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_subscribe_event
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_repeat_pairing_event
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_identity_event
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_passkey_event
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_phy_update_complete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_l2cap_update_req
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_disconn_complete
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_rx_event
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_mtu_event
</UL>

<P><STRONG><a name="[35a]"></a>ble_gap_is_preempted</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_ext_validate
</UL>

<P><STRONG><a name="[307]"></a>ble_gap_master_reset_state</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_gap_master_reset_state &rArr; ble_hs_timer_resched &rArr; ble_hs_timer_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel_no_lock
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_extract_state
</UL>

<P><STRONG><a name="[308]"></a>ble_gap_slave_reset_state</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_gap_slave_reset_state &rArr; ble_hs_timer_resched &rArr; ble_hs_timer_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop_no_lock
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_timer
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_extract_cb
</UL>

<P><STRONG><a name="[30e]"></a>ble_gap_has_client</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_report
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_connect_failure
</UL>

<P><STRONG><a name="[309]"></a>ble_gap_master_extract_state</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_gap_master_extract_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_reset_state
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_report
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_connect_cancelled
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_connect_failure
</UL>

<P><STRONG><a name="[30b]"></a>ble_gap_slave_extract_cb</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_gap_slave_extract_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_reset_state
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_finished
</UL>

<P><STRONG><a name="[30c]"></a>ble_gap_adv_finished</STRONG> (Thumb, 54 bytes, Stack size 80 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_gap_adv_finished &rArr; ble_gap_slave_extract_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_extract_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_timer
</UL>

<P><STRONG><a name="[30d]"></a>ble_gap_master_connect_failure</STRONG> (Thumb, 58 bytes, Stack size 88 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_gap_master_connect_failure &rArr; ble_gap_master_extract_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_extract_state
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_has_client
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_failed
</UL>

<P><STRONG><a name="[30f]"></a>ble_gap_master_connect_cancelled</STRONG> (Thumb, 70 bytes, Stack size 80 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_gap_master_connect_cancelled &rArr; ble_gap_master_extract_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_extract_state
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
</UL>

<P><STRONG><a name="[311]"></a>ble_gap_event_listener_call</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gap_event_listener_call
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_subscribe_event
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_phy_update_complete
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_disconn_complete
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_report
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_rx_event
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_mtu_event
</UL>

<P><STRONG><a name="[310]"></a>ble_gap_disc_report</STRONG> (Thumb, 64 bytes, Stack size 80 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_gap_disc_report &rArr; ble_gap_master_extract_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_call
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_extract_state
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_has_client
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report
</UL>

<P><STRONG><a name="[312]"></a>ble_gap_disc_complete</STRONG> (Thumb, 58 bytes, Stack size 80 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_gap_disc_complete &rArr; ble_gap_master_extract_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_call
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_extract_state
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_has_client
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_timer
</UL>

<P><STRONG><a name="[316]"></a>ble_gap_update_notify</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ble_gap_update_notify &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_call
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_timer
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_l2cap_cb
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_failed
</UL>

<P><STRONG><a name="[317]"></a>ble_gap_master_ticks_until_exp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_gap_master_ticks_until_exp &rArr; ble_npl_time_get &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_timer
</UL>

<P><STRONG><a name="[319]"></a>ble_gap_slave_ticks_until_exp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_gap_slave_ticks_until_exp &rArr; ble_npl_time_get &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_timer
</UL>

<P><STRONG><a name="[31a]"></a>ble_gap_update_next_exp</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_gap_update_next_exp &rArr; ble_npl_time_get &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_timer
</UL>

<P><STRONG><a name="[31b]"></a>ble_gap_master_set_timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
</UL>

<P><STRONG><a name="[31c]"></a>ble_gap_slave_set_timer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_gap_slave_set_timer &rArr; ble_hs_timer_resched &rArr; ble_hs_timer_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
</UL>

<P><STRONG><a name="[31d]"></a>ble_gap_master_failed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gap_master_failed &rArr; ble_gap_master_connect_failure &rArr; ble_gap_master_extract_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_connect_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
</UL>

<P><STRONG><a name="[31e]"></a>ble_gap_update_entry_free</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_gap_update_entry_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_timer
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_l2cap_cb
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_failed
</UL>

<P><STRONG><a name="[320]"></a>ble_gap_update_entry_find</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_update_entry_find
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
</UL>

<P><STRONG><a name="[31f]"></a>ble_gap_update_entry_remove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ble_gap_update_entry_remove &rArr; ble_hs_timer_resched &rArr; ble_hs_timer_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_find
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_timer
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_l2cap_cb
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_failed
</UL>

<P><STRONG><a name="[321]"></a>ble_gap_update_failed</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ble_gap_update_failed &rArr; ble_gap_update_notify &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_free
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
</UL>

<P><STRONG><a name="[32b]"></a>ble_gap_update_to_l2cap</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
</UL>

<P><STRONG><a name="[41]"></a>ble_gap_update_l2cap_cb</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ble_gap_update_l2cap_cb &rArr; ble_gap_update_notify &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_free
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap.o(.text)
</UL>
<P><STRONG><a name="[339]"></a>ble_gap_accept_master_conn</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
</UL>

<P><STRONG><a name="[32f]"></a>ble_gap_adv_active_instance</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_active
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_accept_slave_conn
</UL>

<P><STRONG><a name="[32e]"></a>ble_gap_accept_slave_conn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gap_accept_slave_conn
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_active_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
</UL>

<P><STRONG><a name="[330]"></a>ble_gap_rx_adv_report_sanity_check</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_gap_rx_adv_report_sanity_check &rArr; ble_hs_adv_find_field &rArr; ble_hs_adv_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_find_field
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report
</UL>

<P><STRONG><a name="[333]"></a>ble_gap_rd_rem_sup_feat_tx</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_gap_rd_rem_sup_feat_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_read_remote_feat
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
</UL>

<P><STRONG><a name="[341]"></a>ble_gap_disc_enable_tx</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_gap_disc_enable_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_scan_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_disable_tx
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_timer
</UL>

<P><STRONG><a name="[343]"></a>ble_gap_conn_cancel_tx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ble_gap_conn_cancel_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cancel_no_lock
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_timer
</UL>

<P><STRONG><a name="[344]"></a>ble_gap_master_timer</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_gap_master_timer &rArr; ble_gap_disc_enable_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cancel_tx
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_enable_tx
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_ticks_until_exp
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
</UL>

<P><STRONG><a name="[345]"></a>ble_gap_adv_enable_tx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_gap_adv_enable_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_adv_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop_no_lock
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_timer
</UL>

<P><STRONG><a name="[347]"></a>ble_gap_slave_timer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_gap_slave_timer &rArr; ble_gap_adv_enable_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_enable_tx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_ticks_until_exp
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_finished
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_reset_state
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
</UL>

<P><STRONG><a name="[348]"></a>ble_gap_update_timer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ble_gap_update_timer &rArr; ble_gap_update_notify &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_free
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_next_exp
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
</UL>

<P><STRONG><a name="[34f]"></a>ble_gap_wl_busy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_set
</UL>

<P><STRONG><a name="[34b]"></a>ble_gap_wl_tx_add</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_add_to_whitelist
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_set
</UL>

<P><STRONG><a name="[34d]"></a>ble_gap_wl_tx_clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_wl_set
</UL>

<P><STRONG><a name="[350]"></a>ble_gap_adv_stop_no_lock</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_gap_adv_stop_no_lock &rArr; ble_gap_adv_enable_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_active
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_enable_tx
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_reset_state
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt_no_lock
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop
</UL>

<P><STRONG><a name="[354]"></a>ble_gap_adv_type</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_params_tx
</UL>

<P><STRONG><a name="[353]"></a>ble_gap_adv_dflt_itvls</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_params_tx
</UL>

<P><STRONG><a name="[352]"></a>ble_gap_adv_params_tx</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_gap_adv_params_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_dflt_itvls
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_type
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_adv_params
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
</UL>

<P><STRONG><a name="[356]"></a>ble_gap_adv_validate</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_adv_validate &rArr; ble_hs_conn_can_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_can_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
</UL>

<P><STRONG><a name="[362]"></a>ble_gap_disc_tx_params</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_scan_params
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
</UL>

<P><STRONG><a name="[364]"></a>ble_gap_disc_disable_tx</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gap_disc_disable_tx &rArr; ble_gap_disc_enable_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_enable_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel_no_lock
</UL>

<P><STRONG><a name="[365]"></a>ble_gap_disc_cancel_no_lock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_gap_disc_cancel_no_lock &rArr; ble_gap_disc_disable_tx &rArr; ble_gap_disc_enable_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_active
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_disable_tx
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_reset_state
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt_no_lock
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel
</UL>

<P><STRONG><a name="[368]"></a>ble_gap_disc_ext_validate</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_active
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_active
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_is_preempted
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_validate
</UL>

<P><STRONG><a name="[36c]"></a>ble_gap_disc_fill_dflts</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
</UL>

<P><STRONG><a name="[36a]"></a>ble_gap_disc_validate</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_ext_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
</UL>

<P><STRONG><a name="[36d]"></a>ble_gap_conn_create_tx</STRONG> (Thumb, 158 bytes, Stack size 80 bytes, ble_gap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_create_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
</UL>

<P><STRONG><a name="[370]"></a>ble_gap_conn_cancel_no_lock</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_gap_conn_cancel_no_lock &rArr; ble_gap_conn_cancel_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_active
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cancel_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_preempt_no_lock
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cancel
</UL>

<P><STRONG><a name="[372]"></a>ble_gap_update_entry_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_gap_update_entry_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
</UL>

<P><STRONG><a name="[373]"></a>ble_gap_tx_param_pos_reply</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_gap_tx_param_pos_reply &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_conn_param_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
</UL>

<P><STRONG><a name="[375]"></a>ble_gap_tx_param_neg_reply</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_gap_tx_param_neg_reply &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_conn_param_neg_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
</UL>

<P><STRONG><a name="[378]"></a>ble_gap_update_tx</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_gap_update_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_conn_update
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
</UL>

<P><STRONG><a name="[37b]"></a>ble_gap_validate_conn_params</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
</UL>

<P><STRONG><a name="[318]"></a>ble_npl_time_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ble_npl_time_get &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_set_timer
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_set_timer
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_next_exp
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_slave_ticks_until_exp
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_ticks_until_exp
</UL>

<P><STRONG><a name="[358]"></a>ble_npl_time_ms_to_ticks</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_npl_time_ms_to_ticks &rArr; npl_tencentos_tiny_time_ms_to_ticks &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_time_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
</UL>

<P><STRONG><a name="[32c]"></a>ble_npl_time_ms_to_ticks32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_npl_time_ms_to_ticks32 &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_timer
</UL>

<P><STRONG><a name="[2ef]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_passkey_event
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_adv
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_wl
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_update
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_disc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_conn
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_log_duration
</UL>

<P><STRONG><a name="[3a8]"></a>ble_gattc_dbg_assert_proc_not_inserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_gattc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_rx_rsp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_tmo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_err
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_rx_exec
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_rx_prep
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_err
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_tx
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_tmo
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_cb
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_rx_exec
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_rx_prep
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_err
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_tx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_tmo
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_cb
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_err
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_tmo
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_cb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult_err
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult_tmo
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult_cb
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_rx_read_rsp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_err
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_tx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_tmo
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_cb
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_rx_complete
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_rx_adata
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_err
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_tmo
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_cb
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_rx_read_rsp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_err
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_tmo
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_cb
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_rx_complete
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_rx_idata
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_err
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_tx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_tmo
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_cb
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_complete
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_adata
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_err
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_tx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_tmo
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_cb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_complete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_adata
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_err
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_tx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_tmo
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_cb
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_complete
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_adata
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_read_rsp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_err
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_tx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_tmo
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_rx_complete
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_rx_hinfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_err
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_tx
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_tmo
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_cb
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_rx_complete
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_rx_adata
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_err
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_tx
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_tmo
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_cb
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_err
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_tmo
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_cb
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_timeout
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_insert
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_free
</UL>

<P><STRONG><a name="[395]"></a>ble_gattc_log_proc_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_log_proc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_indicate
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_notify
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_write_reliable
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_write_long
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_write
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read_mult
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read_long
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read_uuid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_all_dscs
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_chr_uuid
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_all_chrs
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_find_inc_svcs
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_svc_uuid
</UL>

<P><STRONG><a name="[397]"></a>ble_gattc_log_uuid</STRONG> (Thumb, 26 bytes, Stack size 48 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_str
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read_uuid
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_chr_uuid
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_svc_uuid
</UL>

<P><STRONG><a name="[398]"></a>ble_gattc_log_disc_svc_uuid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_uuid
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_by_uuid
</UL>

<P><STRONG><a name="[399]"></a>ble_gattc_log_find_inc_svcs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs
</UL>

<P><STRONG><a name="[39a]"></a>ble_gattc_log_disc_all_chrs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs
</UL>

<P><STRONG><a name="[39b]"></a>ble_gattc_log_disc_chr_uuid</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_uuid
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chrs_by_uuid
</UL>

<P><STRONG><a name="[39c]"></a>ble_gattc_log_disc_all_dscs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs
</UL>

<P><STRONG><a name="[39d]"></a>ble_gattc_log_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read
</UL>

<P><STRONG><a name="[39e]"></a>ble_gattc_log_read_uuid</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_uuid
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_by_uuid
</UL>

<P><STRONG><a name="[39f]"></a>ble_gattc_log_read_long</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long
</UL>

<P><STRONG><a name="[3a0]"></a>ble_gattc_log_read_mult</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult
</UL>

<P><STRONG><a name="[3a1]"></a>ble_gattc_log_write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_no_rsp
</UL>

<P><STRONG><a name="[3a2]"></a>ble_gattc_log_write_long</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long
</UL>

<P><STRONG><a name="[3a3]"></a>ble_gattc_log_write_reliable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable
</UL>

<P><STRONG><a name="[3a4]"></a>ble_gattc_log_notify</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_log_notify &rArr; ble_gattc_log_proc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify_custom
</UL>

<P><STRONG><a name="[3a5]"></a>ble_gattc_log_indicate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_log_indicate &rArr; ble_gattc_log_proc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
</UL>

<P><STRONG><a name="[3b0]"></a>ble_gattc_rx_entry_find</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_gattc_rx_entry_find
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_matches_conn_rx_entry
</UL>

<P><STRONG><a name="[3a6]"></a>ble_gattc_proc_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_gattc_proc_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_by_uuid
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chrs_by_uuid
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_by_uuid
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
</UL>

<P><STRONG><a name="[3a7]"></a>ble_gattc_proc_free</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_gattc_proc_free &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_err
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_fail_procs
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>

<P><STRONG><a name="[3a9]"></a>ble_gattc_proc_insert</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_gattc_proc_insert &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>

<P><STRONG><a name="[3aa]"></a>ble_gattc_proc_set_exp_timer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_gattc_proc_set_exp_timer &rArr; ble_npl_time_ms_to_ticks32 &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>

<P><STRONG><a name="[3ad]"></a>ble_gattc_proc_set_resume_timer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_gattc_proc_set_resume_timer &rArr; ble_npl_time_ms_to_ticks32 &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>

<P><STRONG><a name="[3ae]"></a>ble_gattc_process_status</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_gattc_process_status &rArr; ble_gattc_proc_insert &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_set_exp_timer
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_insert
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_write_rsp
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_complete
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_adata
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_rsp
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_mult_rsp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_complete
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_adata
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_blob_rsp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_prep_write_rsp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_mtu
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_indicate_rsp
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_hinfo
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_complete
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_idata
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_complete
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_exec_write_rsp
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate_custom
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_by_uuid
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chrs_by_uuid
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_by_uuid
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_resume_procs
</UL>

<P><STRONG><a name="[3af]"></a>ble_gattc_process_resume_status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ble_gattc_process_resume_status &rArr; ble_gattc_proc_set_resume_timer &rArr; ble_npl_time_ms_to_ticks32 &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_set_resume_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_resume
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_resume
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_resume
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_resume
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_resume
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_resume
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_resume
</UL>

<P><STRONG><a name="[3b9]"></a>ble_gattc_err_dispatch_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_gattc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_err
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_fail_procs
</UL>

<P><STRONG><a name="[3bb]"></a>ble_gattc_resume_dispatch_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_gattc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_resume_procs
</UL>

<P><STRONG><a name="[3be]"></a>ble_gattc_tmo_dispatch_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_gattc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_timeout
</UL>

<P><STRONG><a name="[42]"></a>ble_gattc_proc_matches_conn_op</STRONG> (Thumb, 568 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_proc_matches_conn_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>ble_gattc_proc_matches_expired</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_gattc_proc_matches_expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>ble_gattc_proc_matches_conn_rx_entry</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_gattc_proc_matches_conn_rx_entry &rArr; ble_gattc_rx_entry_find
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_entry_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.text)
</UL>
<P><STRONG><a name="[3b1]"></a>ble_gattc_extract</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_expired
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_stalled
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_by_conn_op
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_one
</UL>

<P><STRONG><a name="[3b2]"></a>ble_gattc_extract_one</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ble_gattc_extract_one &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_with_rx_entry
</UL>

<P><STRONG><a name="[3b3]"></a>ble_gattc_extract_by_conn_op</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_fail_procs
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_first_by_conn_op
</UL>

<P><STRONG><a name="[3b4]"></a>ble_gattc_extract_first_by_conn_op</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ble_gattc_extract_first_by_conn_op &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_by_conn_op
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_write_rsp
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_mult_rsp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_complete
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_adata
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_blob_rsp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_mtu
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_indicate_rsp
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_hinfo
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_complete
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_idata
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_complete
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_err
</UL>

<P><STRONG><a name="[43]"></a>ble_gattc_proc_matches_stalled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_gattc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.text)
</UL>
<P><STRONG><a name="[3b5]"></a>ble_gattc_extract_stalled</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_gattc_extract_stalled &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_resume_procs
</UL>

<P><STRONG><a name="[3b6]"></a>ble_gattc_extract_expired</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ble_gattc_extract_expired &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
</UL>

<P><STRONG><a name="[3b7]"></a>ble_gattc_extract_with_rx_entry</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_gattc_extract_with_rx_entry &rArr; ble_gattc_extract_one &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_one
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_complete
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_adata
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_rsp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_prep_write_rsp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_exec_write_rsp
</UL>

<P><STRONG><a name="[3b8]"></a>ble_gattc_fail_procs</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_gattc_fail_procs &rArr; ble_gattc_extract_by_conn_op &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_by_conn_op
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_err_dispatch_get
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_fail_notconn
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_connection_broken
</UL>

<P><STRONG><a name="[3ba]"></a>ble_gattc_resume_procs</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ble_gattc_resume_procs &rArr; ble_gattc_extract_stalled &rArr; ble_gattc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_stalled
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_resume_dispatch_get
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
</UL>

<P><STRONG><a name="[3bc]"></a>ble_gattc_ticks_until_resume</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ble_gattc_ticks_until_resume &rArr; ble_npl_time_get &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
</UL>

<P><STRONG><a name="[3bd]"></a>ble_gattc_proc_timeout</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_proc_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_tmo_dispatch_get
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
</UL>

<P><STRONG><a name="[3c1]"></a>ble_gattc_error</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_gattc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_cb
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_cb
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_cb
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult_cb
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_cb
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_cb
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_cb
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_cb
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_cb
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_cb
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_cb
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_cb
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_cb
</UL>

<P><STRONG><a name="[3c0]"></a>ble_gattc_mtu_cb</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_mtu_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_mtu
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_err
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_tmo
</UL>

<P><STRONG><a name="[b8]"></a>ble_gattc_mtu_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_mtu_tmo &rArr; ble_gattc_mtu_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>ble_gattc_mtu_err</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_mtu_err &rArr; ble_gattc_mtu_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_mtu_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3c2]"></a>ble_gattc_mtu_tx</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
</UL>

<P><STRONG><a name="[3c4]"></a>ble_gattc_disc_all_svcs_cb</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_disc_all_svcs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_rx_complete
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_rx_adata
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_err
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_resume
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_tmo
</UL>

<P><STRONG><a name="[b9]"></a>ble_gattc_disc_all_svcs_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_disc_all_svcs_tmo &rArr; ble_gattc_disc_all_svcs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3c5]"></a>ble_gattc_disc_all_svcs_tx</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_all_svcs_tx &rArr; ble_att_clt_tx_read_group_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_resume
</UL>

<P><STRONG><a name="[af]"></a>ble_gattc_disc_all_svcs_resume</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_all_svcs_resume &rArr; ble_gattc_disc_all_svcs_tx &rArr; ble_att_clt_tx_read_group_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_tx
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_cb
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_rx_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>ble_gattc_disc_all_svcs_err</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_disc_all_svcs_err &rArr; ble_gattc_disc_all_svcs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3c6]"></a>ble_gattc_disc_all_svcs_rx_adata</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_gattc_disc_all_svcs_rx_adata &rArr; ble_gattc_disc_all_svcs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_adata
</UL>

<P><STRONG><a name="[3c8]"></a>ble_gattc_disc_all_svcs_rx_complete</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_all_svcs_rx_complete &rArr; ble_gattc_disc_all_svcs_resume &rArr; ble_gattc_disc_all_svcs_tx &rArr; ble_att_clt_tx_read_group_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_resume
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_complete
</UL>

<P><STRONG><a name="[3ca]"></a>ble_gattc_disc_svc_uuid_cb</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_disc_svc_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_rx_complete
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_rx_hinfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_err
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_resume
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_tmo
</UL>

<P><STRONG><a name="[ba]"></a>ble_gattc_disc_svc_uuid_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_disc_svc_uuid_tmo &rArr; ble_gattc_disc_svc_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3cb]"></a>ble_gattc_disc_svc_uuid_tx</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_svc_uuid_tx &rArr; ble_att_clt_tx_find_type_value &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_type_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_by_uuid
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_resume
</UL>

<P><STRONG><a name="[b0]"></a>ble_gattc_disc_svc_uuid_resume</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_svc_uuid_resume &rArr; ble_gattc_disc_svc_uuid_tx &rArr; ble_att_clt_tx_find_type_value &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_tx
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_cb
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_rx_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>ble_gattc_disc_svc_uuid_err</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_disc_svc_uuid_err &rArr; ble_gattc_disc_svc_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3cc]"></a>ble_gattc_disc_svc_uuid_rx_hinfo</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_gattc_disc_svc_uuid_rx_hinfo &rArr; ble_gattc_disc_svc_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_hinfo
</UL>

<P><STRONG><a name="[3cd]"></a>ble_gattc_disc_svc_uuid_rx_complete</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_svc_uuid_rx_complete &rArr; ble_gattc_disc_svc_uuid_resume &rArr; ble_gattc_disc_svc_uuid_tx &rArr; ble_att_clt_tx_find_type_value &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_resume
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_complete
</UL>

<P><STRONG><a name="[3d0]"></a>ble_gattc_find_inc_svcs_cb</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_complete
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_adata
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_read_rsp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_err
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_resume
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_tmo
</UL>

<P><STRONG><a name="[bb]"></a>ble_gattc_find_inc_svcs_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_find_inc_svcs_tmo &rArr; ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3d1]"></a>ble_gattc_find_inc_svcs_tx</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_gattc_find_inc_svcs_tx &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_resume
</UL>

<P><STRONG><a name="[b1]"></a>ble_gattc_find_inc_svcs_resume</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_gattc_find_inc_svcs_resume &rArr; ble_gattc_find_inc_svcs_tx &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_tx
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_complete
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_read_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>ble_gattc_find_inc_svcs_err</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_find_inc_svcs_err &rArr; ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>ble_gattc_find_inc_svcs_rx_read_rsp</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ble_gattc_find_inc_svcs_rx_read_rsp &rArr; ble_gattc_find_inc_svcs_resume &rArr; ble_gattc_find_inc_svcs_tx &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_resume
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>ble_gattc_find_inc_svcs_rx_adata</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_gattc_find_inc_svcs_rx_adata &rArr; ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>ble_gattc_find_inc_svcs_rx_complete</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ble_gattc_find_inc_svcs_rx_complete &rArr; ble_gattc_find_inc_svcs_resume &rArr; ble_gattc_find_inc_svcs_tx &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_resume
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3d3]"></a>ble_gattc_disc_all_chrs_cb</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_disc_all_chrs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_complete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_adata
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_err
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_resume
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_tmo
</UL>

<P><STRONG><a name="[bc]"></a>ble_gattc_disc_all_chrs_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_disc_all_chrs_tmo &rArr; ble_gattc_disc_all_chrs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3d4]"></a>ble_gattc_disc_all_chrs_tx</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_all_chrs_tx &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_resume
</UL>

<P><STRONG><a name="[b2]"></a>ble_gattc_disc_all_chrs_resume</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_all_chrs_resume &rArr; ble_gattc_disc_all_chrs_tx &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_tx
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_cb
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>ble_gattc_disc_all_chrs_err</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_disc_all_chrs_err &rArr; ble_gattc_disc_all_chrs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>ble_gattc_disc_all_chrs_rx_adata</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_gattc_disc_all_chrs_rx_adata &rArr; ble_gattc_disc_all_chrs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>ble_gattc_disc_all_chrs_rx_complete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_all_chrs_rx_complete &rArr; ble_gattc_disc_all_chrs_resume &rArr; ble_gattc_disc_all_chrs_tx &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_resume
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3d6]"></a>ble_gattc_disc_chr_uuid_cb</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_disc_chr_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_complete
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_adata
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_err
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_resume
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_tmo
</UL>

<P><STRONG><a name="[bd]"></a>ble_gattc_disc_chr_uuid_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_disc_chr_uuid_tmo &rArr; ble_gattc_disc_chr_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3d7]"></a>ble_gattc_disc_chr_uuid_tx</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_chr_uuid_tx &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chrs_by_uuid
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_resume
</UL>

<P><STRONG><a name="[b3]"></a>ble_gattc_disc_chr_uuid_resume</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_chr_uuid_resume &rArr; ble_gattc_disc_chr_uuid_tx &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_tx
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_cb
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>ble_gattc_disc_chr_uuid_err</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_disc_chr_uuid_err &rArr; ble_gattc_disc_chr_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>ble_gattc_disc_chr_uuid_rx_adata</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_gattc_disc_chr_uuid_rx_adata &rArr; ble_gattc_disc_chr_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>ble_gattc_disc_chr_uuid_rx_complete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_chr_uuid_rx_complete &rArr; ble_gattc_disc_chr_uuid_resume &rArr; ble_gattc_disc_chr_uuid_tx &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_resume
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3d9]"></a>ble_gattc_disc_all_dscs_cb</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_disc_all_dscs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_rx_complete
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_rx_idata
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_err
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_resume
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_tmo
</UL>

<P><STRONG><a name="[be]"></a>ble_gattc_disc_all_dscs_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_disc_all_dscs_tmo &rArr; ble_gattc_disc_all_dscs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3da]"></a>ble_gattc_disc_all_dscs_tx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_all_dscs_tx &rArr; ble_att_clt_tx_find_info &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_info
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_resume
</UL>

<P><STRONG><a name="[b4]"></a>ble_gattc_disc_all_dscs_resume</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_all_dscs_resume &rArr; ble_gattc_disc_all_dscs_tx &rArr; ble_att_clt_tx_find_info &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_tx
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_cb
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_rx_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>ble_gattc_disc_all_dscs_err</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_disc_all_dscs_err &rArr; ble_gattc_disc_all_dscs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3db]"></a>ble_gattc_disc_all_dscs_rx_idata</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_gattc_disc_all_dscs_rx_idata &rArr; ble_gattc_disc_all_dscs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_idata
</UL>

<P><STRONG><a name="[3dc]"></a>ble_gattc_disc_all_dscs_rx_complete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ble_gattc_disc_all_dscs_rx_complete &rArr; ble_gattc_disc_all_dscs_resume &rArr; ble_gattc_disc_all_dscs_tx &rArr; ble_att_clt_tx_find_info &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_resume
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_complete
</UL>

<P><STRONG><a name="[3de]"></a>ble_gattc_read_cb</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_read_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_rx_read_rsp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_err
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_tmo
</UL>

<P><STRONG><a name="[bf]"></a>ble_gattc_read_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_read_tmo &rArr; ble_gattc_read_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>ble_gattc_read_err</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_read_err &rArr; ble_gattc_read_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>ble_gattc_read_rx_read_rsp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_gattc_read_rx_read_rsp &rArr; ble_gattc_read_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3df]"></a>ble_gattc_read_tx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read
</UL>

<P><STRONG><a name="[3e1]"></a>ble_gattc_read_uuid_cb</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_read_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_rx_complete
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_rx_adata
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_err
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_tmo
</UL>

<P><STRONG><a name="[c0]"></a>ble_gattc_read_uuid_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_read_uuid_tmo &rArr; ble_gattc_read_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>ble_gattc_read_uuid_err</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_read_uuid_err &rArr; ble_gattc_read_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>ble_gattc_read_uuid_rx_adata</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_gattc_read_uuid_rx_adata &rArr; ble_hs_mbuf_from_flat &rArr; os_mbuf_copyinto &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>ble_gattc_read_uuid_rx_complete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_read_uuid_rx_complete &rArr; ble_gattc_read_uuid_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3e2]"></a>ble_gattc_read_uuid_tx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_by_uuid
</UL>

<P><STRONG><a name="[3e4]"></a>ble_gattc_read_long_cb</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_read_long_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_rx_read_rsp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_err
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_resume
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_tmo
</UL>

<P><STRONG><a name="[c1]"></a>ble_gattc_read_long_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_read_long_tmo &rArr; ble_gattc_read_long_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3e5]"></a>ble_gattc_read_long_tx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_gattc_read_long_tx &rArr; ble_att_clt_tx_read_blob &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_blob
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_resume
</UL>

<P><STRONG><a name="[b5]"></a>ble_gattc_read_long_resume</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_gattc_read_long_resume &rArr; ble_gattc_read_long_tx &rArr; ble_att_clt_tx_read_blob &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_tx
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_cb
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_rx_read_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>ble_gattc_read_long_err</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_read_long_err &rArr; ble_gattc_read_long_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>ble_gattc_read_long_rx_read_rsp</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ble_gattc_read_long_rx_read_rsp &rArr; ble_gattc_read_long_resume &rArr; ble_gattc_read_long_tx &rArr; ble_att_clt_tx_read_blob &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_resume
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_blob_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3e7]"></a>ble_gattc_read_mult_cb</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_read_mult_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_mult_rsp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult_err
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult_tmo
</UL>

<P><STRONG><a name="[c2]"></a>ble_gattc_read_mult_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_read_mult_tmo &rArr; ble_gattc_read_mult_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>ble_gattc_read_mult_err</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_gattc_read_mult_err &rArr; ble_gattc_read_mult_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3e8]"></a>ble_gattc_read_mult_tx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_gattc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_mult
</UL>

<P><STRONG><a name="[3ec]"></a>ble_gattc_write_cb</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_write_rsp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_err
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_tmo
</UL>

<P><STRONG><a name="[c3]"></a>ble_gattc_write_tmo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_write_tmo &rArr; ble_gattc_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>ble_gattc_write_err</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_write_err &rArr; ble_gattc_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3ef]"></a>ble_gattc_write_long_cb</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gattc_write_long_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_rx_exec
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_rx_prep
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_err
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_tmo
</UL>

<P><STRONG><a name="[c4]"></a>ble_gattc_write_long_tmo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_write_long_tmo &rArr; ble_gattc_write_long_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3f0]"></a>ble_gattc_write_long_tx</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ble_gattc_write_long_tx &rArr; ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
</UL>

<P><STRONG><a name="[b6]"></a>ble_gattc_write_long_resume</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ble_gattc_write_long_resume &rArr; ble_gattc_write_long_tx &rArr; ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_tx
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_cb
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_rx_prep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>ble_gattc_write_long_err</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_gattc_write_long_err &rArr; ble_att_clt_tx_exec_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>ble_gattc_write_long_rx_prep</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ble_gattc_write_long_rx_prep &rArr; ble_gattc_write_long_resume &rArr; ble_gattc_write_long_tx &rArr; ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpm
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>ble_gattc_write_long_rx_exec</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_write_long_rx_exec &rArr; ble_gattc_write_long_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3f4]"></a>ble_gattc_write_reliable_cb</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_write_reliable_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_rx_exec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_err
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_tmo
</UL>

<P><STRONG><a name="[c5]"></a>ble_gattc_write_reliable_tmo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_write_reliable_tmo &rArr; ble_gattc_write_reliable_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3f5]"></a>ble_gattc_write_reliable_tx</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_gattc_write_reliable_tx &rArr; ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
</UL>

<P><STRONG><a name="[b7]"></a>ble_gattc_write_reliable_resume</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ble_gattc_write_reliable_resume &rArr; ble_gattc_write_reliable_tx &rArr; ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_tx
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_cb
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_rx_prep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>ble_gattc_write_reliable_err</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_gattc_write_reliable_err &rArr; ble_att_clt_tx_exec_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_rx_prep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>ble_gattc_write_reliable_rx_prep</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ble_gattc_write_reliable_rx_prep &rArr; ble_gattc_write_reliable_resume &rArr; ble_gattc_write_reliable_tx &rArr; ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpm
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_err
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>ble_gattc_write_reliable_rx_exec</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_write_reliable_rx_exec &rArr; ble_gattc_write_reliable_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_cb
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>ble_gattc_indicate_err</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = ble_gattc_indicate_err &rArr; ble_gatts_send_next_indicate &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>ble_gattc_indicate_tmo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_gattc_indicate_tmo &rArr; ble_gap_notify_tx_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[3fa]"></a>ble_gattc_indicate_rx_rsp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = ble_gattc_indicate_rx_rsp &rArr; ble_gatts_send_next_indicate &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_indicate_rsp
</UL>

<P><STRONG><a name="[3ab]"></a>ble_npl_time_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ble_npl_time_get &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_ticks_until_resume
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract_expired
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_set_resume_timer
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_set_exp_timer
</UL>

<P><STRONG><a name="[3ac]"></a>ble_npl_time_ms_to_ticks32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_gattc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_npl_time_ms_to_ticks32 &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_set_resume_timer
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_proc_set_exp_timer
</UL>

<P><STRONG><a name="[396]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_gattc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_indicate
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_notify
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_write_reliable
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_write_long
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_write
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read_mult
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read_long
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read_uuid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_read
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_all_dscs
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_chr_uuid
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_disc_all_chrs
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_find_inc_svcs
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_uuid
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_log_proc_init
</UL>

<P><STRONG><a name="[4a]"></a>ble_gatts_svc_access</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_gatts_svc_access &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>ble_gatts_inc_access</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_gatts_inc_access &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(.text)
</UL>
<P><STRONG><a name="[419]"></a>ble_gatts_chr_clt_cfg_allowed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_chr
</UL>

<P><STRONG><a name="[41a]"></a>ble_gatts_att_flags_from_chr_flags</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_chr
</UL>

<P><STRONG><a name="[3ff]"></a>ble_gatts_chr_properties</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_def_access
</UL>

<P><STRONG><a name="[48]"></a>ble_gatts_chr_def_access</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_gatts_chr_def_access &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_properties
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(.text)
</UL>
<P><STRONG><a name="[418]"></a>ble_gatts_chr_is_sane</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_count_resources
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_chr
</UL>

<P><STRONG><a name="[404]"></a>ble_gatts_chr_op</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_val_access
</UL>

<P><STRONG><a name="[405]"></a>ble_gatts_chr_inc_val_stat</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_val_access
</UL>

<P><STRONG><a name="[400]"></a>ble_gatts_mutable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gatts_mutable &rArr; ble_gap_adv_active
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_active
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_active
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_active
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_first
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_reset
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>

<P><STRONG><a name="[402]"></a>ble_gatts_val_access</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_gatts_val_access &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_access
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_val_access
</UL>

<P><STRONG><a name="[49]"></a>ble_gatts_chr_val_access</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_gatts_chr_val_access &rArr; ble_gatts_val_access &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_val_access
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_inc_val_stat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(.text)
</UL>
<P><STRONG><a name="[407]"></a>ble_gatts_find_svc_entry_idx</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_incs_satisfied
</UL>

<P><STRONG><a name="[406]"></a>ble_gatts_svc_incs_satisfied</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gatts_svc_incs_satisfied
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc_entry_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svc
</UL>

<P><STRONG><a name="[408]"></a>ble_gatts_register_inc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ble_gatts_register_inc &rArr; ble_att_svr_register &rArr; ble_att_svr_entry_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svc
</UL>

<P><STRONG><a name="[409]"></a>ble_gatts_dsc_op</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access_locked
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_access
</UL>

<P><STRONG><a name="[40a]"></a>ble_gatts_dsc_inc_stat</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access_locked
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_access
</UL>

<P><STRONG><a name="[47]"></a>ble_gatts_dsc_access</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_gatts_dsc_access &rArr; ble_gatts_val_access &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_inc_stat
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_op
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_val_access
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(.text)
</UL>
<P><STRONG><a name="[40c]"></a>ble_gatts_dsc_is_sane</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_count_resources
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_dsc
</UL>

<P><STRONG><a name="[40b]"></a>ble_gatts_register_dsc</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_gatts_register_dsc &rArr; ble_att_svr_register &rArr; ble_att_svr_entry_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_register
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_is_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_chr
</UL>

<P><STRONG><a name="[40e]"></a>ble_gatts_clt_cfg_find_idx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_clt_cfg_find_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_updated
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications_one_chr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_find
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
</UL>

<P><STRONG><a name="[40d]"></a>ble_gatts_clt_cfg_find</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gatts_clt_cfg_find &rArr; ble_gatts_clt_cfg_find_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_find_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access_locked
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
</UL>

<P><STRONG><a name="[40f]"></a>ble_gatts_subscribe_event</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ble_gatts_subscribe_event &rArr; ble_gap_subscribe_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_subscribe_event
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
</UL>

<P><STRONG><a name="[410]"></a>ble_gatts_clt_cfg_access_locked</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_gatts_clt_cfg_access_locked &rArr; os_mbuf_pullup &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_find
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_inc_stat
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_op
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
</UL>

<P><STRONG><a name="[416]"></a>ble_gatts_register_clt_cfg_dsc</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ble_gatts_register_clt_cfg_dsc &rArr; ble_att_svr_register &rArr; ble_att_svr_entry_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_chr
</UL>

<P><STRONG><a name="[417]"></a>ble_gatts_register_chr</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_gatts_register_chr &rArr; ble_gatts_register_dsc &rArr; ble_att_svr_register &rArr; ble_att_svr_entry_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_register
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_clt_cfg_dsc
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_dsc
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_is_sane
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_att_flags_from_chr_flags
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_clt_cfg_allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svc
</UL>

<P><STRONG><a name="[41d]"></a>ble_gatts_svc_type_to_uuid</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svc
</UL>

<P><STRONG><a name="[41c]"></a>ble_gatts_svc_is_sane</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_count_resources
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svc
</UL>

<P><STRONG><a name="[41b]"></a>ble_gatts_register_svc</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_gatts_register_svc &rArr; ble_gatts_register_chr &rArr; ble_gatts_register_dsc &rArr; ble_att_svr_register &rArr; ble_att_svr_entry_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_register
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_is_sane
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_type_to_uuid
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_chr
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_inc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_incs_satisfied
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc_entry_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_round
</UL>

<P><STRONG><a name="[41e]"></a>ble_gatts_register_round</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_gatts_register_round &rArr; ble_gatts_register_svc &rArr; ble_gatts_register_chr &rArr; ble_gatts_register_dsc &rArr; ble_att_svr_register &rArr; ble_att_svr_entry_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prev_handle
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svc
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svcs
</UL>

<P><STRONG><a name="[424]"></a>ble_gatts_clt_cfg_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_conn_init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>

<P><STRONG><a name="[421]"></a>ble_gatts_free_svc_defs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_gatts_free_svc_defs &rArr; free &rArr; tos_mmheap_free &rArr; blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>

<P><STRONG><a name="[422]"></a>ble_gatts_free_mem</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_gatts_free_mem &rArr; free &rArr; tos_mmheap_free &rArr; blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>

<P><STRONG><a name="[42a]"></a>ble_gatts_schedule_update</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ble_gatts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications_one_chr
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
</UL>

<P><STRONG><a name="[429]"></a>ble_gatts_tx_notifications_one_chr</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = ble_gatts_tx_notifications_one_chr &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_idx
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_schedule_update
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_find_idx
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_indicate
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications
</UL>

<P><STRONG><a name="[42c]"></a>ble_gatts_find_svc_entry</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gatts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc_chr_attr
</UL>

<P><STRONG><a name="[42d]"></a>ble_gatts_find_svc_chr_attr</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ble_gatts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_find_by_handle
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_dsc
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_chr
</UL>

<P><STRONG><a name="[432]"></a>ble_gatts_count_resources</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, ble_gatts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gatts_count_resources
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_is_sane
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_is_sane
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_is_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_count_cfg
</UL>

<P><STRONG><a name="[43a]"></a>ble_hs_wakeup_tx_conn</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_hs_wakeup_tx_conn &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
</UL>

<P><STRONG><a name="[43d]"></a>ble_hs_clear_rx_queue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ble_hs_clear_rx_queue &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_reset
</UL>

<P><STRONG><a name="[43e]"></a>ble_hs_timer_reset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_hs_timer_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_stop
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_reset
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
</UL>

<P><STRONG><a name="[43f]"></a>ble_hs_timer_sched</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_hs_timer_sched &rArr; ble_hs_timer_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_get_ticks
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_is_active
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sync
</UL>

<P><STRONG><a name="[442]"></a>ble_hs_sync</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ble_hs_sync &rArr; ble_hs_startup_go &rArr; ble_hs_pvcy_set_our_irk &rArr; ble_hs_pvcy_add_entry &rArr; ble_hs_pvcy_add_entry_hci &rArr; ble_hs_pvcy_set_mode &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_restore_irks
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_reset
</UL>

<P><STRONG><a name="[446]"></a>ble_hs_reset</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = ble_hs_reset &rArr; ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_reset
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_first_conn_handle
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_reset
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sync
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_clear_rx_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_reset
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
</UL>

<P><STRONG><a name="[4b]"></a>ble_hs_timer_exp</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ble_hs_timer_exp &rArr; ble_hs_reset &rArr; ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_timer
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_timer
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_reset
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(.text)
</UL>
<P><STRONG><a name="[44d]"></a>ble_hs_sched_start_stage2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_hs_sched_start_stage2 &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_evq_get
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_start_stage1
</UL>

<P><STRONG><a name="[4c]"></a>ble_hs_event_rx_hci_ev</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ble_hs_event_rx_hci_ev &rArr; ble_hs_hci_evt_process &rArr; ble_hci_trans_buf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>ble_hs_event_tx_notify</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = ble_hs_event_tx_notify &rArr; ble_gatts_tx_notifications &rArr; ble_gatts_tx_notifications_one_chr &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>ble_hs_event_rx_data</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ble_hs_event_rx_data &rArr; ble_hs_process_rx_data_queue &rArr; ble_hs_hci_evt_acl_process &rArr; ble_l2cap_sig_reject_invalid_cid_tx &rArr; ble_l2cap_sig_reject_tx &rArr; ble_l2cap_sig_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_process_rx_data_queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>ble_hs_event_reset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ble_hs_event_reset &rArr; ble_hs_reset &rArr; ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>ble_hs_event_start_stage1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_event_start_stage1 &rArr; ble_hs_sched_start_stage2 &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_start_stage2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>ble_hs_event_start_stage2</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = ble_hs_event_start_stage2 &rArr; ble_hs_start &rArr; ble_hs_sync &rArr; ble_hs_startup_go &rArr; ble_hs_pvcy_set_our_irk &rArr; ble_hs_pvcy_add_entry &rArr; ble_hs_pvcy_add_entry_hci &rArr; ble_hs_pvcy_set_mode &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>ble_hs_rx_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_hs_rx_data &rArr; ble_mqueue_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_put
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_flow_fill_acl_usrhdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(.text)
</UL>
<P><STRONG><a name="[44f]"></a>ble_npl_eventq_put</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_reset
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_enqueue_hci_event
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_start
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_start_stage2
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_notifications_sched
</UL>

<P><STRONG><a name="[455]"></a>ble_npl_event_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_hs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_enqueue_hci_event
</UL>

<P><STRONG><a name="[445]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sync
</UL>

<P><STRONG><a name="[467]"></a>ble_hs_adv_set_hdr</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ble_hs_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ble_hs_adv_set_hdr &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array16
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid128
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid32
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid16
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_flat_mbuf
</UL>

<P><STRONG><a name="[468]"></a>ble_hs_adv_set_flat_mbuf</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, ble_hs_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_adv_set_flat_mbuf &rArr; ble_hs_adv_set_hdr &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_hdr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_flat
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[46a]"></a>ble_hs_adv_set_array_uuid16</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, ble_hs_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_adv_set_array_uuid16 &rArr; ble_hs_adv_set_hdr &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_mbuf
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[46c]"></a>ble_hs_adv_set_array_uuid32</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ble_hs_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_adv_set_array_uuid32 &rArr; ble_hs_adv_set_hdr &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le32
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[46e]"></a>ble_hs_adv_set_array_uuid128</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, ble_hs_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_adv_set_array_uuid128 &rArr; ble_hs_adv_set_hdr &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_mbuf
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[46f]"></a>ble_hs_adv_set_array16</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, ble_hs_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_hs_adv_set_array16 &rArr; ble_hs_adv_set_hdr &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[470]"></a>adv_set_fields</STRONG> (Thumb, 618 bytes, Stack size 48 bytes, ble_hs_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = adv_set_fields &rArr; ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_read_adv_tx_pwr
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array16
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid128
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid32
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_array_uuid16
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_flat_mbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_fields_mbuf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_fields
</UL>

<P><STRONG><a name="[473]"></a>ble_hs_adv_parse_uuids16</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ble_hs_adv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_one_field
</UL>

<P><STRONG><a name="[474]"></a>ble_hs_adv_parse_uuids32</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, ble_hs_adv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_one_field
</UL>

<P><STRONG><a name="[475]"></a>ble_hs_adv_parse_uuids128</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ble_hs_adv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_one_field
</UL>

<P><STRONG><a name="[476]"></a>ble_hs_adv_parse_one_field</STRONG> (Thumb, 600 bytes, Stack size 40 bytes, ble_hs_adv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_uuids128
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_uuids32
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_uuids16
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_fields
</UL>

<P><STRONG><a name="[54]"></a>find_field_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_hs_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_field_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_adv.o(.text)
</UL>
<P><STRONG><a name="[47d]"></a>ble_addr_cmp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_hs_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
</UL>

<P><STRONG><a name="[488]"></a>ble_hs_dbg_le_event_disp</STRONG> (Thumb, 892 bytes, Stack size 120 bytes, ble_hs_dbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[48b]"></a>ble_hs_dbg_disconn_comp_disp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_hs_dbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[48c]"></a>ble_hs_dbg_encrypt_chg_disp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_hs_dbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[48d]"></a>ble_hs_dbg_encrypt_refresh_disp</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_hs_dbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[48e]"></a>ble_hs_dbg_rd_rem_ver_disp</STRONG> (Thumb, 1044 bytes, Stack size 32 bytes, ble_hs_dbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[48f]"></a>ble_hs_dbg_num_comp_pkts_disp</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_hs_dbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[490]"></a>ble_hs_dbg_auth_pyld_tmo_disp</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_hs_dbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[491]"></a>ble_hs_dbg_cmd_comp_info_params</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, ble_hs_dbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_cmd_complete_disp
</UL>

<P><STRONG><a name="[492]"></a>ble_hs_dbg_cmd_complete_disp</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, ble_hs_dbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_cmd_comp_info_params
</UL>

<P><STRONG><a name="[493]"></a>ble_hs_dbg_cmd_status_disp</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ble_hs_dbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>

<P><STRONG><a name="[489]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_dbg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_cmd_status_disp
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_cmd_complete_disp
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_cmd_comp_info_params
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_auth_pyld_tmo_disp
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_num_comp_pkts_disp
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_rd_rem_ver_disp
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_encrypt_refresh_disp
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_encrypt_chg_disp
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_disconn_comp_disp
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_le_event_disp
</UL>

<P><STRONG><a name="[494]"></a>ble_hs_hci_lock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_lock &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>

<P><STRONG><a name="[495]"></a>ble_hs_hci_unlock</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_unlock &rArr; npl_tencentos_tiny_mutex_release &rArr; tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>

<P><STRONG><a name="[497]"></a>ble_hs_hci_rx_cmd_complete</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_hs_hci_rx_cmd_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_process_ack
</UL>

<P><STRONG><a name="[498]"></a>ble_hs_hci_rx_cmd_status</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_hci_rx_cmd_status
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_process_ack
</UL>

<P><STRONG><a name="[499]"></a>ble_hs_hci_process_ack</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_hs_hci_process_ack &rArr; ble_hs_hci_rx_cmd_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_cmd_status
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_cmd_complete
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_dbg_event_disp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>

<P><STRONG><a name="[49b]"></a>ble_hs_hci_wait_for_ack</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_wait_for_ack &rArr; npl_tencentos_tiny_sem_pend &rArr; tos_sem_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_sem_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>

<P><STRONG><a name="[4a3]"></a>ble_hs_hci_max_acl_payload_sz</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
</UL>

<P><STRONG><a name="[55]"></a>ble_hs_hci_frag_alloc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_frag_alloc &rArr; ble_hs_mbuf_acl_pkt &rArr; ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get_pkthdr
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_acl_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci.o(.text)
</UL>
<P><STRONG><a name="[4a0]"></a>ble_hs_hci_acl_hdr_prepend</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ble_hs_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_acl_hdr_prepend &rArr; os_mbuf_pullup &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_handle_pb_bc_join
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
</UL>

<P><STRONG><a name="[4a2]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_hdr_prepend
</UL>

<P><STRONG><a name="[4a8]"></a>ble_hs_hci_cmd_transport</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_hci_cmd_transport &rArr; ble_hci_trans_hs_cmd_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_hs_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send
</UL>

<P><STRONG><a name="[4ab]"></a>ble_hs_hci_cmd_send</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_cmd_send &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_transport
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_le_create_conn_cancel
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_read_adv_pwr
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_reset
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_le_send
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send_buf
</UL>

<P><STRONG><a name="[4af]"></a>ble_hs_hci_cmd_le_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_le_conn_param_neg_reply
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_le_conn_param_reply
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_le_conn_update
</UL>

<P><STRONG><a name="[4be]"></a>ble_hs_hci_cmd_body_le_whitelist_chg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_add_to_whitelist
</UL>

<P><STRONG><a name="[4b0]"></a>ble_hs_hci_cmd_body_le_set_adv_params</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_body_le_set_adv_params
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_adv_params
</UL>

<P><STRONG><a name="[4b1]"></a>ble_hs_hci_cmd_body_le_set_adv_data</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_body_le_set_adv_data
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_adv_data
</UL>

<P><STRONG><a name="[4b2]"></a>ble_hs_hci_cmd_body_le_set_scan_rsp_data</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_scan_rsp_data
</UL>

<P><STRONG><a name="[4b3]"></a>ble_hs_hci_cmd_body_set_event_mask</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_hs_hci_cmd_body_set_event_mask &rArr; put_le64
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le64
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_event_mask2
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_event_mask
</UL>

<P><STRONG><a name="[4b7]"></a>ble_hs_hci_cmd_body_disconnect</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_body_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_disconnect
</UL>

<P><STRONG><a name="[4b8]"></a>ble_hs_hci_cmd_body_le_set_event_mask</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_hs_hci_cmd_body_le_set_event_mask &rArr; put_le64
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le64
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_event_mask
</UL>

<P><STRONG><a name="[4ba]"></a>ble_hs_hci_cmd_body_le_set_adv_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_adv_enable
</UL>

<P><STRONG><a name="[4bb]"></a>ble_hs_hci_cmd_body_le_set_scan_params</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_scan_params
</UL>

<P><STRONG><a name="[4bc]"></a>ble_hs_hci_cmd_body_le_set_scan_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_scan_enable
</UL>

<P><STRONG><a name="[4bd]"></a>ble_hs_hci_cmd_body_le_create_connection</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_create_connection
</UL>

<P><STRONG><a name="[4c5]"></a>ble_hs_hci_cmd_body_le_conn_update</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_body_le_conn_update
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_conn_update
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_le_conn_update
</UL>

<P><STRONG><a name="[4c7]"></a>ble_hs_hci_cmd_body_le_lt_key_req_reply</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_body_le_lt_key_req_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_lt_key_req_reply
</UL>

<P><STRONG><a name="[4ca]"></a>ble_hs_hci_cmd_body_le_conn_param_reply</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_body_le_conn_param_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_conn_param_reply
</UL>

<P><STRONG><a name="[4cc]"></a>ble_hs_hci_cmd_body_le_conn_param_neg_reply</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_body_le_conn_param_neg_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_conn_param_neg_reply
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_le_conn_param_neg_reply
</UL>

<P><STRONG><a name="[4ce]"></a>ble_hs_hci_cmd_body_le_start_encrypt</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_hs_hci_cmd_body_le_start_encrypt &rArr; put_le64
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le64
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_start_encrypt
</UL>

<P><STRONG><a name="[4d0]"></a>ble_hs_hci_cmd_body_read_rssi</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_read_rssi
</UL>

<P><STRONG><a name="[4d3]"></a>ble_hs_hci_cmd_body_set_data_len</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_data_len
</UL>

<P><STRONG><a name="[4d5]"></a>ble_hs_hci_cmd_body_add_to_resolv_list</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_hs_hci_cmd_body_add_to_resolv_list
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_add_to_resolv_list
</UL>

<P><STRONG><a name="[4d8]"></a>ble_hs_hci_cmd_body_remove_from_resolv_list</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_remove_from_resolv_list
</UL>

<P><STRONG><a name="[4da]"></a>ble_hs_hci_cmd_body_read_peer_resolv_addr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_read_peer_resolv_addr
</UL>

<P><STRONG><a name="[4dc]"></a>ble_hs_hci_cmd_body_read_lcl_resolv_addr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_read_lcl_resolv_addr
</UL>

<P><STRONG><a name="[4de]"></a>ble_hs_hci_cmd_body_set_addr_res_en</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_addr_res_en
</UL>

<P><STRONG><a name="[4df]"></a>ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_resolv_priv_addr_timeout
</UL>

<P><STRONG><a name="[4e2]"></a>ble_hs_hci_verify_le_phy_params</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_phy
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_body_le_set_default_phy
</UL>

<P><STRONG><a name="[4e1]"></a>ble_hs_hci_cmd_body_le_set_default_phy</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_verify_le_phy_params
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_default_phy
</UL>

<P><STRONG><a name="[4e3]"></a>ble_hs_hci_cmd_body_le_set_phy</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_verify_le_phy_params
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_phy
</UL>

<P><STRONG><a name="[4e5]"></a>ble_hs_hci_cmd_body_le_enhanced_recv_test</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_enh_recv_test
</UL>

<P><STRONG><a name="[4e7]"></a>ble_hs_hci_cmd_body_le_enhanced_trans_test</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_enh_trans_test
</UL>

<P><STRONG><a name="[4e9]"></a>ble_hs_hci_cmd_body_le_set_priv_mode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hs_hci_cmd_body_le_set_priv_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_priv_mode
</UL>

<P><STRONG><a name="[4eb]"></a>ble_hs_hci_cmd_body_set_random_addr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_hs_hci_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_random_addr
</UL>

<P><STRONG><a name="[4ec]"></a>ble_hs_hci_cmd_body_le_read_remote_feat</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hs_hci_cmd_body_le_read_remote_feat
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_read_remote_feat
</UL>

<P><STRONG><a name="[4ad]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_hci_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send
</UL>

<P><STRONG><a name="[4f3]"></a>ble_hs_hci_evt_dispatch_find</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_process
</UL>

<P><STRONG><a name="[4ef]"></a>ble_hs_hci_evt_le_dispatch_find</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_meta
</UL>

<P><STRONG><a name="[d8]"></a>ble_hs_hci_evt_disconn_complete</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_disconn_complete &rArr; ble_gap_rx_disconn_complete &rArr; ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_disconn_complete
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_add_avail_pkts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>ble_hs_hci_evt_encrypt_change</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_encrypt_change &rArr; ble_sm_enc_change_rx &rArr; ble_sm_enc_event_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_change_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>ble_hs_hci_evt_hw_error</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_hw_error &rArr; ble_hs_hw_error &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hw_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>ble_hs_hci_evt_enc_key_refresh</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_enc_key_refresh &rArr; ble_sm_enc_key_refresh_rx &rArr; ble_sm_enc_event_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_key_refresh_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>ble_hs_hci_evt_num_completed_pkts</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_num_completed_pkts &rArr; ble_hs_wakeup_tx &rArr; ble_hs_wakeup_tx_conn &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_reset
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_add_avail_pkts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>ble_hs_hci_evt_le_meta</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_hci_evt_le_meta
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_dispatch_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>ble_hs_hci_evt_le_conn_complete</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_le_conn_complete &rArr; ble_gap_rx_conn_complete &rArr; ble_gap_master_failed &rArr; ble_gap_master_connect_failure &rArr; ble_gap_master_extract_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[4f0]"></a>ble_hs_hci_evt_le_adv_rpt_first_pass</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_hs_hci_evt_le_adv_rpt_first_pass
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_adv_rpt
</UL>

<P><STRONG><a name="[dd]"></a>ble_hs_hci_evt_le_adv_rpt</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_le_adv_rpt &rArr; ble_gap_rx_adv_report &rArr; ble_gap_disc_report &rArr; ble_gap_master_extract_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_adv_rpt_first_pass
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>ble_hs_hci_evt_le_dir_adv_rpt</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_le_dir_adv_rpt &rArr; ble_gap_rx_adv_report &rArr; ble_gap_disc_report &rArr; ble_gap_master_extract_state &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>ble_hs_hci_evt_le_rd_rem_used_feat_complete</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_le_rd_rem_used_feat_complete &rArr; ble_gap_rx_rd_rem_sup_feat_complete &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_rd_rem_sup_feat_complete
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>ble_hs_hci_evt_le_ext_adv_rpt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>ble_hs_hci_evt_le_periodic_adv_sync_estab</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>ble_hs_hci_evt_le_periodic_adv_rpt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>ble_hs_hci_evt_le_periodic_adv_sync_lost</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>ble_hs_hci_evt_le_scan_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>ble_hs_hci_evt_le_adv_set_terminated</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>ble_hs_hci_evt_le_scan_req_rcvd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>ble_hs_hci_evt_le_conn_upd_complete</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_le_conn_upd_complete &rArr; ble_gap_rx_update_complete &rArr; ble_gap_update_notify &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>ble_hs_hci_evt_le_lt_key_req</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_le_lt_key_req &rArr; ble_sm_ltk_req_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le64
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>ble_hs_hci_evt_le_conn_parm_req</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_le_conn_parm_req &rArr; ble_gap_rx_param_req &rArr; ble_gap_update_failed &rArr; ble_gap_update_notify &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>ble_hs_hci_evt_le_phy_update_complete</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_hs_hci_evt_le_phy_update_complete &rArr; ble_gap_rx_phy_update_complete &rArr; ble_gap_call_conn_event_cb &rArr; ble_gap_extract_conn_cb &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_phy_update_complete
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[4f5]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
</UL>

<P><STRONG><a name="[503]"></a>ble_hs_id_addr_type_usable</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ble_hs_id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_hs_id_addr_type_usable &rArr; ble_hs_id_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_addr_type_to_id
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_infer_auto
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_use_addr
</UL>

<P><STRONG><a name="[505]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_log.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_mbuf
</UL>

<P><STRONG><a name="[506]"></a>ble_hs_mbuf_gen_pkt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_hs_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_hs_mbuf_gen_pkt &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_bare_pkt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_acl_pkt
</UL>

<P><STRONG><a name="[56]"></a>ble_hs_misc_restore_one_irk</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_hs_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ble_hs_misc_restore_one_irk &rArr; ble_hs_pvcy_add_entry &rArr; ble_hs_pvcy_add_entry_hci &rArr; ble_hs_pvcy_set_mode &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_misc.o(.text)
</UL>
<P><STRONG><a name="[50b]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_hs_mqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_enter_critical &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_put
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_get
</UL>

<P><STRONG><a name="[50c]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_hs_mqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_put
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_get
</UL>

<P><STRONG><a name="[513]"></a>ble_hs_pvcy_set_addr_timeout</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_hs_pvcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ble_hs_pvcy_set_addr_timeout &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_resolv_priv_addr_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_ensure_started
</UL>

<P><STRONG><a name="[514]"></a>ble_hs_pvcy_set_resolve_enabled</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_hs_pvcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ble_hs_pvcy_set_resolve_enabled &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_addr_res_en
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_our_irk
</UL>

<P><STRONG><a name="[515]"></a>ble_hs_pvcy_clear_entries</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_hs_pvcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ble_hs_pvcy_clear_entries &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_our_irk
</UL>

<P><STRONG><a name="[516]"></a>ble_hs_pvcy_add_entry_hci</STRONG> (Thumb, 134 bytes, Stack size 120 bytes, ble_hs_pvcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ble_hs_pvcy_add_entry_hci &rArr; ble_hs_pvcy_set_mode &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_mode
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_add_to_resolv_list
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry
</UL>

<P><STRONG><a name="[518]"></a>ble_hs_startup_read_local_ver_tx</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ble_hs_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_hs_startup_read_local_ver_tx &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_set_hci_version
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[51a]"></a>ble_hs_startup_le_read_sup_f_tx</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_hs_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_hs_startup_le_read_sup_f_tx &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_set_le_supported_feat
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[51c]"></a>ble_hs_startup_le_read_buf_sz_tx</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ble_hs_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_hs_startup_le_read_buf_sz_tx &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_buf_sz
</UL>

<P><STRONG><a name="[51d]"></a>ble_hs_startup_read_buf_sz_tx</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, ble_hs_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ble_hs_startup_read_buf_sz_tx &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_buf_sz
</UL>

<P><STRONG><a name="[51e]"></a>ble_hs_startup_read_buf_sz</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ble_hs_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_hs_startup_read_buf_sz &rArr; ble_hs_startup_read_buf_sz_tx &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_set_buf_sz
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_read_buf_sz_tx
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_le_read_buf_sz_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[520]"></a>ble_hs_startup_read_bd_addr</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ble_hs_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_hs_startup_read_bd_addr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_pub
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[521]"></a>ble_hs_startup_le_set_evmask_tx</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ble_hs_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_hs_startup_le_set_evmask_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_set_event_mask
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_get_hci_version
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[523]"></a>ble_hs_startup_set_evmask_tx</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_hs_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_hs_startup_set_evmask_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_event_mask2
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_set_event_mask
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_get_hci_version
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[524]"></a>ble_hs_startup_reset_tx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_hs_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ble_hs_startup_reset_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[526]"></a>ble_hs_stop_done</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_hs_stop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_hs_stop_done &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_unregister
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_terminate_next_conn
</UL>

<P><STRONG><a name="[528]"></a>ble_hs_stop_terminate_next_conn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_hs_stop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_hs_stop_terminate_next_conn &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_first_conn_handle
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_done
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_gap_event
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_term_event_cb
</UL>

<P><STRONG><a name="[58]"></a>ble_hs_stop_term_event_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs_stop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_hs_stop_term_event_cb &rArr; ble_hs_stop_terminate_next_conn &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_terminate_next_conn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_stop.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>ble_hs_stop_gap_event</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_hs_stop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_hs_stop_gap_event &rArr; ble_hs_stop_terminate_next_conn &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_terminate_next_conn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_stop.o(.text)
</UL>
<P><STRONG><a name="[52b]"></a>ble_hs_stop_register_listener</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_hs_stop.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_begin
</UL>

<P><STRONG><a name="[52a]"></a>ble_hs_stop_begin</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_hs_stop.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_register_listener
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop
</UL>

<P><STRONG><a name="[529]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_stop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_terminate_next_conn
</UL>

<P><STRONG><a name="[531]"></a>ble_l2cap_append_rx</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_append_rx &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx_payload
</UL>

<P><STRONG><a name="[532]"></a>ble_l2cap_rx_payload</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ble_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_rx_payload &rArr; ble_l2cap_append_rx &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_remove_rx
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_append_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
</UL>

<P><STRONG><a name="[533]"></a>ble_l2cap_get_mtu</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_l2cap_get_mtu &rArr; ble_att_chan_mtu
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_chan_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
</UL>

<P><STRONG><a name="[534]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
</UL>

<P><STRONG><a name="[539]"></a>ble_l2cap_sig_dbg_assert_proc_not_inserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_insert
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_free
</UL>

<P><STRONG><a name="[543]"></a>ble_l2cap_sig_next_id</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
</UL>

<P><STRONG><a name="[545]"></a>ble_l2cap_sig_dispatch_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx
</UL>

<P><STRONG><a name="[537]"></a>ble_l2cap_sig_proc_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_proc_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
</UL>

<P><STRONG><a name="[538]"></a>ble_l2cap_sig_proc_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_proc_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_timer
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_conn_broken
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx_reject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_rsp_rx
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_process_status
</UL>

<P><STRONG><a name="[53a]"></a>ble_l2cap_sig_proc_insert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_proc_insert &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_dbg_assert_proc_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_process_status
</UL>

<P><STRONG><a name="[53c]"></a>ble_l2cap_sig_proc_matches</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_l2cap_sig_proc_matches
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_extract
</UL>

<P><STRONG><a name="[53b]"></a>ble_l2cap_sig_proc_extract</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_proc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_matches
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx_reject
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_rsp_rx
</UL>

<P><STRONG><a name="[ec]"></a>ble_l2cap_sig_rx_noop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_l2cap_sig.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ble_l2cap_sig.o(.constdata)
</UL>
<P><STRONG><a name="[53d]"></a>ble_l2cap_sig_proc_set_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_proc_set_timer &rArr; ble_hs_timer_resched &rArr; ble_hs_timer_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_process_status
</UL>

<P><STRONG><a name="[53f]"></a>ble_l2cap_sig_process_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_process_status &rArr; ble_l2cap_sig_proc_insert &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_set_timer
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_insert
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
</UL>

<P><STRONG><a name="[542]"></a>ble_l2cap_sig_update_call_cb</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_l2cap_sig_update_call_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_timer
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_conn_broken
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_rsp_rx
</UL>

<P><STRONG><a name="[ed]"></a>ble_l2cap_sig_update_req_rx</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_update_req_rx &rArr; ble_gap_update_params &rArr; ble_l2cap_sig_update &rArr; ble_l2cap_sig_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_l2cap_update_req
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_flags
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_cmd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_l2cap_sig.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>ble_l2cap_sig_update_rsp_rx</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_update_rsp_rx &rArr; ble_l2cap_sig_proc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_call_cb
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_extract
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_l2cap_sig.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>ble_l2cap_sig_rx_reject</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_rx_reject &rArr; ble_l2cap_sig_proc_extract &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_extract
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_l2cap_sig.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>ble_l2cap_sig_rx</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_rx &rArr; ble_l2cap_sig_reject_tx &rArr; ble_l2cap_sig_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_mbuf
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_hdr_parse
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_dispatch_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_l2cap_sig.o(.text)
</UL>
<P><STRONG><a name="[547]"></a>ble_l2cap_sig_extract_expired</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_l2cap_sig_extract_expired &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_timer
</UL>

<P><STRONG><a name="[53e]"></a>ble_npl_time_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ble_npl_time_get &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_extract_expired
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_proc_set_timer
</UL>

<P><STRONG><a name="[553]"></a>ble_sm_dbg_assert_no_cycles</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_extract_expired
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_remove
</UL>

<P><STRONG><a name="[551]"></a>ble_sm_dbg_assert_not_inserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_free
</UL>

<P><STRONG><a name="[549]"></a>ble_sm_gen_ediv</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_sm_gen_ediv &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[54a]"></a>ble_sm_gen_master_id_rand</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_sm_gen_master_id_rand &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[54b]"></a>ble_sm_gen_ltk</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_sm_gen_ltk &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[54c]"></a>ble_sm_gen_csrk</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_sm_gen_csrk &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[54d]"></a>ble_sm_proc_set_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ble_sm_proc_set_timer &rArr; ble_hs_timer_resched &rArr; ble_hs_timer_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[582]"></a>ble_sm_dispatch_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_rx
</UL>

<P><STRONG><a name="[54f]"></a>ble_sm_proc_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ble_sm_proc_alloc &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_slave_initiate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[550]"></a>ble_sm_proc_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_sm_proc_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_dbg_assert_not_inserted
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_timer
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[552]"></a>ble_sm_proc_remove</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_sm_proc_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_dbg_assert_no_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[554]"></a>ble_sm_update_sec_state</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_sm_update_sec_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_success
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
</UL>

<P><STRONG><a name="[555]"></a>ble_sm_fill_store_value</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_sm_fill_store_value &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_persist_keys
</UL>

<P><STRONG><a name="[557]"></a>ble_sm_persist_keys</STRONG> (Thumb, 258 bytes, Stack size 120 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ble_sm_persist_keys &rArr; ble_store_write_peer_sec &rArr; ble_hs_pvcy_add_entry &rArr; ble_hs_pvcy_add_entry_hci &rArr; ble_hs_pvcy_set_mode &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_identity_event
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_addr_type_to_id
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_peer_sec
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_our_sec
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_fill_store_value
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[55b]"></a>ble_sm_proc_matches</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_sm_proc_matches
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
</UL>

<P><STRONG><a name="[570]"></a>ble_sm_insert</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_slave_initiate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[55c]"></a>ble_sm_extract_expired</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_sm_extract_expired &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_dbg_assert_no_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_timer
</UL>

<P><STRONG><a name="[fa]"></a>ble_sm_rx_noop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[578]"></a>ble_sm_build_authreq</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_exec
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_base_fill
</UL>

<P><STRONG><a name="[55d]"></a>ble_sm_io_action</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_sm_io_action &rArr; ble_sm_lgcy_io_action
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_io_action
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_can_advance
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_cfg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
</UL>

<P><STRONG><a name="[561]"></a>ble_sm_exec</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_sm_exec &rArr; ble_hs_conn_exists
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_exists
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[562]"></a>ble_sm_pair_fail_tx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_sm_pair_fail_tx &rArr; ble_sm_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[565]"></a>ble_sm_read_bond</STRONG> (Thumb, 70 bytes, Stack size 96 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_sm_read_bond &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_peer_sec
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_chk_repeat_pairing
</UL>

<P><STRONG><a name="[566]"></a>ble_sm_chk_repeat_pairing</STRONG> (Thumb, 156 bytes, Stack size 112 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ble_sm_chk_repeat_pairing &rArr; ble_sm_read_bond &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_repeat_pairing_event
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_read_bond
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[576]"></a>ble_sm_key_dist</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_sm_key_dist
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_cfg
</UL>

<P><STRONG><a name="[569]"></a>ble_sm_chk_store_overflow_by_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_chk_store_overflow
</UL>

<P><STRONG><a name="[568]"></a>ble_sm_chk_store_overflow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_sm_chk_store_overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_chk_store_overflow_by_type
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[56a]"></a>ble_sm_start_encrypt_tx</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_sm_start_encrypt_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx_empty_ack
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_start_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_restore_exec
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_start_exec
</UL>

<P><STRONG><a name="[100]"></a>ble_sm_enc_start_exec</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ble_sm_enc_start_exec &rArr; ble_sm_start_encrypt_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_start_encrypt_tx
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>ble_sm_enc_restore_exec</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_sm_enc_restore_exec &rArr; ble_sm_start_encrypt_tx &rArr; ble_hs_hci_cmd_tx_empty_ack &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_start_encrypt_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[56b]"></a>ble_sm_enc_event_rx</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = ble_sm_enc_event_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_update_sec_state
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_key_refresh_rx
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_change_rx
</UL>

<P><STRONG><a name="[56c]"></a>ble_sm_retrieve_ltk</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_sm_retrieve_ltk &rArr; ble_store_read_our_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_our_sec
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
</UL>

<P><STRONG><a name="[56e]"></a>ble_sm_ltk_req_reply_tx</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_sm_ltk_req_reply_tx &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_lt_key_req_reply
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_restore_exec
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_start_exec
</UL>

<P><STRONG><a name="[56f]"></a>ble_sm_ltk_req_neg_reply_tx</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_sm_ltk_req_neg_reply_tx &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_build_le_lt_key_req_neg_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_restore_exec
</UL>

<P><STRONG><a name="[fe]"></a>ble_sm_ltk_start_exec</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ble_sm_ltk_start_exec &rArr; ble_sm_ltk_req_reply_tx &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_reply_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>ble_sm_ltk_restore_exec</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_sm_ltk_restore_exec &rArr; ble_sm_ltk_req_reply_tx &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_neg_reply_tx
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_reply_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>ble_sm_random_exec</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_sm_random_exec &rArr; ble_sm_lgcy_random_exec &rArr; ble_sm_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>ble_sm_random_rx</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = ble_sm_random_rx &rArr; ble_sm_lgcy_random_rx &rArr; ble_sm_alg_c1 &rArr; ble_sm_alg_encrypt &rArr; tc_aes_encrypt &rArr; shift_rows &rArr; _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_peer_pair_rand
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>ble_sm_confirm_exec</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = ble_sm_confirm_exec &rArr; ble_sm_lgcy_confirm_exec &rArr; ble_sm_alg_c1 &rArr; ble_sm_alg_encrypt &rArr; tc_aes_encrypt &rArr; shift_rows &rArr; _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>ble_sm_confirm_rx</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_sm_confirm_rx &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_can_advance
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ioact_state
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_io_action
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[57b]"></a>ble_sm_state_after_pair</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
</UL>

<P><STRONG><a name="[575]"></a>ble_sm_pair_cfg</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_sm_pair_cfg &rArr; ble_sm_io_action &rArr; ble_sm_lgcy_io_action
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_dist
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_io_action
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[577]"></a>ble_sm_pair_base_fill</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_sm_pair_base_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_build_authreq
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_fill
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_fill
</UL>

<P><STRONG><a name="[579]"></a>ble_sm_pair_req_fill</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_sm_pair_req_fill &rArr; ble_sm_pair_base_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_base_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
</UL>

<P><STRONG><a name="[57a]"></a>ble_sm_pair_rsp_fill</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_sm_pair_rsp_fill &rArr; ble_sm_pair_base_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_base_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[fb]"></a>ble_sm_pair_exec</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ble_sm_pair_exec &rArr; ble_sm_gen_pair_rand &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_our_pair_rand
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ioact_state
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_pair_rand
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_fill
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_state_after_pair
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_io_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[57d]"></a>ble_sm_verify_auth_requirements</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[ef]"></a>ble_sm_pair_req_rx</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ble_sm_pair_req_rx &rArr; ble_sm_chk_repeat_pairing &rArr; ble_sm_read_bond &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_verify_auth_requirements
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_fill
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_cfg
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_chk_store_overflow
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_chk_repeat_pairing
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_insert
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_remove
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_free
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>ble_sm_pair_rsp_rx</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_sm_pair_rsp_rx &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_can_advance
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ioact_state
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_cfg
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_state_after_pair
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_io_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>ble_sm_sec_req_exec</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ble_sm_sec_req_exec &rArr; ble_sm_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_build_authreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>ble_sm_sec_req_rx</STRONG> (Thumb, 220 bytes, Stack size 184 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = ble_sm_sec_req_rx &rArr; ble_sm_enc_initiate &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_peer_sec
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[57e]"></a>ble_sm_key_exch_success</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_sm_key_exch_success &rArr; ble_sm_update_sec_state
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_update_sec_state
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[102]"></a>ble_sm_key_exch_exec</STRONG> (Thumb, 560 bytes, Stack size 88 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ble_sm_key_exch_exec &rArr; ble_sm_gen_csrk &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_success
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_dist
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_csrk
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_ltk
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_master_id_rand
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_ediv
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_our_irk
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[580]"></a>ble_sm_key_rxed</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_sm_key_rxed &rArr; ble_sm_key_exch_success &rArr; ble_sm_update_sec_state
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_success
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_rx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_master_id_rx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
</UL>

<P><STRONG><a name="[f4]"></a>ble_sm_enc_info_rx</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_sm_enc_info_rx &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>ble_sm_master_id_rx</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_sm_master_id_rx &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>ble_sm_id_info_rx</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_sm_id_info_rx &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>ble_sm_id_addr_info_rx</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_sm_id_addr_info_rx &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>ble_sm_sign_info_rx</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_sm_sign_info_rx &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>ble_sm_fail_rx</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_sm_fail_rx &rArr; ble_hs_mbuf_pullup_base &rArr; os_mbuf_pullup &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>ble_sm_rx</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ble_sm_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gattc_indicate &rArr; ble_gattc_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_read &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_store_read &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_get_conn_handle
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_dispatch_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.text)
</UL>
<P><STRONG><a name="[54e]"></a>ble_npl_time_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ble_npl_time_get &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_extract_expired
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_set_timer
</UL>

<P><STRONG><a name="[581]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
</UL>

<P><STRONG><a name="[58c]"></a>ble_sm_alg_xor_128</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, ble_sm_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_sm_alg_xor_128
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
</UL>

<P><STRONG><a name="[584]"></a>ble_sm_alg_encrypt</STRONG> (Thumb, 74 bytes, Stack size 208 bytes, ble_sm_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ble_sm_alg_encrypt &rArr; tc_aes_encrypt &rArr; shift_rows &rArr; _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes128_set_encrypt_key
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_in_place
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_s1
</UL>

<P><STRONG><a name="[58b]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_sm_alg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
</UL>

<P><STRONG><a name="[58e]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_sm_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_log
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_log
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_master_id_log
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_fail_log
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_cmd_log
</UL>

<P><STRONG><a name="[59a]"></a>ble_sm_gen_stk</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_sm_lgcy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ble_sm_gen_stk &rArr; ble_sm_alg_s1 &rArr; ble_sm_alg_encrypt &rArr; tc_aes_encrypt &rArr; shift_rows &rArr; _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_s1
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
</UL>

<P><STRONG><a name="[59d]"></a>ble_store_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_store_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_full_event
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_overflow_event
</UL>

<P><STRONG><a name="[5a1]"></a>ble_store_persist_sec</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_store_persist_sec &rArr; ble_store_write &rArr; ble_hs_lock &rArr; ble_hs_lock_nested &rArr; npl_tencentos_tiny_mutex_pend &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_peer_sec
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_our_sec
</UL>

<P><STRONG><a name="[5b]"></a>ble_store_util_iter_unique_peer</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ble_store_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_store_util_iter_unique_peer &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_store_util.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>ble_store_util_iter_count</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_store_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_store_util_iter_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_store_util.o(.text)
</UL>
<P><STRONG><a name="[5be]"></a>ble_ll_count_rx_adv_pdus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_count_rx_stats
</UL>

<P><STRONG><a name="[5bb]"></a>ble_ll_tx_pkt_in</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ble_ll_tx_pkt_in &rArr; ble_ll_conn_tx_pkt_in &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_pkt_in
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_tx_pkt
</UL>

<P><STRONG><a name="[5bd]"></a>ble_ll_count_rx_stats</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_count_rx_stats
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_count_rx_adv_pdus
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pkt_in
</UL>

<P><STRONG><a name="[5bf]"></a>ble_ll_rx_pkt_in</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ble_ll_rx_pkt_in &rArr; ble_ll_adv_rx_pkt_in &rArr; ble_ll_adv_conn_req_rxd &rArr; ble_ll_conn_slave_start &rArr; ble_ll_conn_created &rArr; ble_ll_conn_next_event &rArr; ble_ll_conn_chk_csm_flags &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_pkt_in
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_pkt_in
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_count_rx_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_rx_pkt
</UL>

<P><STRONG><a name="[62]"></a>ble_ll_hw_err_timer_cb</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_ll_hw_err_timer_cb &rArr; ble_npl_callout_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_hw_err
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>ble_ll_event_rx_pkt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ble_ll_event_rx_pkt &rArr; ble_ll_rx_pkt_in &rArr; ble_ll_adv_rx_pkt_in &rArr; ble_ll_adv_conn_req_rxd &rArr; ble_ll_conn_slave_start &rArr; ble_ll_conn_created &rArr; ble_ll_conn_next_event &rArr; ble_ll_conn_chk_csm_flags &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pkt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>ble_ll_event_tx_pkt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_ll_event_tx_pkt &rArr; ble_ll_tx_pkt_in &rArr; ble_ll_conn_tx_pkt_in &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_tx_pkt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>ble_ll_event_dbuf_overflow</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_event_dbuf_overflow &rArr; ble_ll_hci_ev_databuf_overflow &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_databuf_overflow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>ble_ll_event_comp_pkts</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_ll_event_comp_pkts &rArr; ble_ll_conn_num_comp_pkts_event_send &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_num_comp_pkts_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll.o(.text)
</UL>
<P><STRONG><a name="[5e2]"></a>ble_ll_flush_pkt_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_ll_flush_pkt_queue &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
</UL>

<P><STRONG><a name="[5f0]"></a>ble_ll_seed_prng</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_seed_prng &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
</UL>

<P><STRONG><a name="[5c7]"></a>ble_npl_eventq_put</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_send
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_data_buffer_overflow
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_acl_data_in
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pdu_in
</UL>

<P><STRONG><a name="[5f8]"></a>ble_npl_event_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_ll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
</UL>

<P><STRONG><a name="[5cb]"></a>ble_npl_callout_reset</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_npl_callout_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_error
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hw_err_timer_cb
</UL>

<P><STRONG><a name="[5c0]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_enter_critical &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_acl_data_in
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pkt_in
</UL>

<P><STRONG><a name="[5c1]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_acl_data_in
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_pkt_in
</UL>

<P><STRONG><a name="[5f4]"></a>ble_ll_is_addr_empty</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_is_addr_empty &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init
</UL>

<P><STRONG><a name="[5ff]"></a>ble_ll_adv_flags_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_flags_set &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_adv_data
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_scan_rsp_data
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rpa_timeout
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rpa_update
</UL>

<P><STRONG><a name="[602]"></a>ble_ll_adv_flags_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_flags_clear &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_adv_data
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_scan_rsp_data
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_chk_rpa_timeout
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_start
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_update_adv_scan_rsp_data
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rpa_update
</UL>

<P><STRONG><a name="[603]"></a>ble_ll_adv_rpa_update</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_rpa_update &rArr; ble_ll_resolv_gen_rpa &rArr; ble_ll_resolv_get_priv_addr &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_gen_rpa
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_clear
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_chk_rpa_timeout
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_start
</UL>

<P><STRONG><a name="[625]"></a>ble_ll_adv_first_chan</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_ll_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_start
</UL>

<P><STRONG><a name="[60b]"></a>ble_ll_adv_final_chan</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_ll_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_event_rmvd_from_sched
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_drop_event
</UL>

<P><STRONG><a name="[66]"></a>ble_ll_adv_legacy_pdu_make</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_ll_adv_legacy_pdu_make &rArr; os_mbuf_copydata
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_adv.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>ble_ll_adv_scan_rsp_legacy_pdu_make</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_ll_adv_scan_rsp_legacy_pdu_make &rArr; os_mbuf_copydata
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_adv.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>ble_ll_adv_tx_done</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_tx_done &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_active_chanset_clear
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_active_chanset_is_pri
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_txpwr_set
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_wfr_timer_exp
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_isr_start
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_isr_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_adv.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>ble_ll_adv_tx_start_cb</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_tx_start_cb &rArr; ble_ll_adv_tx_done &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx_set_start_time
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_setchan
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_txend_cb
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_resolv_list_enable
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_resolv_list_disable
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_encrypt_disable
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_enable
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_disable
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enabled
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_done
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_txpwr_set
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_adv.o(.text)
</UL>
<P><STRONG><a name="[616]"></a>ble_ll_adv_set_sched</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_adv_set_sched &rArr; os_cputime_usecs_to_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_pdu_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_start
</UL>

<P><STRONG><a name="[61a]"></a>ble_ll_adv_update_adv_scan_rsp_data</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_update_adv_scan_rsp_data &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
</UL>

<P><STRONG><a name="[61b]"></a>ble_ll_adv_sm_stop</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_sm_stop &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_free
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rfclk_chk_restart
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_active_chanset_clear
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_remove
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_update_adv_scan_rsp_data
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_get
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_enable
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_conn_req_rxd
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop_timeout
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_reset
</UL>

<P><STRONG><a name="[621]"></a>ble_ll_adv_sm_stop_timeout</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_sm_stop_timeout &rArr; ble_ll_adv_sm_stop &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
</UL>

<P><STRONG><a name="[68]"></a>ble_ll_adv_scheduled</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_adv_scheduled &rArr; os_cputime_usecs_to_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_adv.o(.text)
</UL>
<P><STRONG><a name="[623]"></a>ble_ll_adv_sm_start</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_sm_start &rArr; ble_ll_sched_adv_new &rArr; ble_ll_xcvr_rfclk_timer_start &rArr; os_cputime_timer_start &rArr; hal_timer_start_at &rArr; nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_access_addr
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_new
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_sched
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_first_chan
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rpa_update
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_clear
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_valid_random_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_enable
</UL>

<P><STRONG><a name="[629]"></a>ble_ll_adv_update_data_mbuf</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_update_data_mbuf &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_adv_data
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_scan_rsp_data
</UL>

<P><STRONG><a name="[62b]"></a>instance_configured</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_ll_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_adv_data
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_scan_rsp_data
</UL>

<P><STRONG><a name="[62e]"></a>ble_ll_adv_already_connected</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_adv_already_connected &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_req
</UL>

<P><STRONG><a name="[62f]"></a>ble_ll_adv_rx_req</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ble_ll_adv_rx_req &rArr; ble_phy_tx &rArr; ble_phy_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_txend_cb
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_match
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_irk_nonzero
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enabled
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_resolv_list_match
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_already_connected
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_rpa
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_isr_end
</UL>

<P><STRONG><a name="[635]"></a>ble_ll_adv_conn_req_rxd</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_conn_req_rxd &rArr; ble_ll_conn_slave_start &rArr; ble_ll_conn_created &rArr; ble_ll_conn_next_event &rArr; ble_ll_conn_chk_csm_flags &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_peer_rpa
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_slave_start
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_pkt_in
</UL>

<P><STRONG><a name="[638]"></a>ble_ll_adv_drop_event</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_drop_event &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_final_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_reschedule_event
</UL>

<P><STRONG><a name="[639]"></a>ble_ll_adv_reschedule_event</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_reschedule_event &rArr; ble_ll_adv_drop_event &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_reschedule
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_drop_event
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
</UL>

<P><STRONG><a name="[63b]"></a>ble_ll_adv_done</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_done &rArr; ble_ll_adv_sm_stop_timeout &rArr; ble_ll_adv_sm_stop &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rfclk_chk_restart
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_resched_pdu
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_chk_rpa_timeout
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_remove
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_put
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_reschedule_event
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop_timeout
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_update_adv_scan_rsp_data
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_sched
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_final_chan
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_first_chan
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_event_done
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_make_done
</UL>

<P><STRONG><a name="[63d]"></a>ble_ll_adv_make_done</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_make_done &rArr; ble_ll_adv_done &rArr; ble_ll_adv_sm_stop_timeout &rArr; ble_ll_adv_sm_stop &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_active_chanset_clear
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_active_chanset_is_pri
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rx_pkt_in
</UL>

<P><STRONG><a name="[6a]"></a>ble_ll_adv_event_done</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_event_done &rArr; ble_ll_adv_done &rArr; ble_ll_adv_sm_stop_timeout &rArr; ble_ll_adv_sm_stop &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_adv.o(.text)
</UL>
<P><STRONG><a name="[641]"></a>ble_ll_adv_sm_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_ll_adv_sm_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_reset
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_init
</UL>

<P><STRONG><a name="[608]"></a>ble_npl_eventq_put</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_halt
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_event_rmvd_from_sched
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_drop_event
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_done
</UL>

<P><STRONG><a name="[620]"></a>ble_npl_eventq_remove</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_done
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
</UL>

<P><STRONG><a name="[600]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_enter_critical &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_active_chanset_clear
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_clear
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_set
</UL>

<P><STRONG><a name="[601]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_active_chanset_clear
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_start_cb
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_clear
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_flags_set
</UL>

<P><STRONG><a name="[607]"></a>ble_ll_adv_active_chanset_is_pri</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_ll_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_make_done
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_done
</UL>

<P><STRONG><a name="[609]"></a>ble_ll_adv_active_chanset_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_ll_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ble_ll_adv_active_chanset_clear &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_halt
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_make_done
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_sm_stop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_tx_done
</UL>

<P><STRONG><a name="[642]"></a>ble_ll_conn_calc_itvl_ticks</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_conn_calc_itvl_ticks &rArr; os_cputime_ticks_to_usecs
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_ticks_to_usecs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_sm_new
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_next_event
</UL>

<P><STRONG><a name="[644]"></a>ble_ll_init_get_conn_comp_ev</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_init_get_conn_comp_ev
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
</UL>

<P><STRONG><a name="[68c]"></a>ble_ll_conn_is_empty_pdu</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_ll_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
</UL>

<P><STRONG><a name="[646]"></a>ble_ll_conn_current_sm_over</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_current_sm_over &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_send
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_timeout
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rxend_unencrypt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_txend_encrypt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_wait_txend
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_wfr_timer_exp
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
</UL>

<P><STRONG><a name="[647]"></a>ble_ll_conn_calc_dci_csa1</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_ll_conn_calc_dci_csa1 &rArr; ble_ll_utils_remapped_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_remapped_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_calc_dci
</UL>

<P><STRONG><a name="[6b]"></a>ble_ll_conn_wait_txend</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_wait_txend &rArr; ble_ll_conn_current_sm_over &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_current_sm_over
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>ble_ll_conn_start_rx_encrypt</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_ll_conn_start_rx_encrypt &rArr; ble_phy_encrypt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_encrypt_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>ble_ll_conn_start_rx_unencrypt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_conn_start_rx_unencrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_encrypt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>ble_ll_conn_txend_encrypt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_txend_encrypt &rArr; ble_ll_conn_current_sm_over &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_current_sm_over
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>ble_ll_conn_rxend_unencrypt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_rxend_unencrypt &rArr; ble_ll_conn_current_sm_over &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_current_sm_over
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>ble_ll_conn_continue_rx_encrypt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_conn_continue_rx_encrypt &rArr; ble_phy_encrypt_set_pkt_cntr
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_encrypt_set_pkt_cntr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[64d]"></a>ble_ll_conn_get_next_sched_time</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_get_next_sched_time &rArr; ble_ll_sched_next_time &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_next_time
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_can_send_next_pdu
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
</UL>

<P><STRONG><a name="[64f]"></a>ble_ll_conn_chk_csm_flags</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_chk_csm_flags &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_ltk_req
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_conn_update
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_reject_ind_send
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_next_event
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_data_pdu
</UL>

<P><STRONG><a name="[654]"></a>ble_ll_conn_adjust_pyld_len</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_ll_conn_adjust_pyld_len &rArr; ble_ll_pdu_max_tx_octets_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_pdu_max_tx_octets_get
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
</UL>

<P><STRONG><a name="[655]"></a>ble_ll_conn_tx_data_pdu</STRONG> (Thumb, 1064 bytes, Stack size 136 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_tx_data_pdu &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_encrypt_set_pkt_cntr
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_encrypt_enable
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_is_terminate_ind
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_is_start_enc_rsp
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_enc_allowed_pdu_tx
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_adjust_pyld_len
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_get_next_sched_time
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_txend_cb
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_encrypt_disable
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_pdu_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_start_cb
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
</UL>

<P><STRONG><a name="[72]"></a>ble_ll_conn_event_start_cb</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_event_start_cb &rArr; ble_ll_conn_tx_data_pdu &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_wfr_enable
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_set_start_time
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_encrypt_enable
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_tx_data_pdu
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx_set_start_time
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_setchan
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_resolv_list_disable
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_encrypt_disable
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_disable
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_send
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[65b]"></a>ble_ll_conn_can_send_next_pdu</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_can_send_next_pdu &rArr; ble_ll_conn_get_next_sched_time &rArr; ble_ll_sched_next_time &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_ticks_to_usecs
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_get_next_sched_time
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_pdu_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_rx_isr_end
</UL>

<P><STRONG><a name="[662]"></a>ble_ll_conn_master_common_init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_ll_conn_master_common_init &rArr; ble_ll_utils_calc_access_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_access_addr
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_master_init
</UL>

<P><STRONG><a name="[665]"></a>ble_ll_update_max_tx_octets_phy_mode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_ll_update_max_tx_octets_phy_mode &rArr; ble_ll_pdu_max_tx_octets_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_pdu_max_tx_octets_get
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_datalen_update
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_sm_new
</UL>

<P><STRONG><a name="[666]"></a>ble_ll_conn_set_csa</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_ll_conn_set_csa &rArr; ble_ll_conn_calc_dci &rArr; ble_ll_utils_calc_dci_csa2 &rArr; ble_ll_utils_remapped_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_calc_dci
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_slave_start
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_pkt_in
</UL>

<P><STRONG><a name="[66b]"></a>ble_ll_conn_next_event</STRONG> (Thumb, 642 bytes, Stack size 40 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_next_event &rArr; ble_ll_conn_chk_csm_flags &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_ticks_to_usecs
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_window_widening
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_num_used_chans
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_terminate_start
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_calc_dci
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_chk_csm_flags
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_calc_itvl_ticks
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_created
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_end
</UL>

<P><STRONG><a name="[73]"></a>ble_ll_conn_event_end</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_event_end &rArr; ble_ll_conn_next_event &rArr; ble_ll_conn_chk_csm_flags &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_used_feat
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_chk_proc_start
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_end
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_eventq_remove
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_next_event
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rfclk_chk_restart
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_num_comp_pkts_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[674]"></a>ble_ll_conn_created</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_created &rArr; ble_ll_conn_next_event &rArr; ble_ll_conn_chk_csm_flags &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_ticks_to_usecs
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_slave_new
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_next_event
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_get_conn_comp_ev
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_le_csa
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_send_conn_comp_ev
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_pdu_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_slave_start
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_pkt_in
</UL>

<P><STRONG><a name="[676]"></a>ble_ll_conn_connect_ind_prepare</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_ll_conn_connect_ind_prepare &rArr; ble_ll_resolv_get_priv_addr &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_get_priv_addr
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enabled
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_rpa
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[678]"></a>ble_ll_conn_is_peer_adv</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_ll_conn_is_peer_adv &rArr; ble_ll_resolv_list_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_irk_nonzero
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enabled
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_addr_is_id
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_init_rx_isr_end
</UL>

<P><STRONG><a name="[74]"></a>ble_ll_conn_connect_ind_txend_to_standby</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_conn_connect_ind_txend_to_standby
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>ble_ll_conn_connect_ind_txend_to_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_conn_connect_ind_txend_to_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>ble_ll_conn_connect_ind_tx_pducb</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_conn_connect_ind_tx_pducb
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le32
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_get_pdu_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn.o(.text)
</UL>
<P><STRONG><a name="[669]"></a>ble_npl_eventq_remove</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_eventq_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_end
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_end
</UL>

<P><STRONG><a name="[668]"></a>ble_npl_callout_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ble_npl_callout_stop &rArr; npl_tencentos_tiny_callout_stop &rArr; tos_timer_stop &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_end
</UL>

<P><STRONG><a name="[686]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_enter_critical &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_enqueue_pkt
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_timeout
</UL>

<P><STRONG><a name="[687]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_enqueue_pkt
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_timeout
</UL>

<P><STRONG><a name="[693]"></a>ble_ll_init_alloc_conn_comp_ev</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_init_alloc_conn_comp_ev &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create
</UL>

<P><STRONG><a name="[69c]"></a>ble_ll_conn_hci_chk_scan_params</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create
</UL>

<P><STRONG><a name="[69f]"></a>ble_ll_conn_process_conn_params</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ble_ll_conn_process_conn_params &rArr; ble_ll_conn_hci_chk_conn_params
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_chk_conn_params
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_param_reply
</UL>

<P><STRONG><a name="[77]"></a>ble_ll_conn_hci_cancel_conn_complete_event</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_ll_conn_hci_cancel_conn_complete_event &rArr; ble_ll_conn_comp_event_send &rArr; ble_ll_hci_event_send &rArr; ble_hci_trans_ll_evt_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_comp_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_conn_hci.o(.text)
</UL>
<P><STRONG><a name="[699]"></a>ble_npl_time_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_ll_conn_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ble_npl_time_get &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_num_comp_pkts_event_send
</UL>

<P><STRONG><a name="[6b6]"></a>ble_ll_ctrl_len_proc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_len_proc &rArr; ble_ll_conn_datalen_update &rArr; ble_ll_hci_ev_datalen_chg &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_datalen_update
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[78]"></a>ble_ll_ctrl_proc_rsp_timer_cb</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_proc_rsp_timer_cb &rArr; ble_ll_conn_timeout &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_ctrl.o(.text)
</UL>
<P><STRONG><a name="[6b7]"></a>ble_ll_ctrl_start_rsp_timer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_start_rsp_timer &rArr; npl_tencentos_tiny_callout_init &rArr; tos_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_reset
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_init
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_start_enc_send
</UL>

<P><STRONG><a name="[6b8]"></a>ble_ll_ctrl_enc_req_make</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_enc_req_make &rArr; ble_ll_rand_data_get &rArr; ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le64
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
</UL>

<P><STRONG><a name="[6ba]"></a>ble_ll_ctrl_datalen_upd_make</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_ctrl_datalen_upd_make
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
</UL>

<P><STRONG><a name="[6bb]"></a>ble_ll_ctrl_conn_param_pdu_make</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_ctrl_conn_param_pdu_make
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_reply
</UL>

<P><STRONG><a name="[6bc]"></a>ble_ll_ctrl_version_ind_make</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_ctrl_version_ind_make
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_version_ind
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
</UL>

<P><STRONG><a name="[6bd]"></a>ble_ll_ctrl_chanmap_req_make</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_ctrl_chanmap_req_make
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
</UL>

<P><STRONG><a name="[6be]"></a>ble_ll_ctrl_conn_upd_make</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_ll_ctrl_conn_upd_make
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_reject_ind
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_unk_rsp
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_init
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_reply
</UL>

<P><STRONG><a name="[6bf]"></a>ble_ll_ctrl_proc_init</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le32
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_enqueue_pkt
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_read_supp_features
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_upd_make
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_chanmap_req_make
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_version_ind_make
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_pdu_make
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_datalen_upd_make
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_enc_req_make
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_terminate_start
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_start
</UL>

<P><STRONG><a name="[6c1]"></a>ble_ll_ctrl_rx_ping_rsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_rx_ping_rsp &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6c2]"></a>ble_ll_ctrl_conn_param_pdu_proc</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_conn_param_pdu_proc &rArr; ble_ll_ctrl_conn_param_reply &rArr; ble_ll_ctrl_conn_upd_make
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_chk_conn_params
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rem_conn_parm_req
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_le_event_enabled
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_conn_param_rsp
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_conn_param_req
</UL>

<P><STRONG><a name="[6c4]"></a>ble_ll_ctrl_proc_unk_rsp</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_proc_unk_rsp &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_used_feat
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_conn_update
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_upd_make
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6c6]"></a>ble_ll_ctrl_enc_allowed_pdu</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_ll_ctrl_enc_allowed_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_enc_allowed_pdu_tx
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_enc_allowed_pdu_rx
</UL>

<P><STRONG><a name="[6c7]"></a>ble_ll_ctrl_rx_enc_rsp</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_ll_ctrl_rx_enc_rsp &rArr; ble_ll_calc_session_key &rArr; ble_hw_encrypt_block
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_calc_session_key
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6c8]"></a>ble_ll_ctrl_rx_enc_req</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_rx_enc_req &rArr; ble_ll_rand_data_get &rArr; ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le64
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6d3]"></a>ble_ll_ctrl_rx_start_enc_req</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6d4]"></a>ble_ll_ctrl_rx_pause_enc_req</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6d5]"></a>ble_ll_ctrl_rx_pause_enc_rsp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6c9]"></a>ble_ll_ctrl_rx_start_enc_rsp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_rx_start_enc_rsp &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_auth_pyld_timer_start
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_encrypt_chg
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6cb]"></a>ble_ll_ctrl_rx_reject_ind</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_rx_reject_ind &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_conn_update
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_encrypt_chg
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_upd_make
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6cc]"></a>ble_ll_ctrl_rx_conn_update</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_rx_conn_update &rArr; ble_ll_conn_timeout &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6cd]"></a>ble_ll_ctrl_rx_feature_req</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_ctrl_rx_feature_req
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le32
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_read_supp_features
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6ce]"></a>ble_ll_ctrl_rx_feature_rsp</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_rx_feature_rsp &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_used_feat
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6cf]"></a>ble_ll_ctrl_rx_conn_param_req</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_rx_conn_param_req &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_conn_update
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_pdu_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6d0]"></a>ble_ll_ctrl_rx_conn_param_rsp</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_rx_conn_param_rsp &rArr; ble_ll_ctrl_conn_param_pdu_proc &rArr; ble_ll_ctrl_conn_param_reply &rArr; ble_ll_ctrl_conn_upd_make
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_conn_param_pdu_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6d1]"></a>ble_ll_ctrl_rx_version_ind</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_rx_version_ind &rArr; ble_ll_ctrl_proc_stop &rArr; ble_ll_ctrl_chk_proc_start &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_proc_stop
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ev_rd_rem_ver
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_version_ind_make
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6d2]"></a>ble_ll_ctrl_rx_chanmap_req</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_ll_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ble_ll_ctrl_rx_chanmap_req &rArr; ble_ll_conn_timeout &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_ctrl_rx_pdu
</UL>

<P><STRONG><a name="[6d7]"></a>ble_ll_hci_get_num_cmd_pkts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_ll_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_send_noop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_cmd_proc
</UL>

<P><STRONG><a name="[6d8]"></a>ble_ll_hci_le_encrypt</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_ll_hci_le_encrypt &rArr; swap_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_encrypt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6d9]"></a>ble_ll_hci_le_rand</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_le_rand &rArr; ble_ll_rand_data_get &rArr; ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6da]"></a>ble_ll_hci_rd_local_version</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_hci_rd_local_version
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_info_params_cmd_proc
</UL>

<P><STRONG><a name="[6fd]"></a>ble_ll_hci_rd_local_supp_feat</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_ll_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_info_params_cmd_proc
</UL>

<P><STRONG><a name="[6db]"></a>ble_ll_hci_rd_local_supp_cmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_hci_rd_local_supp_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_info_params_cmd_proc
</UL>

<P><STRONG><a name="[6fe]"></a>ble_ll_hci_rd_bd_addr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_ll_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_info_params_cmd_proc
</UL>

<P><STRONG><a name="[6e9]"></a>ble_ll_hci_set_le_event_mask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_ll_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6dc]"></a>ble_ll_hci_le_read_bufsize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_hci_le_read_bufsize
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6dd]"></a>ble_ll_hci_le_wr_sugg_data_len</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_hci_le_wr_sugg_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_chk_txrx_time
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_chk_txrx_octets
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6de]"></a>ble_ll_hci_le_rd_sugg_data_len</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_hci_le_rd_sugg_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6df]"></a>ble_ll_hci_le_rd_max_data_len</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_hci_le_rd_max_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6e0]"></a>ble_ll_hci_le_read_local_features</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_hci_le_read_local_features
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le32
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_read_supp_features
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6e1]"></a>ble_ll_hci_le_read_supp_states</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_ll_hci_le_read_supp_states &rArr; put_le64
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le64
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_read_supp_states
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6f9]"></a>ble_ll_hci_le_cmd_send_cmd_status</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ble_ll_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6e3]"></a>ble_ll_read_tx_power</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_read_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_txpower_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6e5]"></a>ble_ll_read_rf_path_compensation</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_read_rf_path_compensation
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6e6]"></a>ble_ll_write_rf_path_compensation</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_write_rf_path_compensation
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_rx_pwr_compensation
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
</UL>

<P><STRONG><a name="[6e8]"></a>ble_ll_hci_le_cmd_proc</STRONG> (Thumb, 932 bytes, Stack size 32 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_le_cmd_proc &rArr; ble_ll_conn_create &rArr; ble_ll_scan_initiator_start &rArr; ble_ll_scan_sm_start &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_neg_reply
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_ltk_reply
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_le_start_encrypt
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_set_data_len
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_set_chan_class
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_chan_map
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create_cancel
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_param_reply
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_update
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_read_rem_features
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_create
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_adv_data
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_scan_rsp_data
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_enable
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_read_txpwr
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_set_adv_params
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_clear
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_set_random_addr
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_rmv
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_read_size
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_add
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_set_scan_params
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_set_enable
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolve_set_priv_mode
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_rpa_tmo
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_peer_addr_rd
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_local_addr_rd
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_rmv
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_read_size
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_clr
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_add
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enable_cmd
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_write_rf_path_compensation
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_read_rf_path_compensation
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_read_tx_power
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_send_cmd_status
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_read_supp_states
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_read_local_features
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_rd_max_data_len
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_rd_sugg_data_len
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_wr_sugg_data_len
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_read_bufsize
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_set_le_event_mask
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_rand
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_cmd_proc
</UL>

<P><STRONG><a name="[6fa]"></a>ble_ll_hci_link_ctrl_cmd_proc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_link_ctrl_cmd_proc &rArr; ble_ll_conn_hci_disconnect_cmd &rArr; ble_ll_ctrl_terminate_start &rArr; ble_ll_ctrl_proc_init &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_rem_ver_cmd
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_disconnect_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_cmd_proc
</UL>

<P><STRONG><a name="[6fb]"></a>ble_ll_hci_ctlr_bb_cmd_proc</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_ctlr_bb_cmd_proc &rArr; ble_ll_reset &rArr; ble_ll_conn_module_reset &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_wr_auth_pyld_tmo
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_auth_pyld_tmo
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_reset
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_cmd_proc
</UL>

<P><STRONG><a name="[6fc]"></a>ble_ll_hci_info_params_cmd_proc</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_ll_hci_info_params_cmd_proc &rArr; ble_ll_hci_rd_local_version
</UL>
<BR>[Calls]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_rd_bd_addr
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_rd_local_supp_cmd
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_rd_local_supp_feat
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_rd_local_version
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_cmd_proc
</UL>

<P><STRONG><a name="[6ff]"></a>ble_ll_hci_status_params_cmd_proc</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_ll_hci_status_params_cmd_proc &rArr; ble_ll_conn_hci_rd_rssi
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_hci_rd_rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_cmd_proc
</UL>

<P><STRONG><a name="[79]"></a>ble_ll_hci_cmd_proc</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, ble_ll_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_cmd_proc &rArr; ble_ll_hci_ctlr_bb_cmd_proc &rArr; ble_ll_reset &rArr; ble_ll_conn_module_reset &rArr; ble_ll_conn_end &rArr; ble_npl_eventq_remove &rArr; npl_tencentos_tiny_eventq_remove &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_status_params_cmd_proc
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_info_params_cmd_proc
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_ctlr_bb_cmd_proc
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_link_ctrl_cmd_proc
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_le_cmd_proc
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_get_num_cmd_pkts
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_hci.o(.text)
</UL>
<P><STRONG><a name="[702]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_enter_critical &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_sample
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_data_get
</UL>

<P><STRONG><a name="[704]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_sample
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_data_get
</UL>

<P><STRONG><a name="[708]"></a>ble_ll_is_controller_busy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_is_controller_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_enabled
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_chg_allowed
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolve_set_priv_mode
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enable_cmd
</UL>

<P><STRONG><a name="[709]"></a>ble_ll_resolv_list_chg_allowed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_resolv_list_chg_allowed &rArr; ble_ll_is_controller_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_controller_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_rmv
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_clr
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_add
</UL>

<P><STRONG><a name="[70a]"></a>ble_ll_resolv_gen_priv_addr</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_ll_resolv_gen_priv_addr &rArr; ble_ll_rand_prand_get &rArr; ble_ll_rand_data_get &rArr; ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_prand_get
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_encrypt_block
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_rpa_timer_cb
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_add
</UL>

<P><STRONG><a name="[7a]"></a>ble_ll_resolv_rpa_timer_cb</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ble_ll_resolv_rpa_timer_cb &rArr; ble_ll_resolv_gen_priv_addr &rArr; ble_ll_rand_prand_get &rArr; ble_ll_rand_data_get &rArr; ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_rpa_timeout
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_reset
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_gen_priv_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_resolv.o(.text)
</UL>
<P><STRONG><a name="[70f]"></a>ble_ll_is_on_resolv_list</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_is_on_resolv_list &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_rmv
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_add
</UL>

<P><STRONG><a name="[70d]"></a>ble_npl_callout_reset</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ble_npl_callout_reset &rArr; npl_tencentos_tiny_callout_reset &rArr; tos_timer_delay_change &rArr; timer_change
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_rpa_timer_cb
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_rpa_tmo
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enable_cmd
</UL>

<P><STRONG><a name="[713]"></a>ble_npl_callout_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ble_npl_callout_stop &rArr; npl_tencentos_tiny_callout_stop &rArr; tos_timer_stop &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_tencentos_tiny_callout_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_reset
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enable_cmd
</UL>

<P><STRONG><a name="[714]"></a>ble_npl_time_ms_to_ticks32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_npl_time_ms_to_ticks32 &rArr; tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_init
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_rpa_tmo
</UL>

<P><STRONG><a name="[70b]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_enter_critical &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_local_rpa
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_get_priv_addr
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_peer_rpa
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_rpa_timer_cb
</UL>

<P><STRONG><a name="[70c]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_local_rpa
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_get_priv_addr
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_set_peer_rpa
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_rpa_timer_cb
</UL>

<P><STRONG><a name="[716]"></a>ble_ll_scan_req_backoff</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_scan_req_backoff
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_wfr_timer_exp
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_start
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_interrupted_event_cb
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>

<P><STRONG><a name="[717]"></a>ble_ll_scan_refresh_nrpa</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_refresh_nrpa &rArr; ble_ll_rand_data_get &rArr; ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_get_rpa_tmo
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rand_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_pdu_prepare
</UL>

<P><STRONG><a name="[71a]"></a>ble_ll_scan_req_pdu_prepare</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_req_pdu_prepare &rArr; ble_ll_scan_refresh_nrpa &rArr; ble_ll_rand_data_get &rArr; ble_hw_rng_start &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_get_priv_addr
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_list_find
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enabled
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_rpa
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_refresh_nrpa
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
</UL>

<P><STRONG><a name="[7b]"></a>ble_ll_scan_req_tx_pducb</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_ll_scan_req_tx_pducb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_scan.o(.text)
</UL>
<P><STRONG><a name="[71b]"></a>ble_ll_scan_have_rxd_scan_rsp</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_ll_scan_have_rxd_scan_rsp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_isr_end
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_add_scan_rsp_adv
</UL>

<P><STRONG><a name="[71c]"></a>ble_ll_scan_add_scan_rsp_adv</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_ll_scan_add_scan_rsp_adv &rArr; ble_ll_scan_have_rxd_scan_rsp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_have_rxd_scan_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
</UL>

<P><STRONG><a name="[71d]"></a>ble_ll_hci_send_adv_report</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_ll_hci_send_adv_report &rArr; ble_hci_trans_buf_alloc &rArr;  ble_hci_trans_buf_alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_trans_buf_alloc
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_is_le_event_enabled
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_send_adv_report
</UL>

<P><STRONG><a name="[71e]"></a>ble_ll_scan_dup_update_legacy</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_ll_scan_dup_update_legacy &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_send_adv_report
</UL>

<P><STRONG><a name="[71f]"></a>ble_ll_scan_send_adv_report</STRONG> (Thumb, 334 bytes, Stack size 80 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_send_adv_report &rArr; os_mbuf_adj &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put &rArr; os_memblock_put_from_cb &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_rpa
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_dup_update_legacy
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_hci_send_adv_report
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
</UL>

<P><STRONG><a name="[720]"></a>ble_ll_scan_chk_filter_policy</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_ll_scan_chk_filter_policy &rArr; ble_ll_is_our_devaddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_our_devaddr
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_rpa
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
</UL>

<P><STRONG><a name="[722]"></a>ble_ll_get_chan_to_scan</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_ll_get_chan_to_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_wfr_timer_exp
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>

<P><STRONG><a name="[721]"></a>ble_ll_scan_start</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_start &rArr; ble_phy_rx_set_start_time &rArr; ble_phy_set_start_now &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_set_start_time
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_setchan
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_txend_cb
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_resolv_list_enable
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_resolv_list_disable
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_encrypt_disable
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_enable
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_disable
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_resolv_enabled
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_get_chan_to_scan
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_backoff
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
</UL>

<P><STRONG><a name="[723]"></a>ble_ll_scan_rfclk_chk_stop</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_rfclk_chk_stop &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_next_time
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_disable
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_stop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_window_chk
</UL>

<P><STRONG><a name="[728]"></a>ble_ll_scan_get_next_adv_prim_chan</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_ll_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_get_current_scan_win
</UL>

<P><STRONG><a name="[727]"></a>ble_ll_scan_get_current_scan_win</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_scan_get_current_scan_win &rArr; os_cputime_usecs_to_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_get_next_adv_prim_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_window_chk
</UL>

<P><STRONG><a name="[729]"></a>ble_ll_scan_window_chk</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_window_chk &rArr; ble_ll_scan_rfclk_chk_stop &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_get_current_scan_win
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rfclk_chk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_wfr_timer_exp
</UL>

<P><STRONG><a name="[72b]"></a>ble_ll_scan_sm_start</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_sm_start &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_send
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_is_valid_random_addr
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_set_enable
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_initiator_start
</UL>

<P><STRONG><a name="[7d]"></a>ble_ll_scan_interrupted_event_cb</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_interrupted_event_cb &rArr; ble_ll_scan_chk_resume &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_req_backoff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_scan.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>ble_ll_scan_event_proc</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_event_proc &rArr; ble_ll_scan_start &rArr; ble_phy_rx_set_start_time &rArr; ble_phy_set_start_now &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_reset_pending_aux_conn_rsp
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_get
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_stop
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_time_till_settled
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_state
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_start_now
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_get_current_scan_win
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rfclk_chk_stop
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_scan.o(.text)
</UL>
<P><STRONG><a name="[735]"></a>ble_ll_scan_dup_check_legacy</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_dup_check_legacy &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_dup_move_to_head
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rx_pkt_in
</UL>

<P><STRONG><a name="[738]"></a>ble_ll_scan_common_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = ble_ll_scan_common_init &rArr; os_cputime_timer_init &rArr; hal_timer_set_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_init
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_get
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_reset
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_init
</UL>

<P><STRONG><a name="[739]"></a>ble_npl_event_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_ll_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_common_init
</UL>

<P><STRONG><a name="[718]"></a>ble_npl_time_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ble_npl_time_get &rArr; tos_systick_get &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_common_init
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_refresh_nrpa
</UL>

<P><STRONG><a name="[724]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_enter_critical &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_stop
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rfclk_chk_stop
</UL>

<P><STRONG><a name="[726]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_sm_stop
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_chk_resume
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_event_proc
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_rfclk_chk_stop
</UL>

<P><STRONG><a name="[732]"></a>ble_ll_get_addr_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_ll_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_adv_decode_addr
</UL>

<P><STRONG><a name="[736]"></a>ble_ll_scan_dup_move_to_head</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ble_ll_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_dup_check_legacy
</UL>

<P><STRONG><a name="[73e]"></a>ble_ll_sched_is_overlap</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_sched_is_overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_slave_new
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_master_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_reschedule
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_resched_pdu
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_new
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_periodic_adv
</UL>

<P><STRONG><a name="[73a]"></a>ble_ll_sched_overlaps_current</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_overlaps_current &rArr; ble_ll_conn_get_ce_end_time &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_get_ce_end_time
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_slave_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
</UL>

<P><STRONG><a name="[73b]"></a>ble_ll_sched_conn_overlap</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_conn_overlap &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_slave_new
</UL>

<P><STRONG><a name="[741]"></a>ble_ll_sched_insert_if_empty</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ble_ll_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_slave_new
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_master_new
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_reschedule
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_resched_pdu
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_new
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_periodic_adv
</UL>

<P><STRONG><a name="[744]"></a>ble_ll_sched_execute_item</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_execute_item &rArr; ble_ll_conn_event_halt &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_event_halt
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_conn_reset_pending_aux_conn_rsp
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_halt
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_get
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_set
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_disable
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_clean_cur_aux_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_run
</UL>

<P><STRONG><a name="[7e]"></a>ble_ll_sched_run</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ble_ll_sched_run &rArr; ble_ll_sched_execute_item &rArr; ble_ll_conn_event_halt &rArr; ble_ll_event_send &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_execute_item
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ll_sched.o(.text)
</UL>
<P><STRONG><a name="[73c]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_enter_critical &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_slave_new
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_next_time
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_master_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rfclk_chk_restart
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_reschedule
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_resched_pdu
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_new
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem_type
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_periodic_adv
</UL>

<P><STRONG><a name="[73d]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_slave_new
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_next_time
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_master_new
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_conn_reschedule
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rfclk_chk_restart
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_reschedule
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_resched_pdu
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_adv_new
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_rmv_elem_type
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_sched_periodic_adv
</UL>

<P><STRONG><a name="[748]"></a>ble_ll_utils_csa2_perm</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ble_ll_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_ll_utils_csa2_perm
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_csa2_prng
</UL>

<P><STRONG><a name="[747]"></a>ble_ll_utils_csa2_prng</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_ll_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_ll_utils_csa2_prng &rArr; ble_ll_utils_csa2_perm
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_csa2_perm
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_utils_calc_dci_csa2
</UL>

<P><STRONG><a name="[749]"></a>ble_ll_whitelist_chg_allowed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_ll_whitelist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ll_whitelist_chg_allowed &rArr; ble_ll_scan_can_chg_whitelist
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_adv_can_chg_whitelist
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_scan_can_chg_whitelist
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_clear
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_rmv
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_add
</UL>

<P><STRONG><a name="[74c]"></a>ble_ll_whitelist_search</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_ll_whitelist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_ll_whitelist_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_match
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_rmv
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_whitelist_add
</UL>

<P><STRONG><a name="[74d]"></a>ble_npl_hw_is_in_critical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_ll_xcvr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_enable
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_state
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_xcvr_rfclk_disable
</UL>

<P><STRONG><a name="[753]"></a>nrf_read_timer_cntr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_start
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_read
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_chk_queue
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_set_ocmp
</UL>

<P><STRONG><a name="[751]"></a>nrf_timer_set_ocmp</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_timer_set_ocmp
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_read_timer_cntr
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_start_at
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_chk_queue
</UL>

<P><STRONG><a name="[759]"></a>nrf_timer_disable_ocmp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_chk_queue
</UL>

<P><STRONG><a name="[758]"></a>nrf_rtc_disable_ocmp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_chk_queue
</UL>

<P><STRONG><a name="[754]"></a>hal_timer_read_bsptimer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_start
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_read
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_chk_queue
</UL>

<P><STRONG><a name="[757]"></a>hal_timer_chk_queue</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = hal_timer_chk_queue &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_exit_critical
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_hw_enter_critical
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_read_bsptimer
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_disable_ocmp
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_disable_ocmp
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_set_ocmp
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_read_timer_cntr
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_timer_irq_handler
</UL>

<P><STRONG><a name="[75a]"></a>hal_rtc_timer_irq_handler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = hal_rtc_timer_irq_handler &rArr; hal_timer_chk_queue &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_chk_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_timer5_irq_handler
</UL>

<P><STRONG><a name="[752]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_read_bsptimer
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_set_ocmp
</UL>

<P><STRONG><a name="[755]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_enter_critical &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_start_at
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_deinit
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_config
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_chk_queue
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_read_bsptimer
</UL>

<P><STRONG><a name="[756]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_start_at
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_deinit
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_config
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_chk_queue
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_read_bsptimer
</UL>

<P><STRONG><a name="[765]"></a>mem_malloc_mempool_gen</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mempool_ext
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_mempool
</UL>

<P><STRONG><a name="[780]"></a>_os_mbuf_leadingspace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _os_mbuf_leadingspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_dup
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_trim_front
</UL>

<P><STRONG><a name="[77d]"></a>_os_mbuf_trailingspace</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _os_mbuf_trailingspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
</UL>

<P><STRONG><a name="[77a]"></a>_os_msys_find_pool</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_mbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>

<P><STRONG><a name="[77c]"></a>_os_mbuf_copypkthdr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_mbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _os_mbuf_copypkthdr &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_dup
</UL>

<P><STRONG><a name="[776]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mqueue_put
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mqueue_get
</UL>

<P><STRONG><a name="[777]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mqueue_put
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mqueue_get
</UL>

<P><STRONG><a name="[783]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_enter_critical &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put_from_cb
</UL>

<P><STRONG><a name="[784]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put_from_cb
</UL>

<P><STRONG><a name="[788]"></a>os_msys_init_once</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, os_msys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = os_msys_init_once &rArr; mem_init_mbuf_pool &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init_mbuf_pool
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_register
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
</UL>

<P><STRONG><a name="[790]"></a>add_round_key</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, aes_encrypt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
</UL>

<P><STRONG><a name="[791]"></a>sub_bytes</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aes_encrypt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
</UL>

<P><STRONG><a name="[78c]"></a>mult_row_column</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, aes_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mult_row_column
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
</UL>

<P><STRONG><a name="[78e]"></a>shift_rows</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, aes_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shift_rows &rArr; _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
</UL>

<P><STRONG><a name="[78b]"></a>rotword</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aes_encrypt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes128_set_encrypt_key
</UL>

<P><STRONG><a name="[7f]"></a>ble_rng_isr</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ble_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_rng_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hw.o(.text)
</UL>
<P><STRONG><a name="[795]"></a>ble_npl_hw_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_enter_critical &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_rng_stop
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_rng_start
</UL>

<P><STRONG><a name="[796]"></a>ble_npl_hw_exit_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_rng_stop
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_rng_start
</UL>

<P><STRONG><a name="[7a6]"></a>ble_phy_apply_errata_102_106_107</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_set_access_addr
</UL>

<P><STRONG><a name="[7a3]"></a>nrf_wait_disabled</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx
</UL>

<P><STRONG><a name="[7a4]"></a>ble_phy_set_start_time</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_phy_set_start_time
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_set_start_time
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx_set_start_time
</UL>

<P><STRONG><a name="[798]"></a>ble_phy_set_start_now</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ble_phy_set_start_now &rArr; os_cputime_get32 &rArr; hal_timer_read &rArr; hal_timer_read_bsptimer &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_get32
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_set_start_time
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_restart_rx
</UL>

<P><STRONG><a name="[79a]"></a>ble_phy_get_ccm_datarate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_xcvr_setup
</UL>

<P><STRONG><a name="[799]"></a>ble_phy_rx_xcvr_setup</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_phy_rx_xcvr_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_get_ccm_datarate
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx_end_isr
</UL>

<P><STRONG><a name="[79b]"></a>ble_phy_tx_end_isr</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_phy_tx_end_isr &rArr; ble_phy_wfr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_wfr_enable
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_xcvr_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_isr
</UL>

<P><STRONG><a name="[79e]"></a>ble_phy_rx_end_isr</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ble_phy_rx_end_isr &rArr; ble_ll_rx_end &rArr; ble_ll_init_rx_isr_end &rArr; ble_ll_rx_pdu_in &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_end
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_isr
</UL>

<P><STRONG><a name="[79f]"></a>ble_phy_rx_start_isr</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ble_phy_rx_start_isr &rArr; ble_ll_rx_start &rArr; ble_ll_adv_rx_isr_start &rArr; ble_ll_adv_tx_done &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_ticks_to_usecs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cputime_usecs_to_ticks
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_disable
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_state_get
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_rx_start
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_get_cur_phy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_isr
</UL>

<P><STRONG><a name="[80]"></a>ble_phy_isr</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, ble_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ble_phy_isr &rArr; ble_phy_rx_end_isr &rArr; ble_ll_rx_end &rArr; ble_ll_init_rx_isr_end &rArr; ble_ll_rx_pdu_in &rArr; ble_npl_eventq_put &rArr; npl_tencentos_tiny_eventq_put &rArr; tos_msg_q_post &rArr; msg_q_do_post &rArr; msg_q_task_recv &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ll_wfr_timer_exp
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_start_isr
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_rx_end_isr
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_tx_end_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_phy.o(.text)
</UL>
<P><STRONG><a name="[7a1]"></a>ble_phy_dbg_time_setup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_phy_init
</UL>

<P><STRONG><a name="[7a7]"></a>ble_svc_gap_device_name_read_access</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_svc_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ble_svc_gap_device_name_read_access &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_access
</UL>

<P><STRONG><a name="[7a8]"></a>ble_svc_gap_device_name_write_access</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_svc_gap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_access
</UL>

<P><STRONG><a name="[7a9]"></a>ble_svc_gap_appearance_read_access</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_svc_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ble_svc_gap_appearance_read_access &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_access
</UL>

<P><STRONG><a name="[7aa]"></a>ble_svc_gap_appearance_write_access</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_svc_gap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_access
</UL>

<P><STRONG><a name="[5]"></a>ble_svc_gap_access</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ble_svc_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ble_svc_gap_access &rArr; ble_svc_gap_appearance_read_access &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get &rArr; ble_npl_hw_exit_critical &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_appearance_write_access
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_appearance_read_access
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_device_name_write_access
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_device_name_read_access
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_svc_gap.o(.data)
</UL>
<P><STRONG><a name="[7ac]"></a>ble_addr_cmp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_find_cccd
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_find_sec
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_print_key_sec
</UL>

<P><STRONG><a name="[7ad]"></a>ble_store_ram_print_value_sec</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_store_ram_print_value_sec &rArr; ble_hs_log_flat_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_peer_sec
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_our_sec
</UL>

<P><STRONG><a name="[7af]"></a>ble_store_ram_print_key_sec</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_store_ram_print_key_sec &rArr; ble_hs_log_flat_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_addr_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read
</UL>

<P><STRONG><a name="[7b0]"></a>ble_store_ram_find_sec</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_store_ram_find_sec &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_addr_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_peer_sec
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read_peer_sec
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_sec
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_our_sec
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read_our_sec
</UL>

<P><STRONG><a name="[7b1]"></a>ble_store_ram_read_our_sec</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_store_ram_read_our_sec &rArr; ble_store_ram_find_sec &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_find_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read
</UL>

<P><STRONG><a name="[7b2]"></a>ble_store_ram_write_our_sec</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_store_ram_write_our_sec &rArr; ble_store_ram_find_sec &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value_sec
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_find_sec
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_print_value_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write
</UL>

<P><STRONG><a name="[7b3]"></a>ble_store_ram_delete_obj</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_store_ram_delete_obj
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_cccd
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_sec
</UL>

<P><STRONG><a name="[7b4]"></a>ble_store_ram_delete_sec</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_store_ram_delete_sec &rArr; ble_store_ram_find_sec &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_obj
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_find_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_peer_sec
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_our_sec
</UL>

<P><STRONG><a name="[7b5]"></a>ble_store_ram_delete_our_sec</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_store_ram_delete_our_sec &rArr; ble_store_ram_delete_sec &rArr; ble_store_ram_find_sec &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete
</UL>

<P><STRONG><a name="[7b6]"></a>ble_store_ram_delete_peer_sec</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_store_ram_delete_peer_sec &rArr; ble_store_ram_delete_sec &rArr; ble_store_ram_find_sec &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete
</UL>

<P><STRONG><a name="[7b7]"></a>ble_store_ram_read_peer_sec</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_store_ram_read_peer_sec &rArr; ble_store_ram_find_sec &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_find_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read
</UL>

<P><STRONG><a name="[7b8]"></a>ble_store_ram_write_peer_sec</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_store_ram_write_peer_sec &rArr; ble_store_ram_find_sec &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value_sec
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_find_sec
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_print_value_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write
</UL>

<P><STRONG><a name="[7b9]"></a>ble_store_ram_find_cccd</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_store_ram_find_cccd &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_addr_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_cccd
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read_cccd
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_cccd
</UL>

<P><STRONG><a name="[7ba]"></a>ble_store_ram_delete_cccd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_store_ram_delete_cccd &rArr; ble_store_ram_find_cccd &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_find_cccd
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_delete
</UL>

<P><STRONG><a name="[7bb]"></a>ble_store_ram_read_cccd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_store_ram_read_cccd &rArr; ble_store_ram_find_cccd &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_find_cccd
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_read
</UL>

<P><STRONG><a name="[7bc]"></a>ble_store_ram_write_cccd</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, ble_store_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_store_ram_write_cccd &rArr; ble_store_ram_find_cccd &rArr; ble_addr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value_cccd
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_find_cccd
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write
</UL>

<P><STRONG><a name="[7ae]"></a>modlog_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_store_ram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_cccd
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_peer_sec
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_write_our_sec
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_print_key_sec
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_ram_print_value_sec
</UL>

<P><STRONG><a name="[83]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
