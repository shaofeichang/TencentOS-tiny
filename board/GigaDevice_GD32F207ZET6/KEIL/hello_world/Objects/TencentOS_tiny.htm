<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TencentOS_tiny.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TencentOS_tiny.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 28 16:55:53 2019
<BR><P>
<H3>Maximum Stack Usage =        156 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; board_init &rArr; gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[fe]">port_int_disable</a>
 <LI><a href="#[ff]">port_int_enable</a>
 <LI><a href="#[eb]">port_cpsr_save</a>
 <LI><a href="#[ea]">port_cpsr_restore</a>
 <LI><a href="#[e9]">port_clz</a>
 <LI><a href="#[8a]">port_sched_start</a>
 <LI><a href="#[84]">port_context_switch</a>
 <LI><a href="#[88]">port_irq_context_switch</a>
 <LI><a href="#[8]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[39]">ADC2_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32f20x_it.o(i.BusFault_Handler) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[1e]">CAN0_RX0_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[1d]">CAN0_TX_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[4c]">CAN1_EWMC_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[4a]">CAN1_RX0_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[4b]">CAN1_RX1_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[49]">CAN1_TX_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[54]">CAU_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[53]">DCI_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[42]">DMA1_Channel0_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[43]">DMA1_Channel1_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[44]">DMA1_Channel2_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[45]">DMA1_Channel3_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[46]">DMA1_Channel4_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[4e]">DMA1_Channel5_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[4f]">DMA1_Channel6_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from gd32f20x_it.o(i.DebugMon_Handler) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[47]">ENET_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[48]">ENET_WKUP_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[3a]">EXMC_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[55]">HAU_TRNG_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32f20x_it.o(i.HardFault_Handler) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[52]">I2C2_ER_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[51]">I2C2_EV_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32f20x_it.o(i.MemManage_Handler) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32f20x_it.o(i.NMI_Handler) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[f]">RCU_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from gd32f20x_it.o(i.SVC_Handler) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from gd32f20x_it.o(i.SysTick_Handler) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_gd32f20x.o(i.SystemInit) referenced from startup_gd32f20x_cl.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[3c]">TIMER4_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[40]">TIMER5_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[41]">TIMER6_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[59]">TLI_ER_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[58]">TLI_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[3e]">UART3_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[56]">UART6_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[57]">UART7_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[50]">USART5_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[4d]">USBFS_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[34]">USBFS_WKUP_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32f20x_it.o(i.UsageFault_Handler) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f20x_cl.o(.text) referenced from startup_gd32f20x_cl.o(RESET)
 <LI><a href="#[5c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f20x_cl.o(.text)
 <LI><a href="#[60]">application_entry</a> from main.o(i.application_entry) referenced from main.o(.constdata)
 <LI><a href="#[5d]">fputc</a> from main.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[5e]">knl_idle_entry</a> from tos_sys.o(i.knl_idle_entry) referenced from tos_sys.o(i.knl_idle_init)
 <LI><a href="#[5a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[61]">task1</a> from main.o(i.task1) referenced from main.o(.constdata)
 <LI><a href="#[62]">task2</a> from main.o(i.task2) referenced from main.o(.constdata)
 <LI><a href="#[5f]">task_exit</a> from tos_task.o(i.task_exit) referenced from tos_task.o(i.tos_task_create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[63]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[68]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[fa]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[fb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[fc]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[fd]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>HAU_TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TLI_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TLI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f20x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>port_int_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>port_int_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>port_cpsr_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[ea]"></a>port_cpsr_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[e9]"></a>port_clz</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>

<P><STRONG><a name="[8a]"></a>port_sched_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>

<P><STRONG><a name="[84]"></a>port_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>

<P><STRONG><a name="[88]"></a>port_irq_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[100]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[101]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[102]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f20x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f20x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f20x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f20x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f20x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f20x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f20x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, system_gd32f20x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f20x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f20x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[103]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[82]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[104]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[105]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[106]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[60]"></a>application_entry</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.application_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = application_entry &rArr; osThreadCreate &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>board_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, main.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = board_init &rArr; gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>cpu_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[85]"></a>cpu_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cpu_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[87]"></a>cpu_irq_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_irq_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_irq_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>

<P><STRONG><a name="[89]"></a>cpu_sched_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_sched_start))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[86]"></a>cpu_systick_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_systick_init &rArr; port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[f4]"></a>cpu_task_stk_init</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, tos_cpu.o(i.cpu_task_stk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_task_stk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[6d]"></a>delay_decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9d]"></a>exti_init</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, gd32f20x_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>

<P><STRONG><a name="[9e]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f20x_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>

<P><STRONG><a name="[5d]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[7f]"></a>gd_eval_com_init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gd32f20x_eval.o(i.gd_eval_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[80]"></a>gd_eval_key_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gd32f20x_eval.o(i.gd_eval_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gd_eval_key_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[7e]"></a>gd_eval_led_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gd32f20x_eval.o(i.gd_eval_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gd_eval_led_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[9f]"></a>gd_eval_led_toggle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gd32f20x_eval.o(i.gd_eval_led_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gd_eval_led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[a1]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f20x_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
</UL>

<P><STRONG><a name="[9c]"></a>gpio_exti_source_select</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gd32f20x_gpio.o(i.gpio_exti_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exti_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>

<P><STRONG><a name="[90]"></a>gpio_init</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32f20x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[a0]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f20x_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
</UL>

<P><STRONG><a name="[a3]"></a>knl_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_sys.o(i.knl_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[d3]"></a>knl_is_idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[a6]"></a>knl_is_inirq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_inirq))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[a7]"></a>knl_is_sched_locked</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_sched_locked))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[aa]"></a>knl_is_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_self))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[a5]"></a>knl_sched</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tos_sys.o(i.knl_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[5a]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = main &rArr; board_init &rArr; gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ae]"></a>mmheap_init_with_pool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_mmheap.o(i.mmheap_init_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[b3]"></a>mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mutex.o(i.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>

<P><STRONG><a name="[9b]"></a>nvic_irq_enable</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gd32f20x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>

<P><STRONG><a name="[b5]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f20x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[b6]"></a>osDelay</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osDelay &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[ac]"></a>osKernelInitialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>osKernelStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>osThreadCreate</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osThreadCreate &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_cmsis2knl
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[bd]"></a>pend_highest_pending_prio_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_pend.o(i.pend_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
</UL>

<P><STRONG><a name="[bf]"></a>pend_list_adjust</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_adjust &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[c2]"></a>pend_list_remove</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[c3]"></a>pend_task_wakeup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tos_pend.o(i.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>

<P><STRONG><a name="[b4]"></a>pend_wakeup_all</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_pend.o(i.pend_wakeup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[8c]"></a>port_systick_config</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, port_c.o(i.port_systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[8b]"></a>port_systick_priority_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port_c.o(i.port_systick_priority_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = port_systick_priority_set &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[81]"></a>rcu_clock_freq_get</STRONG> (Thumb, 336 bytes, Stack size 92 bytes, gd32f20x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[8f]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f20x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[f7]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f20x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[f6]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f20x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[c5]"></a>readyqueue_add</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tos_sched.o(i.readyqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[c8]"></a>readyqueue_add_head</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tos_sched.o(i.readyqueue_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[c7]"></a>readyqueue_add_tail</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[cd]"></a>readyqueue_first_task_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_first_task_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readyqueue_first_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[a9]"></a>readyqueue_highest_ready_task_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_highest_ready_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[ec]"></a>readyqueue_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[d4]"></a>readyqueue_is_prio_onlyone</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_is_prio_onlyone))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[ce]"></a>readyqueue_move_head_to_tail</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_move_head_to_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_move_head_to_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[d1]"></a>readyqueue_remove</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[d2]"></a>robin_sched</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tos_robin.o(i.robin_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = robin_sched &rArr; readyqueue_move_head_to_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_is_prio_onlyone
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[7d]"></a>systick_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, systick.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[61]"></a>task1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task1 &rArr; osDelay &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>task2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task2 &rArr; osDelay &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>tick_list_add</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tos_tick.o(i.tick_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[c4]"></a>tick_list_remove</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tos_tick.o(i.tick_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[e3]"></a>tick_update</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, tos_tick.o(i.tick_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[ed]"></a>timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[e6]"></a>timer_update</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tos_timer.o(i.timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = timer_update &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[a2]"></a>tos_cpu_clz</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_clz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>

<P><STRONG><a name="[ab]"></a>tos_cpu_cpsr_restore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[a8]"></a>tos_cpu_cpsr_save</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[ba]"></a>tos_knl_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[6a]"></a>tos_knl_irq_enter</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, tos_sys.o(i.tos_knl_irq_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tos_knl_irq_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6c]"></a>tos_knl_irq_leave</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_irq_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_irq_leave &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[69]"></a>tos_knl_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[e7]"></a>tos_knl_sched_lock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_lock &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[e8]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_unlock &rArr; knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[bb]"></a>tos_knl_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[b7]"></a>tos_millisec2tick</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_time.o(i.tos_millisec2tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[b0]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tos_mmheap.o(i.tos_mmheap_pool_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[a4]"></a>tos_task_create</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, tos_task.o(i.tos_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
</UL>

<P><STRONG><a name="[b8]"></a>tos_task_delay</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tos_task.o(i.tos_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[dc]"></a>tos_task_destroy</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
</UL>

<P><STRONG><a name="[b2]"></a>tos_task_prio_change</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, tos_task.o(i.tos_task_prio_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>

<P><STRONG><a name="[f5]"></a>tos_task_yield</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[6b]"></a>tos_tick_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tos_tick.o(i.tos_tick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[92]"></a>usart_baudrate_set</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, gd32f20x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[8d]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f20x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[91]"></a>usart_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f20x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[9a]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f20x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[8e]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f20x_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[97]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f20x_usart.o(i.usart_hardware_flow_cts_config))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[96]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f20x_usart.o(i.usart_hardware_flow_rts_config))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[95]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f20x_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[98]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f20x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[94]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f20x_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[99]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f20x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[93]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f20x_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d6]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[d5]"></a>system_clock_120m_hxtal</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, system_gd32f20x.o(i.system_clock_120m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[6e]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f20x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c6]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port_c.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>

<P><STRONG><a name="[71]"></a>__fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_mmheap.o(i.__fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[74]"></a>blk_insert</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_free_block
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[78]"></a>blk_link_next</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[79]"></a>blk_next</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>

<P><STRONG><a name="[f0]"></a>blk_set_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_free))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[f3]"></a>blk_set_prev_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[f1]"></a>blk_set_prev_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_used))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[ef]"></a>blk_set_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[f2]"></a>blk_set_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_used))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[75]"></a>blk_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_size))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[7a]"></a>blk_to_ptr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_to_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[72]"></a>generic_fls</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_mmheap.o(i.generic_fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>

<P><STRONG><a name="[77]"></a>insert_free_block</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, tos_mmheap.o(i.insert_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[76]"></a>mapping_insert</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(i.mapping_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[af]"></a>mmheap_ctl_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_ctl_init))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[ee]"></a>mmheap_pool_is_exist</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_pool_is_exist))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[7b]"></a>offset_to_block</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mmheap.o(i.offset_to_block))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[b1]"></a>mutex_old_owner_release</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tos_mutex.o(i.mutex_old_owner_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[c1]"></a>pend_list_add</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tos_pend.o(i.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[c0]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[be]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>

<P><STRONG><a name="[cb]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sched.o(i._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[cf]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(i._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[d0]"></a>readyqueue_prio_highest_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_prio_highest_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[ca]"></a>readyqueue_prio_mark</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_prio_mark))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[cc]"></a>tos_list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_sched.o(i.tos_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
</UL>

<P><STRONG><a name="[c9]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sched.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[5e]"></a>knl_idle_entry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sys.o(i.knl_idle_entry))
<BR>[Address Reference Count : 1]<UL><LI> tos_sys.o(i.knl_idle_init)
</UL>
<P><STRONG><a name="[d7]"></a>task_do_destroy</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tos_task.o(i.task_do_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[5f]"></a>task_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(i.task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task_exit &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(i.tos_task_create)
</UL>
<P><STRONG><a name="[dd]"></a>task_highest_pending_prio_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tos_task.o(i.task_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[d9]"></a>task_mutex_release</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_task.o(i.task_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[db]"></a>task_reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tos_task.o(i.task_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[da]"></a>task_state_is_ready</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_task.o(i.task_state_is_ready))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[d8]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[de]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[e0]"></a>tick_task_place</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, tos_tick.o(i.tick_task_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[e1]"></a>tick_task_takeoff</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tos_tick.o(i.tick_task_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[e2]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_tick.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>

<P><STRONG><a name="[e4]"></a>timer_place</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tos_timer.o(i.timer_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[e5]"></a>timer_takeoff</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tos_timer.o(i.timer_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[b9]"></a>errno_knl2cmsis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.errno_knl2cmsis))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[bc]"></a>priority_cmsis2knl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os.o(i.priority_cmsis2knl))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[70]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
