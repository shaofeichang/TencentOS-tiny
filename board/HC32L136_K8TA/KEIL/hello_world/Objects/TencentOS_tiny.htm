<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TencentOS_tiny.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TencentOS_tiny.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 28 16:54:57 2019
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; board_init &rArr; usart_init &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e1]">port_int_disable</a>
 <LI><a href="#[e2]">port_int_enable</a>
 <LI><a href="#[cf]">port_cpsr_save</a>
 <LI><a href="#[ce]">port_cpsr_restore</a>
 <LI><a href="#[84]">port_sched_start</a>
 <LI><a href="#[7e]">port_context_switch</a>
 <LI><a href="#[82]">port_irq_context_switch</a>
 <LI><a href="#[4]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">CtsIntCallBack</a> from usart.o(i.CtsIntCallBack) referenced from usart.o(i.usart_init)
 <LI><a href="#[2e]">ErrIntCallback</a> from usart.o(i.ErrIntCallback) referenced from usart.o(i.usart_init)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupts_hc32l136.o(i.HardFault_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[6]">IRQ000_Handler</a> from interrupts_hc32l136.o(i.IRQ000_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[7]">IRQ001_Handler</a> from interrupts_hc32l136.o(i.IRQ001_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[8]">IRQ002_Handler</a> from interrupts_hc32l136.o(i.IRQ002_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[9]">IRQ003_Handler</a> from interrupts_hc32l136.o(i.IRQ003_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[a]">IRQ004_Handler</a> from interrupts_hc32l136.o(i.IRQ004_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[b]">IRQ005_Handler</a> from interrupts_hc32l136.o(i.IRQ005_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[c]">IRQ006_Handler</a> from interrupts_hc32l136.o(i.IRQ006_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[d]">IRQ007_Handler</a> from interrupts_hc32l136.o(i.IRQ007_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[e]">IRQ008_Handler</a> from interrupts_hc32l136.o(i.IRQ008_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[f]">IRQ009_Handler</a> from interrupts_hc32l136.o(i.IRQ009_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[10]">IRQ010_Handler</a> from interrupts_hc32l136.o(i.IRQ010_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[11]">IRQ011_Handler</a> from interrupts_hc32l136.o(i.IRQ011_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[12]">IRQ012_Handler</a> from interrupts_hc32l136.o(i.IRQ012_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[13]">IRQ013_Handler</a> from interrupts_hc32l136.o(i.IRQ013_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[14]">IRQ014_Handler</a> from interrupts_hc32l136.o(i.IRQ014_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[15]">IRQ015_Handler</a> from interrupts_hc32l136.o(i.IRQ015_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[16]">IRQ016_Handler</a> from interrupts_hc32l136.o(i.IRQ016_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[17]">IRQ017_Handler</a> from interrupts_hc32l136.o(i.IRQ017_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[18]">IRQ018_Handler</a> from interrupts_hc32l136.o(i.IRQ018_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[19]">IRQ019_Handler</a> from interrupts_hc32l136.o(i.IRQ019_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1a]">IRQ020_Handler</a> from interrupts_hc32l136.o(i.IRQ020_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1b]">IRQ021_Handler</a> from interrupts_hc32l136.o(i.IRQ021_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1c]">IRQ022_Handler</a> from interrupts_hc32l136.o(i.IRQ022_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1d]">IRQ023_Handler</a> from interrupts_hc32l136.o(i.IRQ023_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1e]">IRQ024_Handler</a> from interrupts_hc32l136.o(i.IRQ024_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1f]">IRQ025_Handler</a> from interrupts_hc32l136.o(i.IRQ025_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[20]">IRQ026_Handler</a> from interrupts_hc32l136.o(i.IRQ026_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[21]">IRQ027_Handler</a> from interrupts_hc32l136.o(i.IRQ027_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[22]">IRQ028_Handler</a> from interrupts_hc32l136.o(i.IRQ028_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[23]">IRQ029_Handler</a> from interrupts_hc32l136.o(i.IRQ029_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[24]">IRQ030_Handler</a> from interrupts_hc32l136.o(i.IRQ030_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[25]">IRQ031_Handler</a> from interrupts_hc32l136.o(i.IRQ031_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[2f]">PErrIntCallBack</a> from usart.o(i.PErrIntCallBack) referenced from usart.o(i.usart_init)
 <LI><a href="#[4]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[2c]">RxIntCallback</a> from usart.o(i.RxIntCallback) referenced from usart.o(i.usart_init)
 <LI><a href="#[3]">SVC_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from interrupts_hc32l136.o(i.SysTick_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_hc32l136.o(i.SystemInit) referenced from startup_hc32l136.o(.text)
 <LI><a href="#[2d]">TxIntCallback</a> from usart.o(i.TxIntCallback) referenced from usart.o(i.usart_init)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32l136.o(.text)
 <LI><a href="#[31]">application_entry</a> from hello_world.o(i.application_entry) referenced from main.o(.constdata)
 <LI><a href="#[29]">fputc</a> from usart.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[2a]">knl_idle_entry</a> from tos_sys.o(i.knl_idle_entry) referenced from tos_sys.o(i.knl_idle_init)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[32]">task1</a> from hello_world.o(i.task1) referenced from hello_world.o(.constdata)
 <LI><a href="#[33]">task2</a> from hello_world.o(i.task2) referenced from hello_world.o(.constdata)
 <LI><a href="#[2b]">task_exit</a> from tos_task.o(i.task_exit) referenced from tos_task.o(i.tos_task_create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[34]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[dc]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[dd]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[de]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[df]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[e0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>port_int_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>port_int_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>port_cpsr_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[ce]"></a>port_cpsr_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[84]"></a>port_sched_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>

<P><STRONG><a name="[7e]"></a>port_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>

<P><STRONG><a name="[82]"></a>port_irq_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_CalScnt
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>CtsIntCallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.CtsIntCallBack))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_init)
</UL>
<P><STRONG><a name="[3a]"></a>Debug_UartWrite</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart.o(i.Debug_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Debug_UartWrite &rArr; Uart_SendData &rArr; Uart_GetStatus &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2e]"></a>ErrIntCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.ErrIntCallback))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_init)
</UL>
<P><STRONG><a name="[68]"></a>Gpio_Init</STRONG> (Thumb, 300 bytes, Stack size 12 bytes, gpio.o(i.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_PortInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[69]"></a>Gpio_SetAfMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.Gpio_SetAfMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_SetAfMode
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_PortInit
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>IRQ000_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>IRQ001_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>IRQ002_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRQ003_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>IRQ004_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ005_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ006_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ007_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ008_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ009_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ010_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ011_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ012_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ013_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ014_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ015_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ016_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ017_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ018_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ019_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ020_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ021_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ022_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ023_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ024_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ025_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcnt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ026_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ027_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ028_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lvd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ029_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ030_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ031_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkTrim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PErrIntCallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.PErrIntCallBack))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_init)
</UL>
<P><STRONG><a name="[2c]"></a>RxIntCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart.o(i.RxIntCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RxIntCallback &rArr; Uart_DisableIrq &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_init)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Sysctrl_GetHClkFreq</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, sysctrl.o(i.Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[55]"></a>Sysctrl_GetPClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_GetPClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[90]"></a>Sysctrl_SetPeripheralGate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[56]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_hc32l136.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_hc32l136.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>TxIntCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.TxIntCallback))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_init)
</UL>
<P><STRONG><a name="[5b]"></a>Uart_CalScnt</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, uart.o(i.Uart_CalScnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Uart_CalScnt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[5e]"></a>Uart_ClrIsr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart.o(i.Uart_ClrIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_ClrIsr &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[5f]"></a>Uart_ClrStatus</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, uart.o(i.Uart_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_ClrStatus &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
</UL>

<P><STRONG><a name="[4d]"></a>Uart_DisableIrq</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, uart.o(i.Uart_DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_DisableIrq &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxIntCallback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[60]"></a>Uart_EnableFunc</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, uart.o(i.Uart_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_EnableFunc &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[61]"></a>Uart_GetStatus</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, uart.o(i.Uart_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart_GetStatus &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
</UL>

<P><STRONG><a name="[62]"></a>Uart_Init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, uart.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart_Init &rArr; Uart_SetStopBit &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetStopBit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMultiMode
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInitNvic
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInitNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[66]"></a>Uart_PortInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usart.o(i.Uart_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uart_PortInit &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[3b]"></a>Uart_SendData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uart.o(i.Uart_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart_SendData &rArr; Uart_GetStatus &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_UartWrite
</UL>

<P><STRONG><a name="[6a]"></a>Uart_SetBaud</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart.o(i.Uart_SetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_SetBaud &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[6b]"></a>Uart_SetClkDiv</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart.o(i.Uart_SetClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_SetClkDiv &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[6c]"></a>Uart_SetMMDOrCk</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart.o(i.Uart_SetMMDOrCk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_SetMMDOrCk &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[63]"></a>Uart_SetMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart.o(i.Uart_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_SetMode &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[65]"></a>Uart_SetMultiMode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart.o(i.Uart_SetMultiMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_SetMultiMode &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[64]"></a>Uart_SetStopBit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uart.o(i.Uart_SetStopBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_SetStopBit &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[6d]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e9]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[91]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[d2]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tos_time.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
</UL>

<P><STRONG><a name="[54]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>

<P><STRONG><a name="[ea]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[eb]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ec]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[31]"></a>application_entry</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hello_world.o(i.application_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = application_entry &rArr; osThreadCreate &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>board_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = board_init &rArr; usart_init &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>cpu_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[7f]"></a>cpu_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_cpu.o(i.cpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cpu_init &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[81]"></a>cpu_irq_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_irq_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_irq_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>

<P><STRONG><a name="[83]"></a>cpu_sched_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_sched_start))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[80]"></a>cpu_systick_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_systick_init &rArr; port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[d9]"></a>cpu_task_stk_init</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, tos_cpu.o(i.cpu_task_stk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_task_stk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[67]"></a>ddl_memclr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ddl.o(i.ddl_memclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_PortInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[29]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; Debug_UartWrite &rArr; Uart_SendData &rArr; Uart_GetStatus &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_UartWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[87]"></a>knl_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_sys.o(i.knl_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[b9]"></a>knl_is_idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[8a]"></a>knl_is_inirq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_inirq))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[8b]"></a>knl_is_sched_locked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_sched_locked))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[8e]"></a>knl_is_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_self))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[89]"></a>knl_sched</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tos_sys.o(i.knl_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[7b]"></a>led_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = led_init &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; board_init &rArr; usart_init &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[94]"></a>mmheap_init_with_pool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_mmheap.o(i.mmheap_init_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[99]"></a>mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mutex.o(i.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>

<P><STRONG><a name="[9b]"></a>osDelay</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osDelay &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[92]"></a>osKernelInitialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>osKernelStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>osThreadCreate</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osThreadCreate &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_cmsis2knl
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[a2]"></a>pend_highest_pending_prio_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_pend.o(i.pend_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
</UL>

<P><STRONG><a name="[a4]"></a>pend_list_adjust</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_adjust &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[a7]"></a>pend_list_remove</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[a8]"></a>pend_task_wakeup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tos_pend.o(i.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>

<P><STRONG><a name="[9a]"></a>pend_wakeup_all</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tos_pend.o(i.pend_wakeup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[86]"></a>port_systick_config</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, port_c.o(i.port_systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[85]"></a>port_systick_priority_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port_c.o(i.port_systick_priority_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = port_systick_priority_set &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[aa]"></a>readyqueue_add</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tos_sched.o(i.readyqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[ad]"></a>readyqueue_add_head</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tos_sched.o(i.readyqueue_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[ac]"></a>readyqueue_add_tail</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[b2]"></a>readyqueue_first_task_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_first_task_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readyqueue_first_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[8d]"></a>readyqueue_highest_ready_task_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_highest_ready_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[d0]"></a>readyqueue_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[ba]"></a>readyqueue_is_prio_onlyone</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_sched.o(i.readyqueue_is_prio_onlyone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readyqueue_is_prio_onlyone
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[b3]"></a>readyqueue_move_head_to_tail</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_move_head_to_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_move_head_to_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[b7]"></a>readyqueue_remove</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[b8]"></a>robin_sched</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, tos_robin.o(i.robin_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = robin_sched &rArr; readyqueue_move_head_to_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_is_prio_onlyone
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[32]"></a>task1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hello_world.o(i.task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task1 &rArr; osDelay &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hello_world.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>task2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hello_world.o(i.task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task2 &rArr; osDelay &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hello_world.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>tick_list_add</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tos_tick.o(i.tick_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[a9]"></a>tick_list_remove</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tos_tick.o(i.tick_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[c8]"></a>tick_update</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, tos_tick.o(i.tick_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[d1]"></a>timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[cb]"></a>timer_update</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tos_timer.o(i.timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = timer_update &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[b6]"></a>tos_cpu_clz</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tos_cpu.o(i.tos_cpu_clz))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
</UL>

<P><STRONG><a name="[8f]"></a>tos_cpu_cpsr_restore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[8c]"></a>tos_cpu_cpsr_save</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[9f]"></a>tos_knl_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[4f]"></a>tos_knl_irq_enter</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, tos_sys.o(i.tos_knl_irq_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tos_knl_irq_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[51]"></a>tos_knl_irq_leave</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_irq_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_irq_leave &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4e]"></a>tos_knl_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[cc]"></a>tos_knl_sched_lock</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_lock &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[cd]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_unlock &rArr; knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[a0]"></a>tos_knl_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[9c]"></a>tos_millisec2tick</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_time.o(i.tos_millisec2tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tos_millisec2tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[96]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tos_mmheap.o(i.tos_mmheap_pool_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[88]"></a>tos_task_create</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, tos_task.o(i.tos_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
</UL>

<P><STRONG><a name="[9d]"></a>tos_task_delay</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, tos_task.o(i.tos_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[c1]"></a>tos_task_destroy</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
</UL>

<P><STRONG><a name="[98]"></a>tos_task_prio_change</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, tos_task.o(i.tos_task_prio_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_pending
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>

<P><STRONG><a name="[da]"></a>tos_task_yield</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_task_yield &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[50]"></a>tos_tick_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tos_tick.o(i.tos_tick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7c]"></a>usart_init</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usart_init &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMMDOrCk
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetClkDiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetBaud
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrIsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_CalScnt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_PortInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[57]"></a>UartDeInitNvic</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uart.o(i.UartDeInitNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartDeInitNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[5c]"></a>UartGetInternDataPtr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart.o(i.UartGetInternDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMMDOrCk
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetClkDiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetBaud
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrIsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_CalScnt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetStopBit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMultiMode
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMode
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>

<P><STRONG><a name="[5a]"></a>UartInitNvic</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart.o(i.UartInitNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartInitNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[58]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInitNvic
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInitNvic
</UL>

<P><STRONG><a name="[59]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInitNvic
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInitNvic
</UL>

<P><STRONG><a name="[6f]"></a>__fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_mmheap.o(i.__fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[72]"></a>blk_insert</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = blk_insert &rArr; mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_free_block
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[76]"></a>blk_link_next</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[77]"></a>blk_next</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>

<P><STRONG><a name="[d5]"></a>blk_set_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_free))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[d8]"></a>blk_set_prev_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[d6]"></a>blk_set_prev_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_used))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[d4]"></a>blk_set_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[d7]"></a>blk_set_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_used))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[73]"></a>blk_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_size))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[78]"></a>blk_to_ptr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_to_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[70]"></a>generic_fls</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tos_mmheap.o(i.generic_fls))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>

<P><STRONG><a name="[75]"></a>insert_free_block</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tos_mmheap.o(i.insert_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[74]"></a>mapping_insert</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, tos_mmheap.o(i.mapping_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mapping_insert &rArr; __fls
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[95]"></a>mmheap_ctl_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tos_mmheap.o(i.mmheap_ctl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[d3]"></a>mmheap_pool_is_exist</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_pool_is_exist))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[79]"></a>offset_to_block</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mmheap.o(i.offset_to_block))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[97]"></a>mutex_old_owner_release</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tos_mutex.o(i.mutex_old_owner_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[a6]"></a>pend_list_add</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tos_pend.o(i.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[a5]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[a3]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>

<P><STRONG><a name="[b0]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sched.o(i._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[b4]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(i._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[b5]"></a>readyqueue_prio_highest_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_prio_highest_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[af]"></a>readyqueue_prio_mark</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_prio_mark))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[b1]"></a>tos_list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_sched.o(i.tos_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
</UL>

<P><STRONG><a name="[ae]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sched.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[2a]"></a>knl_idle_entry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sys.o(i.knl_idle_entry))
<BR>[Address Reference Count : 1]<UL><LI> tos_sys.o(i.knl_idle_init)
</UL>
<P><STRONG><a name="[bb]"></a>task_do_destroy</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tos_task.o(i.task_do_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_pending
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[2b]"></a>task_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(i.task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task_exit &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(i.tos_task_create)
</UL>
<P><STRONG><a name="[c2]"></a>task_highest_pending_prio_get</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tos_task.o(i.task_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[bd]"></a>task_mutex_release</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_task.o(i.task_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[c0]"></a>task_reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tos_task.o(i.task_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[bf]"></a>task_state_is_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_task.o(i.task_state_is_pending))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[be]"></a>task_state_is_ready</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(i.task_state_is_ready))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[bc]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[c3]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[c5]"></a>tick_task_place</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, tos_tick.o(i.tick_task_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[c6]"></a>tick_task_takeoff</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tos_tick.o(i.tick_task_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[c7]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_tick.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>

<P><STRONG><a name="[c9]"></a>timer_place</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tos_timer.o(i.timer_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[ca]"></a>timer_takeoff</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tos_timer.o(i.timer_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[ab]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, port_c.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>

<P><STRONG><a name="[9e]"></a>errno_knl2cmsis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.errno_knl2cmsis))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[a1]"></a>priority_cmsis2knl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os.o(i.priority_cmsis2knl))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[6e]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>Adc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ024_Handler
</UL>

<P><STRONG><a name="[43]"></a>Adt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ020_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ019_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ018_Handler
</UL>

<P><STRONG><a name="[4c]"></a>ClkTrim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ031_Handler
</UL>

<P><STRONG><a name="[3d]"></a>Dma_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ004_Handler
</UL>

<P><STRONG><a name="[3c]"></a>Gpio_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ003_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ002_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ001_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ000_Handler
</UL>

<P><STRONG><a name="[40]"></a>I2c_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ013_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ012_Handler
</UL>

<P><STRONG><a name="[4b]"></a>Lcd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ029_Handler
</UL>

<P><STRONG><a name="[42]"></a>LpTim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ017_Handler
</UL>

<P><STRONG><a name="[4a]"></a>Lvd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ028_Handler
</UL>

<P><STRONG><a name="[44]"></a>Pca_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ021_Handler
</UL>

<P><STRONG><a name="[48]"></a>Pcnt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ025_Handler
</UL>

<P><STRONG><a name="[46]"></a>Rtc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ023_Handler
</UL>

<P><STRONG><a name="[3f]"></a>Spi_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ011_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ010_Handler
</UL>

<P><STRONG><a name="[3e]"></a>Tim3_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ005_Handler
</UL>

<P><STRONG><a name="[41]"></a>Tim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ016_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ015_Handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ014_Handler
</UL>

<P><STRONG><a name="[49]"></a>Vc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ027_Handler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ026_Handler
</UL>

<P><STRONG><a name="[45]"></a>Wdt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ022_Handler
</UL>
<HR></body></html>
